///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;
using MCTR.DataAccessInterface;
using MCTR.DataAccess;
using MCTR.BusinessInterface;
using MCTR.Business;

namespace MCTR.Business
{
    ///*********************************************************************
    ///<summary>
    ///lbrratecy_business is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>

    public class LbrRateCyLogic : BaseBusiness, ILbrRateCyLogic

    {
        private readonly ILog logger;
        public LbrRateCyLogic()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : lbrRateCyWhenNewFormInstance
        ///</summary>
        ///<param name = "lbrRateCy"></param>
        ///<returns>IEnumerable<LbrRateCy> </returns>

        public IEnumerable<LbrRateCy> lbrRateCyWhenNewFormInstance(IEnumerable<LbrRateCy> lbrRateCy)
        {
            try
            {
                logger.Info("Executing  MCTR.Business.LbrRateCyLogic.lbrRateCyWhenNewFormInstance() with request" + lbrRateCy);
                ILbrRateCyRepository LbrRateRes = new LbrRateCyRepository();
                var response = LbrRateRes.lbrRateCyWhenNewFormInstance(lbrRateCy);
                logger.Info("Response received from MCTR.Business.LbrRateCyLogic.lbrRateCyWhenNewFormInstance():" + response);
                return response;
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Business.LbrRateCyLogic.lbrRateCyWhenNewFormInstance():" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : LbrRateOnLoad
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<LineItem> </returns>
        public IEnumerable<LbrRateCy> LbrRateOnLoad(IEnumerable<LbrRateCy> lbrRateCy)
        {
            try
            {
              
                ILbrRateCyRepository LbrRateRes = new LbrRateCyRepository();
                var response = LbrRateRes.LbrRateOnLoad(lbrRateCy);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : lbrRateCyWhenWindowClosed
        ///</summary>
        ///<param name = "LbrRateCy"></param>
        ///<returns>IEnumerable<LbrRateCy> </returns>

        public IEnumerable<LbrRateCy> lbrRateCyWhenWindowClosed(IEnumerable<LbrRateCy> lbrRateCy)
        {
            try
            {
                logger.Info("Executing  MCTR.Business.LbrRateCyLogic.lbrRateCyWhenWindowClosed() with request" + lbrRateCy);
                ILbrRateCyRepository LbrRateRes = new LbrRateCyRepository();
                var response = LbrRateRes.lbrRateCyWhenWindowClosed(lbrRateCy);
                logger.Info("Response received from MCTR.Business.LbrRateCyLogic.lbrRateCyWhenWindowClosed():" + response);
                return response;
            }

            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.LbrRateCyLogic.lbrRateCyWhenWindowClosed():" + e.Message);
                throw;
            }

        }
     

        }
    }


