///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using System.Threading.Tasks;
using System.Web.Mvc;
using System.Net.Http;
using System.Net.Http.Headers;
using MCTR.Web.Handlers;

using log4net;

using MCTR.DomainEntities;

namespace MCTR.Web.Handlers
{
    public class MctrMessageStatusHandler
    {
         private readonly ILog logger;

        public MctrMessageStatusHandler()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrMessageStatusOnInsert
        ///</summary>
        ///<param name = "mctrLogOrig"></param>
        ///<returns>IEnumerable<MctrLog> </returns>
        public IEnumerable<MctrMessageStatus> mctrMessageStatusOnInsert(MctrMessageStatus mctrMessageStatus)
        {

            try {
                logger.Debug("Executing mctrMessageOnInsert rest service handler.");
                string restApiPath = "MctrMessageStatus/mctrMessageStatusOnInsert";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrMessageStatus);
                var response = HandlerUtil<MctrMessageStatus>.RestPostProcessor(restApiPath, mctrMessageStatus);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogWhenNewRecordInstance
        ///</summary>
        ///<param name = "mctrLogOrig"></param>
        ///<returns>IEnumerable<MctrLog> </returns>

        public IEnumerable<MctrMessageStatus> mctrLogWhenNewRecordInstance(MctrMessageStatus mctrMessageStatus)
        {
            try
            {
                logger.Debug("Executing MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance rest service handler.");
                string restApiPath = "MctrLogService/mctrLogWhenNewRecordInstance";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrMessageStatus);
                var response = HandlerUtil<MctrMessageStatus>.RestPostProcessor(restApiPath, mctrMessageStatus);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : GetMessageStatus
        ///</summary>
    
        public IEnumerable<MctrMessageStatus> GetMessageStatus()
        {
            try
            {
                logger.Debug("Executing mctrMessageStatusWhenNewFormInstance rest service handler.");
                string restApiPath = "MctrMessageStatus/GetMessageStatus";
                logger.Info("Invoking Rest API : " + restApiPath);
                var response = HandlerUtil<MctrMessageStatus>.RestGetProcessor(restApiPath);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

    }

}

