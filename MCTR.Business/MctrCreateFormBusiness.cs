
using System;
using System.Collections.Generic;
///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccessInterface;
using MCTR.DataAccess;
using System.Linq;

namespace MCTR.Business
{
    public class MctrCreateFormBusiness : BaseBusiness, IMctrCreateFormBusiness
    {

        /// <summary>
        /// 10 methods(Marth 9th)
        /// </summary>


        private readonly ILog logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        private List<MctrCreateForm> resultList = new List<MctrCreateForm>();
        IMctrCreateFormRepository mctrCreateFormRepository = new MctrCreateFormRepository();
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItembutCopyWhenButtonPressed
        ///</summary>
        ///<param name = "mctrCreateForm"></param>
        ///<returns>IEnumerable<LbrRate></returns>
        public IEnumerable<MctrCreateForm> mctrLineItembutCopyWhenButtonPressed(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            var result = mctrCreateFormRepository.mctrLineItembutCopyWhenButtonPressed(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemclassCdToPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemclassCdToPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }



        public IEnumerable<MctrCreateForm> mctrLineItemrscToPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemrscToPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemworkLocToPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemworkLocToPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemworkDeptToPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemworkDeptToPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemhomeBuglToPostTextItem(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemhomeBuglToPostTextItem(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemaccountToPostTextItem(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemaccountToPostTextItem(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemestmtgPricgCdFromPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemestmtgPricgCdFromPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemaccountFromPostTextItem(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemaccountFromPostTextItem(mctrCreateForm);
            return result;
        }


        public IEnumerable<MctrCreateForm> mctrLineItemquantityFromPostTextItem(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemquantityFromPostTextItem(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> submitBtnmctrLineItemquantityFromPostTextItem(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.submitBtnmctrLineItemquantityFromPostTextItem(mctrCreateForm);
            return result;
        }


        public IEnumerable<MctrCreateForm> mctrLineItemhomeDeptToPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemhomeDeptToPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemhomeLocToPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemhomeLocToPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }



        public IEnumerable<MctrCreateForm> mctrLineItemestmtgPricgCdToPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemestmtgPricgCdToPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemamountToPostTextItem(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemamountToPostTextItem(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemactivityIdFromPreTextItem(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            MctrCreateForm recievedValue = mctrCreateForm.First();
            MctrCreateForm globalValues = mctrCreateForm.Last();
            globalValues.ActivityId = recievedValue.ActivityId;
            resultList.Add(globalValues);
            return resultList;
        }
        public IEnumerable<MctrLineItem> mctrLineItemPreDelete(IEnumerable<MctrLineItem> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemPreDelete(mctrCreateForm);
            return result;
        }
        public IEnumerable<MctrCreateForm> justificationsave(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.justificationsave(mctrCreateForm);
            return result;
        }
        public IEnumerable<MctrLineiteminquiry> ttdInqCyrTtdInqCyrOnLoad(IEnumerable<MctrLineiteminquiry> mctrlineitem)
        {

            var result = mctrCreateFormRepository.ttdInqCyrTtdInqCyrOnLoad(mctrlineitem);
            return result;
        }

        public IEnumerable<MctrLineiteminquiry> ttdInqPyrTtdInqPyrOnLoad(IEnumerable<MctrLineiteminquiry> mctrlineitem)
        {

            var result = mctrCreateFormRepository.ttdInqPyrTtdInqPyrOnLoad(mctrlineitem);
            return result;
        }

        public IEnumerable<MctrLineiteminquiry> ttdInqFilter(IEnumerable<MctrLineiteminquiry> mctrlineitem)
        {

            var result = mctrCreateFormRepository.ttdInqFilter(mctrlineitem);
            return result;
        }



        public IEnumerable<MctrCreateForm> mctrHeaderbutUnjrnlWhenButtonPressed(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrHeaderbutUnjrnlWhenButtonPressed(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrHeaderbutJrnlWhenButtonPressed(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrHeaderbutJrnlWhenButtonPressed(mctrCreateForm);
            return result;
        }
        public IEnumerable<MctrLineItem> mctrLineItemInsert(IEnumerable<MctrLineItem> mctrLineItem)
        {


            var response = mctrCreateFormRepository.mctrLineItemInsert(mctrLineItem);

            return mctrLineItem;
        }

        public IEnumerable<MctrLineItem> mctrLineItemDelete(IEnumerable<MctrLineItem> mctrCreateForm)
        {


            var response = mctrCreateFormRepository.mctrLineItemDelete(mctrCreateForm);

            return mctrCreateForm;
        }
        public IEnumerable<MctrCreateForm> mctrLineItemperiodFromOnError(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            MctrCreateForm recievedValue = mctrCreateForm.First();
            if (recievedValue.ActivityId == null)
            {
                recievedValue.Resp_Message = "please enter the activity id (from) first";
            }
            resultList.Add(recievedValue);
            return resultList;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemperiodToOnError(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            MctrCreateForm recievedValue = mctrCreateForm.First();
            if (recievedValue.ActivityId == null)
            {
                recievedValue.Resp_Message = "please enter the activity id (from) first";
            }
            resultList.Add(recievedValue);
            return resultList;
        }

        public IEnumerable<MctrCreateForm> mctrHeaderbutJustificationWhenButtonPressed(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrHeaderbutJustificationWhenButtonPressed(mctrCreateForm);
            return result;
        }
        public IEnumerable<MctrCreateForm> mctrLineItemhomeDeptFromPreTextItem(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            MctrCreateForm recievedValue = mctrCreateForm.First();
            MctrCreateForm globalValues = mctrCreateForm.Last();
            globalValues.HomeDeptFrom = recievedValue.HomeDeptFrom;
            globalValues.ClassCdFrom = recievedValue.ClassCdFrom;
            globalValues.RscFrom = recievedValue.RscFrom;
            resultList.Add(globalValues);
            return resultList;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemhomeLocFromPreTextItem(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            MctrCreateForm obj = new MctrCreateForm();
            MctrCreateForm recievedValue = mctrCreateForm.First();
            MctrCreateForm globalValues = mctrCreateForm.Last();
            globalValues.HomeLocFrom = recievedValue.HomeLocFrom;
            globalValues.ClassCdFrom = recievedValue.ClassCdFrom;
            globalValues.RscFrom = recievedValue.RscFrom;
            resultList.Add(obj);
            return resultList;
        }

        public IEnumerable<MctrRejectCode> getRgLOVReject(IEnumerable<MctrRejectCode> mctrRejectCode)
        {
            logger.Info("Executing DataAccess : getRgLOVReject()");

            var resultList = mctrCreateFormRepository.getRgLOVReject(mctrRejectCode.First());
            logger.Info("Response received from mctrCreateFormRepository.getRgLOVReject() : " + resultList);
            return resultList;
        }

        public IEnumerable<BusUnit> getRgBuGrpLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            logger.Info("Executing DataAccess : getRgBuGrpLOV() with request : " + mctrCreateForm);
            var resultList = mctrCreateFormRepository.getRgBuGrpLOV(mctrCreateForm) as List<BusUnit>;
            logger.Info("Response received from mctrCreateFormRepository.getRgBuGrpLOV() : " + resultList);
            return resultList;


        }

        public IEnumerable<MctrCreateForm> getRgYearLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            logger.Info("Executing DataAccess : getRgYearLOV() with request : " + mctrCreateForm);

            resultList = mctrCreateFormRepository.getRgYearLOV(mctrCreateForm) as List<MctrCreateForm>;
            logger.Info("Response received from mctrCreateFormRepository.getRgYearLOV() : " + resultList);
            return resultList;

        }

        public IEnumerable<MctrCreateForm> mctrHeaderonLoad(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            logger.Info("Executing DataAccess : getRgYearLOV() with request : " + mctrCreateForm);

            resultList = mctrCreateFormRepository.mctrHeaderonLoad(mctrCreateForm) as List<MctrCreateForm>;
            logger.Info("Response received from mctrCreateFormRepository.getRgYearLOV() : " + resultList);
            return resultList;

        }






        public IEnumerable<MctrCreateForm> mctrHeaderbutSubmitWhenButtonPressed(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            MctrCreateForm recieved = mctrCreateForm.First();
            logger.Info("Executing DataAccess : mctrHeaderbutSubmitWhenButtonPressed() with request : " + mctrCreateForm);

            try
            {

                if (recieved.BemsOrig == recieved.SessionBems)
                {
                    if (recieved.StatusId == "oa" || recieved.StatusId == "or")
                    {
                        if (recieved.justification != null && recieved.preventativeMeasures != null)
                        {

                            if (recieved.BemsSuper != null && recieved.BemsFinCtl != null)
                            {
                    
                                resultList = mctrCreateFormRepository.mctrHeaderbutSubmitWhenButtonPressed(mctrCreateForm) as List<MctrCreateForm>;
                                logger.Info("Response received from mctrCreateFormRepository.getRgYearLOV() : " + resultList);

                            }
                            else
                            {
                                throw new Exception("please identify supervisor / financial control approvers before you submit.");
                            }
                        }
                        else
                        {
                            throw new Exception("please complete justification and preventative measure before you submit.");

                        }
                    }
                    else
                    {
                        throw new Exception("mctr status must be values oa or or before you as originator can submit.");

                    }
                }
                else
                {
                    throw new Exception("you must be the mctr originator for this entry in order to submit.");
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCreateFormBusiness.mctrHeaderbutSubmitWhenButtonPressed" + e.Message);
                throw;
            }


            return resultList;

        }

        public IEnumerable<MctrCreateForm> getRgReasonLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            logger.Info("Executing DataAccess : getRgReasonLOV() with request : " + mctrCreateForm);

            resultList = mctrCreateFormRepository.getRgReasonLOV(mctrCreateForm) as List<MctrCreateForm>;
            logger.Info("Response received from mctrCreateFormRepository.MctrLineItemOnload() : " + resultList);
            return resultList;

        }

        public IEnumerable<MctrLineItem> mctrLineItemOnLoad(IEnumerable<MctrLineItem> mctrLineItem)
        {
            logger.Info("Executing DataAccess : mctrLineItemOnLoad() with request : " + mctrLineItem);

            List<MctrLineItem> resultList = new List<MctrLineItem>();
            resultList = mctrCreateFormRepository.mctrLineItemOnLoad(mctrLineItem) as List<MctrLineItem>;
            logger.Info("Response received from mctrCreateFormRepository.mctrLineItemOnLoad() : " + resultList);
            return resultList;

        }
        public IEnumerable<MctrCreateForm> getRgApplLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            logger.Info("Executing DataAccess : getRgApplLOV() with request : " + mctrCreateForm);

            resultList = mctrCreateFormRepository.getRgApplLOV(mctrCreateForm) as List<MctrCreateForm>;
            logger.Info("Response received from mctrCreateFormRepository.getRgApplLOV() : " + resultList);
            return resultList;

        }

        public IEnumerable<MctrCreateForm> getRgSuperLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            logger.Info("Executing DataAccess : getRgSuperLOV() with request : " + mctrCreateForm);

            resultList = mctrCreateFormRepository.getRgSuperLOV(mctrCreateForm) as List<MctrCreateForm>;
            logger.Info("Response received from mctrCreateFormRepository.getRgSuperLOV() : " + resultList);
            return resultList;

        }


        public IEnumerable<MctrCreateForm> MctrHeaderOnLoad(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            logger.Info("Executing DataAccess : getRgYearLOV() with request : " + mctrCreateForm);

            resultList = mctrCreateFormRepository.mctrHeaderonLoad(mctrCreateForm) as List<MctrCreateForm>;
            logger.Info("Response received from mctrCreateFormRepository.getRgYearLOV() : " + resultList);
            return resultList;

        }
        public IEnumerable<MctrCreateForm> mctrHeaderPreInsert(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            logger.Info("Executing DataAccess : mctrHeaderPreInsert with request : " + mctrCreateForm);

            resultList = mctrCreateFormRepository.mctrHeaderPreInsert(mctrCreateForm) as List<MctrCreateForm>;
            logger.Info("Response received from mctrCreateFormRepository.mctrHeaderPreInsert() : " + resultList);

            return resultList;
        }

        public IEnumerable<MCTRComments> mctrCommentviewStatementWhenButtonPressed(IEnumerable<MCTRComments> mctrComments)
        {
            logger.Debug("Executing MCTR.Business.MCTRCreateFormBusiness.mctrCommentviewStatementWhenButtonPressed ");
            try
            {
                var response = mctrCreateFormRepository.mctrCommentviewStatementWhenButtonPressed(mctrComments);
                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured at MCTR.Business.MCTRCreateFormBusiness.mctrCommentviewStatementWhenButtonPressed : " + ex);
                throw;
            }


        }

        public IEnumerable<MCTRComments> mctrcommentonload(IEnumerable<MCTRComments> mctrComments)
        {
            //// SQL: select * from mctr_comment orderby
            try
            {

                var response = mctrCreateFormRepository.mctrcommentonload(mctrComments);
                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured at : " + ex);
                throw;
            }
        }
        public IEnumerable<MCTRComments> mctrCommentbutSaveWhenButtonPressed(IEnumerable<MCTRComments> mctrComments)
        {
            try
            {

                var response = mctrCreateFormRepository.mctrCommentbutSaveWhenButtonPressed(mctrComments);

                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured at : " + ex);
                throw;
            }
        }

        public IEnumerable<MCTRComments> mctrCommentPostQuery(IEnumerable<MCTRComments> mctrComments)
        {

            try
            {

                var response = mctrCreateFormRepository.mctrCommentpostquery(mctrComments);

                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured at : " + ex);
                throw;
            }
        }
        public IEnumerable<MCTRComments> mctrCommentOnMessage(IEnumerable<MCTRComments> mctrComments)
        {
            try
            {

                var response = mctrCreateFormRepository.mctrCommentonmessage(mctrComments);

                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured at : " + ex);
                throw;
            }
        }
        public IEnumerable<MCTRComments> mctrCommentPreInsert(IEnumerable<MCTRComments> mctrComments)
        {
            try
            {

                var response = mctrCreateFormRepository.mctrCommentpreinsert(mctrComments);

                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured at : " + ex);
                throw;
            }
        }
        public IEnumerable<MCTRComments> mctrCommentOnInsert(IEnumerable<MCTRComments> mctrComments)
        {
            try
            {

                var response = mctrCreateFormRepository.mctrCommentOnInsert(mctrComments);

                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured at : " + ex);
                throw;
            }
        }

        public IEnumerable<HeaderExcel> mctrheaderbuttoxlswhenbuttonpressed(IEnumerable<HeaderExcel> mctrCreateForm)
        {
            try
            {
    
                logger.Info("Executing MCTR.Business.mctrheaderbuttoxlswhenbuttonpressed with request : " + mctrCreateForm);
                var resultlist = mctrCreateFormRepository.mctrheaderbuttoxlswhenbuttonpressed(mctrCreateForm);
                List<HeaderExcel> headerExcelList = resultlist.ToList();

                HeaderExcel headerExcel = headerExcelList.FirstOrDefault();
                
                foreach (var lineItem in headerExcel.mctrLineItemList)
                {
                    if (lineItem.HOME_LOC == "01" || lineItem.HOME_LOC == "02")
                    {
                        lineItem.HOME_LOC = "'" + lineItem.HOME_LOC;
                    }
                    if (lineItem.HOME_POOL == "01" || lineItem.HOME_POOL == "02")
                    {
                        lineItem.HOME_POOL = "'" + lineItem.HOME_POOL;
                    }
                    if (lineItem.LABOR_RATE_CD == "01" || lineItem.LABOR_RATE_CD == "02")
                    {
                        lineItem.LABOR_RATE_CD = "'" + lineItem.LABOR_RATE_CD;
                    }
                    if (lineItem.WORK_LOC == "01" || lineItem.WORK_LOC == "02")
                    {
                        lineItem.WORK_LOC = "'" + lineItem.WORK_LOC;
                    }
                    if (lineItem.WORK_POOL == "01" || lineItem.WORK_POOL == "02")
                    {
                        lineItem.WORK_POOL = "'" + lineItem.WORK_POOL;
                    }

                }
                foreach (var lineItem in headerExcel.ovrhdOffsetExcelList)
                {
                    if (lineItem.HOME_LOC == "01" || lineItem.HOME_LOC == "02")
                    {
                        lineItem.HOME_LOC = "'" + lineItem.HOME_LOC;
                    }
                    if (lineItem.HOME_POOL == "01" || lineItem.HOME_POOL == "02")
                    {
                        lineItem.HOME_POOL = "'" + lineItem.HOME_POOL;
                    }
                    if (lineItem.LABOR_RATE_CD == "01" || lineItem.LABOR_RATE_CD == "02")
                    {
                        lineItem.LABOR_RATE_CD = "'" + lineItem.LABOR_RATE_CD;
                    }
                    if (lineItem.WORK_LOC == "01" || lineItem.WORK_LOC == "02")
                    {
                        lineItem.WORK_LOC = "'" + lineItem.WORK_LOC;
                    }
                    if (lineItem.WORK_POOL == "01" || lineItem.WORK_POOL == "02")
                    {
                        lineItem.WORK_POOL = "'" + lineItem.WORK_POOL;
                    }

                }



                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.selectionbutRatesListWhenButtonPressed() : " + mctrCreateForm);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.selectionbutRatesListWhenButtonPressed" + e.Message);
                throw;
            }
        }

        public IEnumerable<MctrCreateForm> mctrLineItemPostUpdate(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            try
            {

                var response = mctrCreateFormRepository.mctrLineItemPostUpdate(mctrCreateForm);

                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured : " + ex);
                // throw;
                return mctrCreateForm;
            }
        }
        public IEnumerable<MctrCreateForm> mctrLineItemPostDelete(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            try
            {

                var response = mctrCreateFormRepository.mctrLineItemPostDelete(mctrCreateForm);

                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured : " + ex);
                throw;
            }
        }
        public IEnumerable<MctrCreateForm> mctrLineItemPreUpdate(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            try
            {

                var response = mctrCreateFormRepository.mctrLineItemPreUpdate(mctrCreateForm);

                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured : " + ex);
                throw;
            }
        }
        public IEnumerable<MctrCreateForm> mctrLineItemPostInsert(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            try
            {

                var response = mctrCreateFormRepository.mctrLineItemPostInsert(mctrCreateForm);

                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured : " + ex);
                // throw;
                return mctrCreateForm;

            }
            
        }
        public IEnumerable<MctrCreateForm> mctrLineItemPreInsert(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            try
            {

                var response = mctrCreateFormRepository.mctrLineItemPreInsert(mctrCreateForm);

                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured : " + ex);
                throw;
            }
        }


        public IEnumerable<MctrCreateForm> mctrLineItemPostQuery(IEnumerable<MctrCreateForm> mctrCreateForm)
        {
            try
            {

                var response = mctrCreateFormRepository.mctrLineItemPostQuery(mctrCreateForm);

                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception occured : " + ex);
                throw;
            }
        }

        public IEnumerable<MctrCreateForm> pycystatuscheckbubut(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var response = mctrCreateFormRepository.pycystatuscheckbubut(mctrCreateForm);
            return response;

        }

        public IEnumerable<MctrCreateForm> fyearperiodvalidation(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var response = mctrCreateFormRepository.fyearperiodvalidation(mctrCreateForm);
            return response;

        }

        public IEnumerable<MctrCreateForm> validApprover(IEnumerable<MctrCreateForm> mctrCreateForm)
        {


            var response = mctrCreateFormRepository.validApprover(mctrCreateForm);
            return response;

        }
        public IEnumerable<MctrCreateForm> mctrHeaderPreUpdate(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrHeaderPreUpdate(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemaffiliateFromPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemaffiliateFromPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }
        public IEnumerable<MctrCreateForm> mctrLineItemClassCditemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemClassCditemOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemhomeLocFromPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemhomeLocFromPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemwpdFromPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemwpdFromPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }
        public IEnumerable<MctrCreateForm> mctrLineItemhomeDeptFromPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemhomeDeptFromPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }
        public IEnumerable<MctrCreateForm> mctrLineItemrscFromPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemrscFromPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemworkLocFromPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemworkLocFromPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItemworkDeptFromPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemworkDeptFromPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }
        public IEnumerable<BuProfile> mctrLineItembulkFromPostTextItemOpenLOVBulkFlag(IEnumerable<BuProfile> BuProfile)
        {

            var result = mctrCreateFormRepository.mctrLineItembulkFromPostTextItemOpenLOVBulkFlag(BuProfile);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItembulkFromPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItembulkFromPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItembutBulkWhenButtonPressedOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItembutBulkWhenButtonPressedOpenLOV(mctrCreateForm);
            return result;
        }
        
              public IEnumerable<MctrCreateForm> batchModeCheck(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.batchModeCheck(mctrCreateForm);
            return result;
        }
        public IEnumerable<MctrCreateForm> mctrLineItembutWpdWhenButtonPressedOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItembutWpdWhenButtonPressedOpenLOV(mctrCreateForm);
            return result;
        }
        public IEnumerable<MctrCreateForm> mctrLineItemamountfromPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItemamountfromPostTextItemOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrHeaderbutBuWhenButtonPressedOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrHeaderbutBuWhenButtonPressedOpenLOV(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> buButPressPTTValidation(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.buButPressPTTValidation(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrHeaderbutFiscalYearWhenButtonPressedOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrHeaderbutFiscalYearWhenButtonPressedOpenLOV(mctrCreateForm);
            return result;
        }

        //public IEnumerable<MctrCreateForm> mctrLineItembulkFromPostTextItemOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        //{
        //    ImctrCreateFormRepository mctrCreateFormRepository = new mctrCreateFormRepository();
        //    var result = mctrCreateFormRepository.mctrLineItembulkFromPostTextItemOpenLOV(mctrCreateForm);
        //    return result;
        //}

        public IEnumerable<MctrCreateForm> manRatedFlag(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.manRatedFlag(mctrCreateForm);
            return result;
        }
        public IEnumerable<MctrLineItem> overheadOnLoad(IEnumerable<MctrLineItem> mctrLineItem)
        {

            var result = mctrCreateFormRepository.overheadOnLoad(mctrLineItem);
            return result;
        }

        public IEnumerable<MctrLineItem> mctrLineItembutTransFromWhenButtonPressedOpenLOV(IEnumerable<MctrLineItem> mctrLineItem)
        {

            var result = mctrCreateFormRepository.mctrLineItembutTransFromWhenButtonPressedOpenLOV(mctrLineItem);
            return result;
        }

        public IEnumerable<MctrCreateForm> ValidateActivityID(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.ValidateActivityID(mctrCreateForm);
            return result;
        }

        public IEnumerable<MctrCreateForm> mctrLineItembutProjToWhenButtonPressedOpenLOV(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.mctrLineItembutProjToWhenButtonPressedOpenLOV(mctrCreateForm);
            return result;
        }
        public IEnumerable<MctrCreateForm> querymodecheck(IEnumerable<MctrCreateForm> mctrCreateForm)
        {

            var result = mctrCreateFormRepository.querymodecheck(mctrCreateForm);
            return result;
        }
    }
}