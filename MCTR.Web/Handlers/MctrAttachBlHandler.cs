///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///
 
///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using System.Threading.Tasks;
using System.Web.Mvc;
using System.Net.Http;
using System.Net.Http.Headers;

using log4net;

using MCTR.DomainEntity;

namespace MCTR.Web.Handlers
{
///*********************************************************************
///<summary>
///MctrAttachBlHandler provides a level of abstraction for consuming the REST api.
///</summary>
  public class MctrAttachBlHandler
  {
     private readonly ILog logger;
    
    public MctrAttachBlHandler()
    {
      logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
    }


        ///*************************************************************
        ///<summary>
        ///Method Name : summaryattachCloseButtonWhenButtonPressed
        ///</summary>
        ///<param name = "MctrAttachBl"></param>
        ///<returns>IEnumerable<MctrAttachBl> </returns>

        public IEnumerable<MctrAttachBl> summaryattachCloseButtonWhenButtonPressed(MctrAttachBl mctrAttachBl)
        {
            if (mctrAttachBl != null)
            {
                logger.Debug("Executing summaryattachCloseButtonWhenButtonPressed rest service handler.");
                string restApiPath = "MctrAttachBlService/summaryattachCloseButtonWhenButtonPressed";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrAttachBl);
                var response = HandlerUtil<MctrAttachBl>.RestPostProcessor(restApiPath, mctrAttachBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            else
            {
                logger.Info("The passed parameter mctrAttachBl is NULL.");
                return null;
            }
        }

    ///*************************************************************
    ///<summary>
    ///Method Name : mctrAttachMctrAttachOnLoad
    ///</summary>
    ///<param name = "MctrAttachBl"></param>
    ///<returns>IEnumerable<MctrAttachBl> </returns>

        public IEnumerable<MctrAttachBl> mctrAttachMctrAttachOnLoad(MctrAttachBl mctrAttachBl) {
            if (mctrAttachBl != null) {
                logger.Debug("Executing mctrAttachMctrAttachOnLoad rest service handler.");
                string restApiPath = "MctrAttachBlService/mctrAttachMctrAttachOnLoad";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrAttachBl);
                var response = HandlerUtil<MctrAttachBl>.RestPostProcessor(restApiPath, mctrAttachBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            } else {
                logger.Info("The passed parameter mctrAttachBl is NULL.");
                return null;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrAttachattachDescrOnError
        ///</summary>
        ///<param name = "MctrAttachBl"></param>
        ///<returns>IEnumerable<MctrAttachBl> </returns>

        public IEnumerable<MctrAttachBl> mctrAttachattachDescrOnError(MctrAttachBl mctrAttachBl) {
            if (mctrAttachBl != null) {
                logger.Debug("Executing mctrAttachattachDescrOnError rest service handler.");
                string restApiPath = "MctrAttachBlService/mctrAttachattachDescrOnError";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrAttachBl);
                var response = HandlerUtil<MctrAttachBl>.RestPostProcessor(restApiPath, mctrAttachBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            } else {
                logger.Info("The passed parameter mctrAttachBl is NULL.");
                return null;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrAttachattachInsertFileWhenButtonPressed
        ///</summary>
        ///<param name = "MctrAttachBl"></param>
        ///<returns>IEnumerable<MctrAttachBl> </returns>

        public IEnumerable<MctrAttachBl> mctrAttachattachInsertFileWhenButtonPressed(MctrAttachBl mctrAttachBl) {
            if (mctrAttachBl != null) {
                logger.Debug("Executing mctrAttachattachInsertFileWhenButtonPressed rest service handler.");
                string restApiPath = "MctrAttachBlService/mctrAttachattachInsertFileWhenButtonPressed";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrAttachBl);
                var response = HandlerUtil<MctrAttachBl>.RestPostProcessor(restApiPath, mctrAttachBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            } else {
                logger.Info("The passed parameter mctrAttachBl is NULL.");
                return null;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrAttachattachViewFileWhenButtonPressed
        ///</summary>
        ///<param name = "MctrAttachBl"></param>
        ///<returns>IEnumerable<MctrAttachBl> </returns>

        public MctrAttachBl mctrAttachattachViewFileWhenButtonPressed(MctrAttachBl mctrAttachBl) {
            if (mctrAttachBl != null) {
                logger.Debug("Executing mctrAttachattachViewFileWhenButtonPressed rest service handler.");
                string restApiPath = "MctrAttachBlService/mctrAttachattachViewFileWhenButtonPressed";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrAttachBl);
                var response = HandlerUtil<MctrAttachBl>.RestFilePostProcessor(restApiPath, mctrAttachBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                mctrAttachBl.ATTACH_BLOB = response;
                return mctrAttachBl;
            } else {
                logger.Info("The passed parameter mctrAttachBl is NULL.");
                return null;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrAttachPreInsert
        ///</summary>
        ///<param name = "MctrAttachBl"></param>
        ///<returns>IEnumerable<MctrAttachBl> </returns>

        public IEnumerable<MctrAttachBl> mctrAttachPreInsert(MctrAttachBl mctrAttachBl) {
            if (mctrAttachBl != null) {
                logger.Debug("Executing mctrAttachPreInsert rest service handler.");
                string restApiPath = "MctrAttachBlService/mctrAttachPreInsert";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrAttachBl);
                var response = HandlerUtil<MctrAttachBl>.RestPostProcessor(restApiPath, mctrAttachBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            } else {
                logger.Info("The passed parameter mctrAttachBl is NULL.");
                return null;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutildummyWhenButtonPressed
        ///</summary>
        ///<param name = "MctrAttachBl"></param>
        ///<returns>IEnumerable<MctrAttachBl> </returns>

        public IEnumerable<MctrAttachBl> webutildummyWhenButtonPressed(MctrAttachBl mctrAttachBl) {
            if (mctrAttachBl != null) {
                logger.Debug("Executing webutildummyWhenButtonPressed rest service handler.");
                string restApiPath = "MctrAttachBlService/webutildummyWhenButtonPressed";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrAttachBl);
                var response = HandlerUtil<MctrAttachBl>.RestPostProcessor(restApiPath, mctrAttachBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            } else {
                logger.Info("The passed parameter mctrAttachBl is NULL.");
                return null;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrAttachBlWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrAttachBl"></param>
        ///<returns>IEnumerable<MctrAttachBl> </returns>

        public IEnumerable<MctrAttachBl> mctrAttachBlWhenNewFormInstance(MctrAttachBl mctrAttachBl) {
            if (mctrAttachBl != null) {
                logger.Debug("Executing mctrAttachBlWhenNewFormInstance rest service handler.");
                string restApiPath = "MctrAttachBlService/mctrAttachBlWhenNewFormInstance";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrAttachBl);
                var response = HandlerUtil<MctrAttachBl>.RestPostProcessor(restApiPath, mctrAttachBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            } else {
                logger.Info("The passed parameter mctrAttachBl is NULL.");
                return null;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrAttachBlInsert
        ///</summary>
        ///<param name = "MctrAttachBl"></param>
        ///<returns>IEnumerable<MctrAttachBl> </returns>

        public IEnumerable<MctrAttachBl> mctrAttachBlInsert(MctrAttachBl mctrAttachBl)
        {
            if (mctrAttachBl != null)
            {
                logger.Debug("Executing mctrAttachBlInsert rest service handler.");
                string restApiPath = "MctrAttachBlService/mctrAttachBlInsert";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrAttachBl);
                var response = HandlerUtil<MctrAttachBl>.RestPostProcessor(restApiPath, mctrAttachBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            else
            {
                logger.Info("The passed parameter mctrAttachBl is NULL.");
                return null;
            }

        }

    }

}

