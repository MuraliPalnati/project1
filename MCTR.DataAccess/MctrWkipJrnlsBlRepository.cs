///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using System.Data;
using log4net;
using Oracle.ManagedDataAccess.Client;

using MCTR.DomainEntity;

using MCTR.DataAccessInterface;
using MCTR.DataEntity;

namespace MCTR.DataAccess
{
    ///*********************************************************************
    ///<summary>
    ///MctrWkipJrnlsBlRepository is a data access implementation which holds all 
    ///the data access logic in it.
    ///</summary>
    public class MctrWkipJrnlsBlRepository : BaseRepository, IMctrWkipJrnlsBlRepository
    {

        private readonly ILog logger = null;

        public MctrWkipJrnlsBlRepository()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekJrnlWeekOnLoad
        ///</summary>
        ///<param name = "MctrWkipJrnlsBl"></param>
        ///<returns>IEnumerable<MctrWkipJrnlsBl> </returns>


        public IEnumerable<MctrWkipJrnlsBl> jrnlWeekJrnlWeekOnLoad(IEnumerable<MctrWkipJrnlsBl> mctrWkipJrnlsBl)
        {
            try
            {

                logger.Debug("Executing mctrWkipJrnlsBlWhenNewFormInstance with input : " + mctrWkipJrnlsBl);
                IEnumerable<MCTR_JOURNAL> retrievedJrnls = new List<MCTR_JOURNAL>();
                MctrWkipJrnlsBl mctrjournalObj = mctrWkipJrnlsBl.First();
                //mctrjournalObj.MCTR_NO = 55905;
                List<OracleParameter> paramters = new List<OracleParameter>();
                OracleParameter[] parameter1 = new OracleParameter[1];
                parameter1[0] = new OracleParameter(":0", OracleDbType.Int32, mctrjournalObj.MCTR_NO, ParameterDirection.Input);
                var resultlist = entities.MCTR_JOURNAL.SqlQuery("select * from mctr_journal where mctr_no = :0 order by mctr_no, line_no, from_to, line_no_oh", parameter1).ToList<MCTR_JOURNAL>();
                var targetJrnl = Mapper.DynamicMap<IEnumerable<MCTR_JOURNAL>, IEnumerable<MctrWkipJrnlsBl>>(resultlist);
                return targetJrnl;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.MctrWkipJrnlsBlRepository.jrnlWeekJrnlWeekOnLoad():" + e.Message);
                throw;
            }


        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrWkipJrnlsBlWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrWkipJrnlsBl"></param>
        ///<returns>IEnumerable<MctrWkipJrnlsBl> </returns>


        public IEnumerable<MctrWkipJrnlsBl> mctrWkipJrnlsBlWhenNewFormInstance(IEnumerable<MctrWkipJrnlsBl> mctrWkipJrnlsBl)
        {
            try
            {
                OracleParameter[] parameters = new OracleParameter[10];
                logger.Debug("Executing mctrWkipJrnlsBlWhenNewFormInstance with input : " + mctrWkipJrnlsBl);
                //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.MctrWkipJrnlsBlRepository.mctrWkipJrnlsBlWhenNewFormInstance():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrWkipJrnlsBlWhenWindowClosed
        ///</summary>
        ///<param name = "MctrWkipJrnlsBl"></param>
        ///<returns>IEnumerable<MctrWkipJrnlsBl> </returns>

        public IEnumerable<MctrWkipJrnlsBl> mctrWkipJrnlsBlWhenWindowClosed(IEnumerable<MctrWkipJrnlsBl> mctrWkipJrnlsBl)
        {
            try
            {
                OracleParameter[] parameters = new OracleParameter[10];
                logger.Debug("Executing mctrWkipJrnlsBlWhenWindowClosed with input : " + mctrWkipJrnlsBl);
                //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.MctrWkipJrnlsBlRepository.mctrWkipJrnlsBlWhenWindowClosed():" + e.Message);
                throw;
            }
        }


    }

}

