///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using log4net;
using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System;
using System.Collections.Generic;
using System.Web.Mvc;
using MCTR.Web.Security;


namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///MctrLogAcctController is a web controller implementation for the 
    ///MctrLogAcct screen.
    ///</summary>
    ///
    [CustomAuthorize]
    public class MctrLogAcctController : Controller
    {
         private readonly ILog logger;



        public MctrLogAcctController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }

        public ActionResult mctrAcctReassignmentonLoad() {
            List<MctrLogAcct> list = new List<MctrLogAcct>();
            MctrLogAcct obj = new MctrLogAcct() {  Bems_Acct = "",  Bems_Acct_New = "",  Status_Id = "" };
            list.Add(obj);
            return View(list);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrHeaderMctrHeaderOnLoad
        ///</summary>
        ///<param name = "MctrLogAcct"></param>
        ///<returns>IEnumerable<MctrLogAcct> </returns>

        [HttpPost]
        public JsonResult Postjson(MctrLogAcct mctrLogAcct)
            {
            try
            {
                List<MctrLogAcct> mctrLogacctList = new List<MctrLogAcct>();
                logger.Info("Executing mctrHeaderMctrHeaderOnLoad() : " + mctrLogAcct);
                mctrLogAcct.Bems_Admin = SessionPerister.BEMSID;
                MctrLogAcctHandler mctrLogAcctHandler = new MctrLogAcctHandler();
                logger.Debug("Executing mctrLogAcctHandler.mctrHeaderMctrHeaderOnLoad().");
                var mctrLogAcctResp = mctrLogAcctHandler.mctrHeaderMctrHeaderOnLoad(mctrLogAcct);
                logger.Info("Response Received : " + mctrLogacctList);
                return Json(mctrLogAcctResp, JsonRequestBehavior.AllowGet);
            }
                
         
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Controllers.MctrLogAcctController.mctrHeaderMctrHeaderOnLoad :" + e.Message);
                return Json(mctrLogAcct, JsonRequestBehavior.AllowGet);
            }
        }

       [HttpPost]
        public JsonResult validBemsjson(MctrLogAcct mctrLogAcct)
        {
            try
            {
                List<MctrLogAcct> mctrLogacctList = new List<MctrLogAcct>();
                logger.Info("Executing mctrHeaderMctrHeaderOnLoad() : " + mctrLogAcct);
                MctrLogAcctHandler mctrLogAcctHandler = new MctrLogAcctHandler();
                logger.Debug("Executing mctrLogAcctHandler.mctrHeaderMctrHeaderOnLoad().");
                var mctrLogAcctResp = mctrLogAcctHandler.validateBems(mctrLogAcct);
                logger.Info("Response Received : " + mctrLogacctList);
                return Json(mctrLogAcctResp, JsonRequestBehavior.AllowGet);
            }


            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Controllers.MctrLogAcctController.mctrHeaderMctrHeaderOnLoad :" + e.Message);
                throw e;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogMctrLogOnLoad
        ///</summary>
        ///<param name = "MctrLogAcct"></param>
        ///<returns>IEnumerable<MctrLogAcct> </returns>

        [HttpPost]

        public ActionResult mctrLogMctrLogOnLoad(MctrLogAcct mctrLogAcct)
        {
            try
            {
                logger.Info("Executing mctrLogMctrLogOnLoad() : " + mctrLogAcct);
                if (mctrLogAcct != null)
                {
                    MctrLogAcctHandler mctrLogAcctHandler = new MctrLogAcctHandler();
                    logger.Debug("Executing mctrLogAcctHandler.mctrLogMctrLogOnLoad().");
                    var mctrLogAcctResp = mctrLogAcctHandler.mctrLogMctrLogOnLoad(mctrLogAcct);
                    logger.Info("Response Received : " + mctrLogAcctResp);
                    return View("MctrLogAcct", mctrLogAcctResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }

            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Controllers.MctrLogAcctController.mctrHeaderMctrHeaderOnLoad :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogOnInsert
        ///</summary>
        ///<param name = "MctrLogAcct"></param>
        ///<returns>IEnumerable<MctrLogAcct> </returns>

        [HttpPost]
        public JsonResult mctrLogOnInsert(MctrLogAcct mctrLogAcct)
        {
            try
            {
                logger.Info("Executing mctrLogOnInsert() : " + mctrLogAcct);
                if (mctrLogAcct != null)
                {
                    MctrLogAcctHandler mctrLogAcctHandler = new MctrLogAcctHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.MctrLogAcctController.mctrLogOnInsert().");
                    var mctrLogAcctResp = mctrLogAcctHandler.mctrLogOnInsert(mctrLogAcct);
                    logger.Info("Response Received MCTR.Web.Controllers.MctrLogAcctController.mctrLogOnInsert : " + mctrLogAcctResp);
                    return Json(mctrLogAcctResp, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Controllers.MctrLogAcctController.mctrLogOnInsert :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogWhenNewRecordInstance
        ///</summary>
        ///<param name = "MctrLogAcct"></param>
        ///<returns>IEnumerable<MctrLogAcct> </returns>

        [HttpPost]
        public ActionResult mctrLogWhenNewRecordInstance(MctrLogAcct mctrLogAcct)
        {
            try
            {
                logger.Info("Executing mctrLogWhenNewRecordInstance() : " + mctrLogAcct);
                if (mctrLogAcct != null)
                {
                    mctrLogAcct.Bems_Admin = SessionPerister.BEMSID;
                    MctrLogAcctHandler mctrLogAcctHandler = new MctrLogAcctHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.MctrLogAcctController.mctrLogWhenNewRecordInstance().");
                    var mctrLogAcctResp = mctrLogAcctHandler.mctrLogWhenNewRecordInstance(mctrLogAcct);
                    logger.Info("Response Received MCTR.Web.Controllers.MctrLogAcctController.mctrLogWhenNewRecordInstance : " + mctrLogAcctResp);
                    return View("MctrLogAcct", mctrLogAcctResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Controllers.MctrLogAcctController.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogAcctWhenWindowClosed
        ///</summary>
        ///<param name = "MctrLogAcct"></param>
        ///<returns>IEnumerable<MctrLogAcct> </returns>

        [HttpPost]
        public ActionResult mctrLogAcctWhenWindowClosed(MctrLogAcct mctrLogAcct)
        {
            try
            {
                logger.Info("Executing mctrLogAcctWhenWindowClosed() : " + mctrLogAcct);
                if (mctrLogAcct != null)
                {
                    MctrLogAcctHandler mctrLogAcctHandler = new MctrLogAcctHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.MctrLogAcctController.mctrLogAcctWhenWindowClosed().");
                    var mctrLogAcctResp = mctrLogAcctHandler.mctrLogAcctWhenWindowClosed(mctrLogAcct);
                    logger.Info("Response Received MCTR.Web.Controllers.MctrLogAcctController.mctrLogAcctWhenWindowClosed : " + mctrLogAcctResp);
                    return View("MctrLogAcct", mctrLogAcctResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Controllers.MctrLogAcctController.mctrLogAcctWhenWindowClosed :" + e.Message);
                throw;
            }
        }
    }
}
