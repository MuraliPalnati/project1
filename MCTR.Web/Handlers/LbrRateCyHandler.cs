///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///  Copyright © 2016 Boeing. All rights reserved.
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///
///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using log4net;
using MCTR.DomainEntity;
using System;
using System.Collections.Generic;

namespace MCTR.Web.Handlers
{
    ///*********************************************************************
    ///<summary>
    ///LbrRateCyHandler provides a level of abstraction for consuming the REST api.
    ///</summary>
    public class LbrRateCyHandler
    {
         private readonly ILog logger;
        public LbrRateCyHandler()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesMctrIncrRatesOnLoad
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<LbrRateCy> LbrRateOnLoad(LbrRateCy lbrRateCy)
        {

            logger.Debug("Executing mctrIncrRatesMctrIncrRatesOnLoad rest service handler.");
            string restApiPath = "LbrRateCyService/LbrRateOnLoad";
            logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + lbrRateCy);
            var response = HandlerUtil<LbrRateCy>.RestPostProcessor(restApiPath, lbrRateCy);
            logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
            return response;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : Get
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<LbrRate></returns>
        public IEnumerable<LbrRate> Get()
        {
            try
            {
                logger.Debug("Executing MCTR.Web.Handlers.LbrRateHandler.Get rest service handler");
                string restApiPath = "LbrRateCyService/Get";
                logger.Info("Invoking Rest API : " + restApiPath);
                var response = HandlerUtil<LbrRate>.RestGetProcessor(restApiPath);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error fromMCTR.Web.Handlers.LbrRateHandler.Get rest service handler " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : lbrRateCyWhenNewFormInstance
        ///</summary>
        ///<param name = "LbrRateCy"></param>
        ///<returns>IEnumerable<LbrRateCy> </returns>
        public IEnumerable<LbrRateCy> lbrRateCyWhenNewFormInstance(string lbrRateCy)
        {
            try
            {
                logger.Debug("Executing MCTR.Web.Handlers.LbrRateCyHandler.lbrRateCyWhenNewFormInstance rest service handler.");
                string restApiPath = "LbrRateCy/lbrRateCyWhenNewFormInstance";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + lbrRateCy);
                var response = HandlerUtil<LbrRateCy>.RestgetProcessor(restApiPath, lbrRateCy);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Handlers.LbrRateCyHandler.lbrRateCyWhenNewFormInstance rest service handler." + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : lbrRateCyWhenWindowClosed
        ///</summary>
        ///<param name = "LbrRateCy"></param>
        ///<returns>IEnumerable<LbrRateCy> </returns>
        public IEnumerable<LbrRateCy> lbrRateCyWhenWindowClosed(string lbrRateCy)
        {
            try
            {
                logger.Debug("Executing MCTR.Web.Handlers.LbrRateCyHandler.lbrRateCyWhenWindowClosed rest service handler.");
                string restApiPath = "LbrRateCy/lbrRateCyWhenWindowClosed";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + lbrRateCy);
                var response = HandlerUtil<LbrRateCy>.RestgetProcessor(restApiPath, lbrRateCy);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Handlers.LbrRateCyHandler.lbrRateCyWhenWindowClosed rest service handler." + e.Message);
                throw;

            }
        }
    }
}