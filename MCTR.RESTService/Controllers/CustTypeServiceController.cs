///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using log4net;
using MCTR.BusinessInterface;
using MCTR.Business;
using MCTR.DomainEntity;

namespace MCTR.RESTService.Controllers
{
    public class CustTypeServiceController : ApiController
    {

         private readonly ILog logger;

        public CustTypeServiceController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : custTypeWhenNewFormInstance
        ///</summary>
        ///<param name = "custType"></param>
        ///<returns>IEnumerable<custType> </returns>
        [HttpPost]
        [ActionName("custTypeWhenNewFormInstance")]
        public HttpResponseMessage custTypeWhenNewFormInstance([FromBody]IEnumerable<CustType> custType)
        {
            logger.Info("Executing Rest API : custTypeWhenNewFormInstance() with request : " + custType);
            if (custType != null)
            {
                ICustTypeBusiness custTypeBusiness = new CustTypeBusiness();
                var response = custTypeBusiness.custTypeWhenNewFormInstance(custType);
                logger.Info("Response received from custTypeBusiness.custTypeWhenNewFormInstance() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            return null;
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : custTypeWhenWindowClosed
        ///</summary>
        ///<param name = "custType"></param>
        ///<returns>IEnumerable<custType> </returns>

        [HttpPost]
        [ActionName("custTypeWhenWindowClosed")]
        public HttpResponseMessage custTypeWhenWindowClosed([FromBody]IEnumerable<CustType> custType)
        {
            logger.Info("Executing Rest API : custTypeWhenWindowClosed() with request : " + custType);
            if (custType != null)
            {
                ICustTypeBusiness custTypeBusiness = new CustTypeBusiness();
                var response = custTypeBusiness.custTypeWhenWindowClosed(custType);
                logger.Info("Response received from custTypeBusiness.custTypeWhenWindowClosed() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            return null;
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : custtypeGetAll
        ///</summary>
        
        [HttpGet]
        [ActionName("custtypeGetAll")]
        public HttpResponseMessage custtypeGetAll()
        {

            ICustTypeBusiness custTypeBusiness = new CustTypeBusiness();
            var response = custTypeBusiness.custtypeGetAll();
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : EditCustType
        ///</summary>
        ///<param name = "custType"></param>
        ///<returns>IEnumerable<custType> </returns>
        [HttpPost]
        [ActionName("EditCustType")]
        public HttpResponseMessage EditCustType([FromBody]IEnumerable<CustType> custType)
        {
            logger.Info("Executing Rest API : EditCustType() with request : " + custType);
            if (custType != null)
            {
                ICustTypeBusiness custTypeBusiness = new CustTypeBusiness();
                var response = custTypeBusiness.EditCustType(custType);
                logger.Info("Response received from custTypeBusiness.EditCustType() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            return null;
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : DeleteCustType
        ///</summary>
        ///<param name = "custType"></param>
        ///<returns>IEnumerable<custType> </returns>
        [HttpPost]
        [ActionName("DeleteCustType")]
        public HttpResponseMessage DeleteCustType([FromBody]IEnumerable<CustType> custType)
        {
            logger.Info("Executing Rest API : DeleteCustType() with request : " + custType);
            if (custType != null)
            {
                ICustTypeBusiness custTypeBusiness = new CustTypeBusiness();
                var response = custTypeBusiness.DeleteCustType(custType);
                logger.Info("Response received from custTypeBusiness.DeleteCustType() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            return null;
        }

    }
}

