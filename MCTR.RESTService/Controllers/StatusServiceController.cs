///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History : 

using log4net;
using MCTR.Business;
using MCTR.BusinessInterface;
using MCTR.DomainEntity;
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace MCTR.RESTServices.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///StatusServiceController is a Rest controller implementation  
    ///which acts as a wrapper to the StatusBusiness implementation and
    /// provides api path for each methods exposed.
    ///</summary>
    public class StatusServiceController : ApiController
    {
         private readonly ILog logger;
        public StatusServiceController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : statusWhenNewFormInstance
        ///</summary>
        ///<returns>HttpResponseMessage</returns>
        [HttpGet]
        [ActionName("statusWhenNewFormInstance")]
        public HttpResponseMessage statusWhenNewFormInstance()
        {
            try
            {
                IStatusBusiness StatusBusiness = new StatusBusiness();
                logger.Info("Executing statusBusiness.statusWhenNewFormInstance()");
                var response = StatusBusiness.statusWhenNewFormInstance();
                logger.Info("Response received from statusBusiness.statusWhenNewFormInstance() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : PostStatusDirect
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>HttpResponseMessage</returns>
        [HttpPost]
        [ActionName("CreateStatus")]
        public HttpResponseMessage PostStatusDirect([FromBody]IEnumerable<Status> Status)
        {
            try
            {
                IStatusBusiness StatusBusiness = new StatusBusiness();
                logger.Info("Executing statusBusiness.PostStatusDirect()");
                var response = StatusBusiness.CreateStatus(Status);
                logger.Info("Response received from statusBusiness.PostStatusDirect() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : PostStatusDelete
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>HttpResponseMessage</returns>
        [HttpPost]
        [ActionName("DeleteStatus")]
        public HttpResponseMessage PostStatusDelete([FromBody]IEnumerable<Status> Status)
        {
            try
            {
                IStatusBusiness StatusBusiness = new StatusBusiness();
                logger.Info("Executing statusBusiness.PostStatusDelete()");
                var response = StatusBusiness.DeleteStatus(Status);
                logger.Info("Response received from statusBusiness.PostStatusDelete() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : PostStatusEdit
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>HttpResponseMessage</returns>
        [HttpPost]
        [ActionName("EditStatus")]
        public HttpResponseMessage PostStatusEdit([FromBody]IEnumerable<Status> Status)
        {
            try
            {
                IStatusBusiness StatusBusiness = new StatusBusiness();
                logger.Info("Executing statusBusiness.PostStatusEdit()");
                var response = StatusBusiness.EditStatus(Status);
                logger.Info("Response received from statusBusiness.PostStatusEdit() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }
    }
}


