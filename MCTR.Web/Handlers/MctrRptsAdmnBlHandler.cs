///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;

namespace MCTR.Web.Handlers
{
    ///*********************************************************************
    ///<summary>
    ///MctrRptsAdmnBlHandler provides a level of abstraction for consuming the REST api.
    ///</summary>
    public class MctrRptsAdmnBlHandler
    {
         private readonly ILog logger;

        public MctrRptsAdmnBlHandler()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBuLOV()
        ///</summary>
        ///<param name = "MctrRptsAdmnBl"></param>
        ///<returns>IEnumerable<MctrRptsAdmnBl> </returns>

        public IEnumerable<MctrRptsAdmnBl> getRgBuLOV(MctrRptsAdmnBl mctrRptsAdmnBl)
        {
            if (mctrRptsAdmnBl != null)
            {
                logger.Debug("Executing getRgBuLOV rest service handler.");
                string restApiPath = "MctrRptsAdmnBlService/getRgBuLOV";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrRptsAdmnBl);
                var response = HandlerUtil<MctrRptsAdmnBl>.RestPostProcessor(restApiPath, mctrRptsAdmnBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            else
            {
                logger.Info("The passed parameter mctrRptsAdmnBl is NULL.");
                return null;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : getRgToDateLOV()
        ///</summary>
        ///<param name = "MctrRptsAdmnBl"></param>
        ///<returns>IEnumerable<MctrRptsAdmnBl> </returns>

        ///*************************************************************
        ///<summary>
        ///Method Name : selectionbutToDateWhenButtonPressedOpenLOV()
        ///</summary>
        ///<param name = "MctrRptsAdmnBl"></param>
        ///<returns>IEnumerable<MctrRptsAdmnBl> </returns>

        public IEnumerable<WeeklyJournalDates> selectionbutToDateWhenButtonPressedOpenLOV()
        {
                logger.Debug("Executing selectionbutToDateWhenButtonPressedOpenLOV() rest service handler.");
                string restApiPath = "MctrRptsAdmnBlService/selectionbutToDateWhenButtonPressedOpenLOV";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " );
                var response = HandlerUtil<WeeklyJournalDates>.RestGetProcessor(restApiPath);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
        }
        }

    }

