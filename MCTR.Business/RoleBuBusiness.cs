///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///
///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using log4net;
using MCTR.BusinessInterface;
using MCTR.DataAccess;
using MCTR.DataAccessInterface;
using MCTR.DataEntity;
using MCTR.DomainEntity;
using System;
using System.Collections.Generic;
using System.Linq;

namespace MCTR.Business
{
    ///*********************************************************************
    ///<summary>
    ///RoleBuBusiness is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>
    public class RoleBuBusiness : BaseBusiness, IRoleBuBusiness
    {

        IEnumerable<RoleBu> responseList = new List<RoleBu>();
        RoleBu list = new RoleBu();
        IRoleBuRepository obj = new RoleBuRepository();
        private readonly ILog logger = null;
        public RoleBuBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        public void initialize()
        {
           
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : rolebuonload
        ///</summary>
        ///<param name = "roleBu"></param>
        ///<returns>IEnumerable<RoleBu></returns>
        public IEnumerable<RoleBu> rolebuonload(IEnumerable<RoleBu> roleBu)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleBuBusiness.rolebuonload() with input" + roleBu);
                IRoleBuRepository roleBuRepository = new RoleBuRepository();
                responseList = roleBuRepository.rolebuonload(roleBu);
                logger.Debug("Response received from MCTR.Business.RoleBuBusiness.rolebuonload() : " + responseList);
                return responseList;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleBuBusiness.rolebuonload():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleBuopenLOV
        ///</summary>
        ///<param name = "roleBu"></param>
        ///<returns>IEnumerable<RoleBu></returns>
        public IEnumerable<MctrBusUnit> roleBuopenLOV()
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleBuBusiness.roleBuopenLOV");
                IRoleBuRepository roleBuRepository = new RoleBuRepository();
                var response = roleBuRepository.roleBuopenLOV();
                logger.Debug("Response received from MCTR.Business.RoleBuBusiness.roleBuopenLOV" + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleBuBusiness.roleBuopenLOV():" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : roleBuPostQuery
        ///</summary>
        ///<param name = "roleBu"></param>
        ///<returns>IEnumerable<RoleBu></returns>
        public IEnumerable<RoleBu> roleBuPostQuery(IEnumerable<RoleBu> roleBu)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleBuBusiness.roleBuPostQuery() with input" + roleBu);
                IRoleBuRepository roleBuRepository = new RoleBuRepository();
                var response = roleBuRepository.roleBuopenLOV();
                logger.Debug("Response received from MCTR.Business.RoleBuBusiness.roleBuPostQuery() : " + response);
                list = responseList.First<RoleBu>();

                if (list.MCTR_ROLE.ADMIN_ROLE == "Y")
                {
                    return null;
                }
                else
                {
                    string message = "must have administrator role to change grp/bu authorization.";
                    throw new Exception(message);
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleBuBusiness.roleBuPostQuery():" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : roleBuPreRecord
        ///</summary>
        ///<param name = "roleBu"></param>
        ///<returns>IEnumerable<RoleBu></returns>
        public IEnumerable<RoleBu> roleBuPreRecord(IEnumerable<RoleBu> roleBu)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleBuBusiness.roleBuPreRecord() with input" + roleBu);
                IRoleBuRepository roleBuRepository = new RoleBuRepository();
                var response = roleBuRepository.roleBuPreRecord(roleBu);
                logger.Debug("Response received from MCTR.Business.RoleBuBusiness.roleBuPreRecord() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleBuBusiness.roleBuPreRecord():" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : roleBuPostDelete
        ///</summary>
        ///<param name = "roleBu"></param>
        ///<returns>IEnumerable<RoleBu></returns>
        public IEnumerable<RoleBu> roleBuPostDelete(IEnumerable<RoleBu> roleBu)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleBuBusiness.roleBuPostDelete() with input" + roleBu);
                IRoleBuRepository roleBuRepository = new RoleBuRepository();
                var response = roleBuRepository.roleBuPostDelete(roleBu);
                logger.Debug("Response received from MCTR.Business.RoleBuBusiness.roleBuPostDelete() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleBuBusiness.roleBuPostDelete():" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : roleBuPostInsert
        ///</summary>
        ///<param name = "roleBu"></param>
        ///<returns>IEnumerable<RoleBu></returns>
        public IEnumerable<RoleBu> roleBuPostInsert(IEnumerable<RoleBu> roleBu)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleBuBusiness.roleBuPostInsert() with input" + roleBu);
                IRoleBuRepository roleBuRepository = new RoleBuRepository();
                var response = roleBuRepository.roleBuPostInsert(roleBu);
                logger.Debug("Response received from MCTR.Business.RoleBuBusiness.roleBuPostInsert() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleBuBusiness.roleBuPostInsert():" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : roleBuPostUpdate
        ///</summary>
        ///<param name = "roleBu"></param>
        ///<returns>IEnumerable<RoleBu></returns>
        public IEnumerable<RoleBu> roleBuPostUpdate(IEnumerable<RoleBu> roleBu)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleBuBusiness.roleBuWhenNewFormInstance() with input" + roleBu);
                IRoleBuRepository roleBuRepository = new RoleBuRepository();
                var response = roleBuRepository.roleBuPostUpdate(roleBu);
                logger.Debug("Response received from MCTR.Business.RoleBuBusiness.roleBuWhenNewFormInstance() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleBuBusiness.roleBuPostUpdate():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleBuWhenNewFormInstance
        ///</summary>
        ///<param name = "roleBu"></param>
        ///<returns>IEnumerable<RoleBu></returns>
        public IEnumerable<RoleBu> roleBuWhenNewFormInstance(IEnumerable<RoleBu> roleBu)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleBuBusiness.roleBuWhenNewFormInstance() with input" + roleBu);
                IRoleBuRepository roleBuRepository = new RoleBuRepository();
                var response = roleBuRepository.roleBuWhenNewFormInstance(roleBu);
                logger.Debug("Executing MCTR.Business.RoleBuBusiness.roleBuWhenNewFormInstance() with input" + roleBu);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleBuBusiness.roleBuWhenNewFormInstance():" + e.Message);
                throw;
            }
        }
    }
}