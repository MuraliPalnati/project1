///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History : 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using log4net;

using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.Business;
using System.Net.Http.Headers;
using System.IO;

namespace MCTR.RESTService.Controllers
{

    public class LbrRateServiceController : ApiController
    {

         private readonly ILog logger;

        public LbrRateServiceController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpGet]
        [ActionName("LbrRatesWhenNewFormInstance")]
        public HttpResponseMessage LbrRatesWhenNewFormInstance()
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.Controllers.MctrIncrRatesService.mctrIncrRatesWhenNewFormInstance()with request : ");
                ILbrRateBusiness mctrIncrRatesBusiness = new LbrRateBusiness();
                var response = mctrIncrRatesBusiness.LbrRatesWhenNewFormInstance();
                logger.Info("Response received from  MCTR.RESTService.Controllers.MctrIncrRatesService.mctrIncrRatesWhenNewFormInstance() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService.Controllers.MctrIncrRatesService.mctrIncrRatesWhenNewFormInstance()" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : PostStatusEdit
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>HttpResponseMessage</returns>
        [HttpPost]
        [ActionName("Edit")]
        public HttpResponseMessage PostStatusEdit([FromBody]IEnumerable<LabourRatePyEdit> lbrRate)
        {
            try
            {
                ILbrRateBusiness lbrRateBusiness = new LbrRateBusiness();
                logger.Info("Executing statusBusiness.PostStatusEdit()");
                var response = lbrRateBusiness.EditStatus(lbrRate);
                logger.Info("Response received from statusBusiness.PostStatusEdit() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : selectionfYearOnError
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>HttpResponseMessage</returns>
        /// 
        [HttpPost]
        [ActionName("selectionfYearOnError")]
        public HttpResponseMessage selectionfYearOnError([FromBody]IEnumerable<LbrRate> lbrRate)
        {
            try
            {
                if (lbrRate != null)
                {
                    logger.Info("Executing Rest API : MCTR.RESTService.LbrRateService.selectionfYearOnError() with request : " + lbrRate);
                    ILbrRateBusiness lbrRateBusiness = new LbrRateBusiness();
                    var response = lbrRateBusiness.selectionfYearOnError(lbrRate);
                    logger.Info("Response received from  MCTR.RESTService.LbrRateService.selectionfYearOnError() : " + response);
                    Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService.LbrRateService.selectionfYearOnError(): " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }
 

        ///*************************************************************
        ///<summary>
        ///Method Name : selectionbutRatesListWhenButtonPressed
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>HttpResponseMessage</returns>


        [HttpPost]
        [ActionName("selectionbutRatesListWhenButtonPressed")]
        public HttpResponseMessage selectionbutRatesListWhenButtonPressed([FromBody]IEnumerable<LbrRate> lbrRate)


        {
            try
            {
                    logger.Info("Executing Rest API : MCTR.RESTService.LbrRateService.selectionbutRatesListWhenButtonPressed() with request : " + lbrRate);
                    ILbrRateBusiness lbrRateBusiness = new LbrRateBusiness();
                    var response = lbrRateBusiness.selectionbutRatesListWhenButtonPressed(lbrRate);
                    logger.Info("Response received from  MCTR.RESTService.LbrRateService.selectionbutRatesListWhenButtonPressed() : " + response);
                   return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {

                logger.Error("Error from MCTR.RESTService.LbrRateService.selectionbutRatesListWhenButtonPressed(): " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);

            }
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : LbrRateOnLoad
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>HttpResponseMessage</returns>
        [HttpPost]
        [ActionName("LbrRateOnLoad")]
        public HttpResponseMessage LbrRateOnLoad([FromBody]IEnumerable<LbrRate> lbrRate)
        {
            try
            {
                if (lbrRate != null)
                {
                    logger.Info("Executing Rest API : MCTR.RESTService.LbrRateService.LbrRateOnLoad() with request : " + lbrRate);
                    ILbrRateBusiness lbrRateBusiness = new LbrRateBusiness();
                    var response = lbrRateBusiness.LbrRateOnLoad(lbrRate);
                    logger.Info("Response received from  MCTR.RESTService.LbrRateService.lbrRateLbrRateOnLoad() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.RESTService.LbrRateService.LbrRateOnLoad(): " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : lbrRatesetidPostChange
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>HttpResponseMessage</returns>

        [HttpPost]
        [ActionName("lbrRatesetidPostChange")]
      public HttpResponseMessage lbrRatesetidPostChange([FromBody]IEnumerable<LbrRate> lbrRate)
        {
            try
            {
                if (lbrRate != null)
                {
                    logger.Info("Executing Rest API : MCTR.RESTService.LbrRateService.lbrRatesetidPostChange() with request : " + lbrRate);
                    ILbrRateBusiness lbrRateBusiness = new LbrRateBusiness();
                    var response = lbrRateBusiness.lbrRatesetidPostChange(lbrRate);
                    logger.Info("Response received from  MCTR.RESTService.LbrRateService.lbrRatesetidPostChange() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
           
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.RESTService.LbrRateService.lbrRatesetidPostChange(): " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : Create
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>HttpResponseMessage</returns>
        [HttpPost]
        [ActionName("Create")]
        public HttpResponseMessage Create([FromBody]IEnumerable<LbrRate> lbrRate)
        {
            try
            {
                ILbrRateBusiness lbrRateBusiness = new LbrRateBusiness();
                logger.Info("Executing statusBusiness.PostStatusDirect()");
                var response = lbrRateBusiness.Create(lbrRate);
                logger.Info("Response received from statusBusiness.PostStatusDirect() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : Delete
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>HttpResponseMessage</returns>
        [HttpPost]
        [ActionName("Delete")]
        public HttpResponseMessage Delete([FromBody]IEnumerable<LbrRate> lbrRate)
        {
            try
            {
                ILbrRateBusiness lbrRateBusiness = new LbrRateBusiness();
                logger.Info("Executing statusBusiness.PostStatusDelete()");
                var response = lbrRateBusiness.Delete(lbrRate);
                logger.Info("Response received from statusBusiness.PostStatusDelete() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }
        
    }

}

