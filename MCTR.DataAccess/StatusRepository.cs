///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using MCTR.DataEntity;
using MCTR.DataAccessInterface;
using MCTR.DomainEntity;
using AutoMapper;
using System.Data.SqlClient;
using System.Linq;

namespace MCTR.DataAccess
///*********************************************************************
///<summary>
///StatusRepository is a data access implementation which holds all 
///the data access logic in it.
///</summary>
{
    public class StatusRepository : BaseRepository, IStatusRepository
    {
        ///*************************************************************
        ///<summary>
        ///Method Name : statusWhenNewFormInstance
        ///</summary>        
        ///<returns>IEnumerable<Status> </returns>

        public IEnumerable<Status> statusWhenNewFormInstance()
        {

            string sqlstmt = "select * from mctr_owner.mctr_status order by status_id";//

            var targetCustType = entities.MCTR_STATUS.SqlQuery(sqlstmt).ToList<MCTR_STATUS>();
            var targetCust = Mapper.DynamicMap<IEnumerable<MCTR_STATUS>, IEnumerable<Status>>(targetCustType);
            return targetCust;
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : CreateStatus
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status> </returns>
        //Method to create a data in DB
        public IEnumerable<Status> CreateStatus(IEnumerable<Status> Status)
        {

            try
            {

                IEnumerable<MCTR_STATUS> retrievedStatus = new List<MCTR_STATUS>();
                var TargetStatusToInsert = Mapper.DynamicMap<IEnumerable<Status>, IEnumerable<MCTR_STATUS>>(Status);
                Repository<MCTR_STATUS> dataRepository = new Repository<MCTR_STATUS>();
                dataRepository.Insert(TargetStatusToInsert);
            }
            catch (Exception exp)
            {
                string ExceptionMessage = exp.Message;
                throw exp;
            }
            return Status;
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : DeleteStatus
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status> </returns>

        public IEnumerable<Status> DeleteStatus(IEnumerable<Status> Status)
        {
            try
            {
                IEnumerable<MCTR_STATUS> retrievedStatus = new List<MCTR_STATUS>();
                var TargetStatusToDelete = Mapper.DynamicMap<IEnumerable<Status>, IEnumerable<MCTR_STATUS>>(Status);
                Repository<MCTR_STATUS> dataRepository = new Repository<MCTR_STATUS>();
                dataRepository.Delete(TargetStatusToDelete);


            }
            catch (Exception exp)
            {
                string ExceptionMessage = exp.Message;
                throw exp;
            }
            return Status;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : EditStatus
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status> </returns>
        //Method to Edit a data in DB
        public IEnumerable<Status> EditStatus(IEnumerable<Status> Status)
        {
            try
            {
                IEnumerable<MCTR_STATUS> retrievedTransType = new List<MCTR_STATUS>();
                var TargetStatusToEdit = Mapper.DynamicMap<IEnumerable<Status>, IEnumerable<MCTR_STATUS>>(Status);
                Repository<MCTR_STATUS> dataRepository = new Repository<MCTR_STATUS>();
                dataRepository.Update(TargetStatusToEdit);
            }
            catch (SqlException ex)
            {
                string msg = ex.Message;
            }
            catch (Exception exp)
            {
                string ExceptionMessage = exp.InnerException.Message;
                throw exp;
            }
            return Status;
        }

    }
}
