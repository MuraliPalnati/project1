///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using log4net;
using MCTR.DomainEntities;
using MCTR.Web.Handlers;
using MCTR.Web.Security;
using System;
using System.Linq;
using System.Web.Mvc;

namespace MCTR.Web.Controllers
{
    [CustomAuthorize]
    public class MctrMessageStatusController : Controller
    {
        ///*********************************************************************
        ///<summary>
        ///MctrMessageStatusController is a web controller implementation for the 
        ///MctrMessageStatus screen.
        ///</summary>
         private readonly ILog logger;


        public MctrMessageStatusController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : Index
        ///</summary>
        ///<returns>ActionResult</returns>
        public ActionResult Index()
        {
            return View();
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : GetMessageStatus
        ///</summary>
        ///<returns>IEnumerable<MctrMessageStatus> </returns>
        [HttpGet]
        public ActionResult GetMessageStatus()
        {
            try
            {
                logger.Info("Executing mctrMessageStatusWhenNewFormInstance() : ");
                MctrMessageStatusHandler mctrMessageStatusHandler = new MctrMessageStatusHandler();
                logger.Debug("Executing mctrMessageStatusHandler.mctrMessageStatusWhenNewFormInstance().");
                var mctrMessageStatusResp = mctrMessageStatusHandler.GetMessageStatus();
                logger.Info("Response Received : " + mctrMessageStatusResp);
                 return View("GetMessageStatus",mctrMessageStatusResp.First());
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name :mctrMessageStatusOnInsert
        ///</summary>
        ///<returns>IEnumerable<MctrMessageStatus> </returns>
        [HttpPost]
        public ActionResult mctrMessageStatusOnInsert(MctrMessageStatus mctrMessageStatus)
        {
            try
            {
                logger.Info("Executing mctrMessageStatusWhenNewFormInstance() : ");
                MctrMessageStatusHandler mctrMessageStatusHandler = new MctrMessageStatusHandler();
                logger.Debug("Executing mctrMessageStatusHandler.mctrMessageStatusWhenNewFormInstance().");
                var mctrMessageStatusResp = mctrMessageStatusHandler.mctrMessageStatusOnInsert(mctrMessageStatus);
                logger.Info("Response Received : " + mctrMessageStatusResp);
                return Json(mctrMessageStatusResp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
    }
}