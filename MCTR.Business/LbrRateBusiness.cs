///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///
///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccessInterface;
using MCTR.DataAccess;

namespace MCTR.Business
{
    ///*********************************************************************
    ///<summary>
    ///LbrRateBusiness is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>
    public class LbrRateBusiness : BaseBusiness, ILbrRateBusiness
    {
         private readonly ILog logger;
         readonly ILbrRateRepository repository = new LbrRateRepository();

        public LbrRateBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesWhenNewFormInstance
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<LineItem> </returns>
        public IEnumerable<LbrRate> LbrRatesWhenNewFormInstance()
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesWhenNewFormInstance() with request : ");
                var resultlist = repository.LbrRatesWhenNewFormInstance();
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesWhenNewFormInstance() : ");
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesWhenNewFormInstance" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : selectionfYearOnError
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<LbrRate></returns>
        public IEnumerable<LbrRate> selectionfYearOnError(IEnumerable<LbrRate> lbrRate)
        {
            try
            {
                logger.Info("Executing MCTR.Bussiness.LbrRateBusiness.selectionfYearOnError() with request" + lbrRate);
                ILbrRateRepository lbrRateRepository = new LbrRateRepository();
                var response = lbrRateRepository.selectionbutRatesListWhenButtonPressed(lbrRate);
                logger.Info("Response received from  MCTR.Bussiness.LbrRateBusiness.selectionfYearOnError()" + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Bussiness.LbrRateBusiness.selectionfYearOnError():" + e.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : Create
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<Status></returns>
        public IEnumerable<LbrRate> Create(IEnumerable<LbrRate> lbrRate)
        {
            try
            {
                logger.Info("Executing DataAccess : statusWhenNewFormInstance() with input:" + lbrRate);
                ILbrRateRepository lbrRateRepository = new LbrRateRepository();
                var response = lbrRateRepository.Create(lbrRate);
                logger.Info("Response received from StatusRepository.statusWhenNewFormInstance() : " + response);
                return response;
            }
            catch (Exception)
            {

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : Delete
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status></returns>
        public IEnumerable<LbrRate> Delete(IEnumerable<LbrRate> lbrRate)
        {
            try
            {
                logger.Info("Executing DataAccess : statusWhenNewFormInstance() with input:" + lbrRate);
                ILbrRateRepository statusRepository = new LbrRateRepository();
                var response = statusRepository.Delete(lbrRate);
                logger.Info("Response received from StatusRepository.DeleteStatus() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : selectionbutRatesListWhenButtonPressed
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<LbrRate></returns>
        public IEnumerable<LabourRatePyEdit> EditStatus(IEnumerable<LabourRatePyEdit> lbrRate)
        {
            try
            {
                logger.Info("Executing DataAccess  MCTR.Business.MctrIncrRatesBusiness.EditStatus()with input:" + lbrRate);
                ILbrRateRepository incrRepository = new LbrRateRepository();
                var response = incrRepository.EditStatus(lbrRate);
                logger.Info("Response received from MCTR.Business.MctrIncrRatesBusiness.EditStatus() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : selectionbutRatesListWhenButtonPressed
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<LbrRate></returns>
        public IEnumerable<LbrRate> selectionbutRatesListWhenButtonPressed(IEnumerable<LbrRate> lbrRate)
        {
            try
            {
                logger.Info("Executing MCTR.Bussiness.LbrRateBusiness.selectionbutRatesListWhenButtonPressed() with request" + lbrRate);
                ILbrRateRepository LbrRateRes = new LbrRateRepository();
                var response = LbrRateRes.selectionbutRatesListWhenButtonPressed(lbrRate);
                logger.Info("Response received from MCTR.Bussiness.LbrRateBusiness.selectionbutRatesListWhenButtonPressed():" + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Bussiness.LbrRateBusiness.selectionbutRatesListWhenButtonPressed():" + e.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : LbrRateOnLoad
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<LbrRate></returns>
        public IEnumerable<LbrRate> LbrRateOnLoad(IEnumerable<LbrRate> lbrRate)
        {
            try
            {
                logger.Info("Executing MCTR.Bussiness.LbrRateBusiness.LbrRateOnLoad() with request:" + lbrRate);
                ILbrRateRepository LbrRateRes = new LbrRateRepository();
                var response = LbrRateRes.LbrRateOnLoad(lbrRate);
                logger.Info("Response received from MCTR.Bussiness.LbrRateBusiness.LbrRateOnLoad():" + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Bussiness.LbrRateBusiness.LbrRateOnLoad():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : lbrRatesetidPostChange
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<LbrRate></returns>
        public IEnumerable<LbrRate> lbrRatesetidPostChange(IEnumerable<LbrRate> lbrRate)
        {
            try
            {
                logger.Info("Executing MCTR.Bussiness.LbrRateBusiness.lbrRatesetidPostChange() with request : " + lbrRate);
                ILbrRateRepository LbrRateRes = new LbrRateRepository();
                var response = LbrRateRes.lbrRatesetidPostChange(lbrRate);
                logger.Info("Response received from MCTR.Bussiness.LbrRateBusiness.lbrRatesetidPostChange() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Bussiness.LbrRateBusiness.lbrRatesetidPostChange():" + e.Message);
                throw e;
            }

        }

    }

}


