///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccessInterface;
using MCTR.DataAccess;

namespace MCTR.Business
{

    ///*********************************************************************
    ///<summary>
    ///ttdstatusbl_business is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>
    public class ReportsBusiness : BaseBusiness, IReportsBusiness
    {
         private readonly ILog logger;

     
        public ReportsBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        public IEnumerable<AdminTables> selectionbutactiverolebulistwhenbuttonpressed(IEnumerable<AdminTables> admintables)
        {
            try
            {
                IReportsRepository ReportsRepository = new ReportsRepository();
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.selectionbutRatesListWhenButtonPressed() with request : " + admintables);
                var resultlist = ReportsRepository.selectionbutactiverolebulistwhenbuttonpressed(admintables);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.selectionbutRatesListWhenButtonPressed() : " + admintables);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.selectionbutRatesListWhenButtonPressed" + e.Message);
                throw;
            }
        }
        public IEnumerable<AdminTables> selectionbutactiveuserlistwhenbuttonpressed(IEnumerable<AdminTables> admintables)
        {
            try
            {
                IReportsRepository ReportsRepository = new ReportsRepository();
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.selectionbutactiveuserlistwhenbuttonpressed() with request : " + admintables);
                var resultlist = ReportsRepository.selectionbutactiveuserlistwhenbuttonpressed(admintables);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.selectionbutactiveuserlistwhenbuttonpressed() : " + admintables);
                return resultlist;
            }

            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.selectionbutactiveuserlistwhenbuttonpressed" + e.Message);
                throw;
            }

        }
        public IEnumerable<AdminTables> selectionbutexceleotwhenbuttonpressed(IEnumerable<AdminTables> admintables)
        {
            try
            {
                IReportsRepository ReportsRepository = new ReportsRepository();
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.selectionbutactiveuserlistwhenbuttonpressed() with request : " + admintables);
                var resultlist = ReportsRepository.selectionbutexceleotwhenbuttonpressed(admintables);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.selectionbutactiveuserlistwhenbuttonpressed() : " + admintables);

                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.selectionbutactiveuserlistwhenbuttonpressed" + e.Message);
                throw;
            }
        }
        public IEnumerable<AdminTables> selectionbutqtrlyrolelistwhenbuttonpressed(IEnumerable<AdminTables> admintables)
        {
            try
            {
                IReportsRepository ReportsRepository = new ReportsRepository();
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.selectionbutqtrlyrolelistwhenbuttonpressed() with request : " + admintables);
                var resultlist = ReportsRepository.selectionbutqtrlyrolelistwhenbuttonpressed(admintables);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.selectionbutqtrlyrolelistwhenbuttonpressed() : " + admintables);

                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.selectionbutqtrlyrolelistwhenbuttonpressed" + e.Message);
                throw;
            }
        }
        

        public IEnumerable<RptJrnlbyDate> mctrJrnlbyDatedwldExcel(IEnumerable<RptJrnlbyDate> rptJrnlbyDate)
        {
            try
            {
                IReportsRepository ReportsRepository = new ReportsRepository();
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.mctrJrnlbyDatedwldExcel() with request : " + rptJrnlbyDate);
                var resultlist = ReportsRepository.mctrJrnlbyDatedwldExcel(rptJrnlbyDate);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.selectionbutqtrlyrolelistwhenbuttonpressed() : " + resultlist);

                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrJrnlbyDatedwldExcel" + e.Message);
                throw;
            }
        }
    }
}
