///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using log4net;
using MCTR.DataAccessInterface;
using MCTR.DomainEntity;
using Oracle.ManagedDataAccess.Client;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using MCTR.DataEntity;
using AutoMapper;
using System.Runtime.Remoting.Contexts;
using System.Data.Entity;

namespace MCTR.DataAccess
{
    ///*********************************************************************
    ///<summary>
    ///RoleRepository is a data access implementation which holds all 
    ///the data access logic in it.
    ///</summary>

    public class RoleRepository : BaseRepository, IRoleRepository // BaseRepository
    {

        private readonly ILog logger = null;
        List<RoleList> responseList = new List<RoleList>();
        IEnumerable<Role> response = new List<Role>();
        RoleList roleObj = null;
        String errorMsg = "";

        public RoleRepository()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        public IEnumerable<Role> roleLoad(IEnumerable<string> bems)
        {
            var response = entities.MCTR_ROLE.SqlQuery("select * from mctr_role where bems = " + bems.First() + " order by bems").ToList();
            var result = AutoMapper.Mapper.DynamicMap<IEnumerable<MCTR_ROLE>, IEnumerable<Role>>(response);
            return result;
        }


        public IEnumerable<RoleList> roleOnLoad(IEnumerable<RoleList> roleList)
        {
            logger.Debug("Executing MCTR.DataAccess.RoleRepository.roleOnLoad() with input : " + roleList);
            var response = entities.MCTR_ROLE.SqlQuery("select r.BEMS,r.ACTIVE,r.ACCOUNTANT_ROLE,r.MATL_ACCT_ROLE,r.COST_ACCT_ROLE,r.FIN_CONTROL_ROLE,r.SR_ACCT_ROLE,r.DATE_INIT_ADD,r.DATE_UPDATE,r.BEMS_ADMIN,r.LAST_BU,r.LAST_LOC,r.LAST_DEPT,r.OVRRD_GRP_CD,r.LAST_LOGON,r.ADMIN_ROLE,r.LBR_ACCT_ROLE from mctr_role r  where r.bems = '"+ roleList.First().bems  + "' and BEMS IN (select bems from mctr_employee_v where Emp_Status = 'A') order by bems").ToList();

          //  var response = entities.MCTR_ROLE.SqlQuery("select a.BEMS,a.ACTIVE,a.ACCOUNTANT_ROLE,a.MATL_ACCT_ROLE,a.COST_ACCT_ROLE,a.FIN_CONTROL_ROLE,a.SR_ACCT_ROLE,a.DATE_INIT_ADD,a.DATE_UPDATE,a.BEMS_ADMIN,a.LAST_BU,a.LAST_LOC,a.LAST_DEPT,a.OVRRD_GRP_CD,a.LAST_LOGON,a.ADMIN_ROLE,a.LBR_ACCT_ROLE from mctr_role a, mctr_employee_v b  where a.bems = " + roleList.First().bems + " and b.Emp_Status='A' order by bems").ToList();
            logger.Debug("Response received from MCTR.DataAccess.RoleRepository.roleOnLoad(): " + response);
            if (roleList != null)
            {
                if (response != null && response.Count !=0)
                {
                    foreach (var emprole in response)
                    {
                        roleObj = new RoleList();
                        roleObj.accountant_role1 = emprole.ACCOUNTANT_ROLE=="Y"? true : false;
                        roleObj.active1 = emprole.ACTIVE == "Y" ? true : false;
                        roleObj.admin_role1 = emprole.ADMIN_ROLE == "Y" ? true : false; 
                        roleObj.bems_admin= emprole.BEMS_ADMIN;
                        roleObj.cost_acct_role1 = emprole.COST_ACCT_ROLE == "Y" ? true : false; 
                        roleObj.fin_control_role1 = emprole.FIN_CONTROL_ROLE == "Y" ? true : false; 
                        roleObj.lbr_acct_role1 = emprole.LBR_ACCT_ROLE == "Y" ? true : false; 
                        roleObj.matl_acct_role1 = emprole.MATL_ACCT_ROLE == "Y" ? true : false;
                        roleObj.sr_acct_role1 = emprole.SR_ACCT_ROLE == "Y" ? true : false;
                        roleObj.bems = emprole.BEMS;
                        roleObj.date_init_add = emprole.DATE_INIT_ADD;
                        roleObj.date_update = emprole.DATE_UPDATE;
                        roleObj.last_bu = emprole.LAST_BU;
                        roleObj.last_dept = emprole.LAST_DEPT;
                        roleObj.last_loc = emprole.LAST_LOC;
                        roleObj.last_logon = emprole.LAST_LOGON;
                        roleObj.last_logon_days = Math.Round((DateTime.Now - (Convert.ToDateTime(emprole.LAST_LOGON))).TotalDays).ToString();
                        var sqlstmt1 ="select b.business_unit,b.effdt,b.eff_status,b.descr,b.group_cd7,b.op_segment_7 from mctr_employee_v a, mctr_bus_unit_v b where a.bems_id= " + roleList.First().bems + " and a.component = b.business_unit(+)";
                        var result = entities.Database.SqlQuery<MCTRPSBUSUNITTBL7MV>(sqlstmt1).ToList<MCTRPSBUSUNITTBL7MV>();
                        foreach (var item in result)
                        {
                            roleObj.group_cd7 = item.GROUP_CD7;
                        }
                        
                        var result1 = entities.MCTR_EMPLOYEE_V.SqlQuery("select * from MCTR_OWNER.MCTR_EMPLOYEE_V where bems_id = " + roleList.First().bems + " order by bems_id").ToList();
                        foreach (var employee in result1)
                        {
                            roleObj.last_name = employee.LAST_NAME;
                            roleObj.first_name = employee.FIRST_NAME + " " + employee.MIDDLE_INT;
                            roleObj.bus_unit = employee.BUS_UNIT;
                            roleObj.component = employee.COMPONENT;
                            roleObj.acctg_bus_unit_nm = employee.ACCTG_BUS_UNIT_NM;
                            roleObj.acctg_loc_cdm = employee.ACCTG_LOC_CDM;
                            roleObj.acct_dept_nm = employee.ACCT_DEPT_NM;
                            roleObj.contract_vendor_code = employee.CONTRACT_VENDOR_CODE;
                            roleObj.deptno = employee.DEPTNO;
                            roleObj.dept_nmw = employee.DEPT_NMW;
                            roleObj.division = employee.DIVISION;
                            roleObj.emp_status = employee.EMP_STATUS;
                            roleObj.hr_mgr_first_name = employee.HR_MGR_FIRST_NAME;
                            roleObj.hr_mgr_last_name = employee.HR_MGR_LAST_NAME;
                            roleObj.la_mgr_first_name = employee.LA_MGR_FIRST_NAME;
                            roleObj.la_mgr_id_bems = employee.LA_MGR_ID_BEMS;
                            roleObj.la_mgr_last_name = employee.LA_MGR_LAST_NAME;
                            roleObj.location = employee.LOCATION;
                            roleObj.mail_code = employee.MAIL_CODE;
                            roleObj.middle_int = employee.MIDDLE_INT;
                            roleObj.mgr_id = employee.MGR_ID;
                            roleObj.work_phone = employee.WORK_PHONE;
                            roleObj.stable_email = employee.STABLE_EMAIL;
                        }
                        responseList.Add(roleObj);
                    }
                }
                else
                {
                    roleObj = new RoleList();
                    roleObj.accountant_role1 =false;
                    roleObj.active1 = true;
                    roleObj.admin_role1 = false;
                    roleObj.bems_admin = "";
                    roleObj.cost_acct_role1 = false;
                    roleObj.fin_control_role1 = false;
                    roleObj.lbr_acct_role1 = false;
                    roleObj.matl_acct_role1 = false;
                    roleObj.sr_acct_role1= false;
                    roleObj.bems = roleList.First().bems;
                    roleObj.date_init_add = null;
                    roleObj.date_update = null;
                    roleObj.last_bu = null;
                    roleObj.last_dept = null;
                    roleObj.last_loc = null;
                    roleObj.last_logon = null;
                    roleObj.last_logon_days = null;
                    roleObj.ovrrd_grp_cd = null;
                    var sqlstmt="select b.business_unit,b.effdt,b.eff_status,b.descr,b.group_cd7,b.op_segment_7 from mctr_employee_v a, mctr_bus_unit_v b where a.bems_id= " + roleList.First().bems + " and a.component = b.business_unit(+)";
                    var result1 = entities.Database.SqlQuery<MCTRPSBUSUNITTBL7MV>(sqlstmt).ToList<MCTRPSBUSUNITTBL7MV>();
                    foreach (var item in result1)
                    {
                        roleObj.group_cd7 = item.GROUP_CD7;
                    }



                    var result = entities.MCTR_EMPLOYEE_V.SqlQuery("select * from MCTR_OWNER.MCTR_EMPLOYEE_V where bems_id = " + roleList.First().bems + " order by bems_id").ToList();
                    if (result.Count > 0)
                    {
                        foreach (var employee in result)
                        {
                            roleObj.last_name = employee.LAST_NAME;
                            roleObj.first_name = employee.FIRST_NAME + " " + employee.MIDDLE_INT;
                            roleObj.bus_unit = employee.BUS_UNIT;
                            roleObj.component = employee.COMPONENT;
                            roleObj.acctg_bus_unit_nm = employee.ACCTG_BUS_UNIT_NM;
                            roleObj.acctg_loc_cdm = employee.ACCTG_LOC_CDM;
                            roleObj.acct_dept_nm = employee.ACCT_DEPT_NM;
                            roleObj.contract_vendor_code = employee.CONTRACT_VENDOR_CODE;
                            roleObj.deptno = employee.DEPTNO;
                            roleObj.dept_nmw = employee.DEPT_NMW;
                            roleObj.division = employee.DIVISION;
                            roleObj.emp_status = employee.EMP_STATUS;
                            roleObj.hr_mgr_first_name = employee.HR_MGR_FIRST_NAME;
                            roleObj.hr_mgr_last_name = employee.HR_MGR_LAST_NAME;
                            roleObj.la_mgr_first_name = employee.LA_MGR_FIRST_NAME;
                            roleObj.la_mgr_id_bems = employee.LA_MGR_ID_BEMS;
                            roleObj.la_mgr_last_name = employee.LA_MGR_LAST_NAME;
                            roleObj.location = employee.LOCATION;
                            roleObj.mail_code = employee.MAIL_CODE;
                            roleObj.middle_int = employee.MIDDLE_INT;
                            roleObj.mgr_id = employee.MGR_ID;
                            roleObj.work_phone = employee.WORK_PHONE;
                            roleObj.stable_email = employee.STABLE_EMAIL;
                            responseList.Add(roleObj);
                        }
                        responseList.Add(roleObj);
                    }
                    else
                    {
                        roleObj.last_name = null;
                        roleObj.first_name = null;
                        roleObj.bus_unit = null;
                        roleObj.component = null;
                        roleObj.acctg_bus_unit_nm = null;
                        roleObj.acctg_loc_cdm = null;
                        roleObj.acct_dept_nm = null;
                        roleObj.contract_vendor_code = null;
                        roleObj.deptno = null;
                        roleObj.dept_nmw = null;
                        roleObj.division = null;
                        roleObj.emp_status = null;
                        roleObj.hr_mgr_first_name = null;
                        roleObj.hr_mgr_last_name = null;
                        roleObj.la_mgr_first_name = null;
                        roleObj.la_mgr_id_bems = null;
                        roleObj.la_mgr_last_name = null;
                        roleObj.location = null;
                        roleObj.mail_code = null;
                        roleObj.middle_int = null;
                        roleObj.mgr_id = null;
                        roleObj.work_phone = null;
                        roleObj.stable_email = null;
                        responseList.Add(roleObj);
                    }
                }
                return responseList;
            }
            else
            {
                return null;
            }
        }

        public IEnumerable<RoleList> roleInsert(IEnumerable<RoleList> roleList)
        {
            var response = AutoMapper.Mapper.DynamicMap<IEnumerable<RoleList>, IEnumerable<Role>>(roleList);
            var TargetRoleListToInsert = Mapper.DynamicMap<IEnumerable<Role>, IEnumerable<MCTR_ROLE>>(response);
            var TargetRoleListToInr = Mapper.DynamicMap<IEnumerable<MCTR_ROLE>, IEnumerable<Role>>(TargetRoleListToInsert);

            if (rolePostInsert(TargetRoleListToInr) == true)
            {
                using (var context = new MCTRDbEntities(BaseRepository.MCTRConnectionString))
                {

                    foreach (MCTR_ROLE item in TargetRoleListToInsert)
                    {
                        context.Entry(item).State = EntityState.Added;
                    }
                    context.SaveChanges();
                    return roleList;
                }
            }
            else
            {
                return null;
            }
        }

        public IEnumerable<RoleList> roleUpdate(IEnumerable<RoleList> roleList)
        {
            var response = AutoMapper.Mapper.DynamicMap<IEnumerable<RoleList>, IEnumerable<Role>>(roleList);
            var TargetRoleListToUpdate = Mapper.DynamicMap<IEnumerable<Role>, IEnumerable<MCTR_ROLE>>(response);
            var TargetRoleListToUpd = Mapper.DynamicMap<IEnumerable<MCTR_ROLE>, IEnumerable<Role>>(TargetRoleListToUpdate);
            var result = entities.MCTR_ROLE.SqlQuery("Select * from MCTR_ROLE where BEMS=" + TargetRoleListToUpdate.First().BEMS);
                if(result.Count()==0)
                {
                    if (rolePostInsert(TargetRoleListToUpd) == true)
                    {
                        using (var context = new MCTRDbEntities(BaseRepository.MCTRConnectionString))
                        {
                            foreach (MCTR_ROLE item1 in TargetRoleListToUpdate)
                            {
                            item1.DATE_INIT_ADD = DateTime.Now;
                            context.Entry(item1).State = EntityState.Added;
                            }
                            context.SaveChanges();
                            return roleList;
                        }
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    if (rolePostUpdate(TargetRoleListToUpd) == true)
                    {

                        using (var context = new MCTRDbEntities(BaseRepository.MCTRConnectionString))
                        {


                            foreach (MCTR_ROLE item2 in TargetRoleListToUpdate)
                            {
                                item2.DATE_UPDATE = DateTime.Now;
                                context.Entry(item2).State = EntityState.Modified;
                            }

                            context.SaveChanges();
                            return roleList;
                        }
                    }
                    else
                    {
                        return null;
                    }

                }
        }

        public IEnumerable<RoleList> roleDelete(IEnumerable<RoleList> roleList)
        {

            var response = AutoMapper.Mapper.DynamicMap<IEnumerable<RoleList>, IEnumerable<Role>>(roleList);
            var TargetRoleListToDelete = Mapper.DynamicMap<IEnumerable<Role>, IEnumerable<MCTR_ROLE>>(response);
            var TargetRoleListToDel = Mapper.DynamicMap<IEnumerable<MCTR_ROLE>, IEnumerable<Role>>(TargetRoleListToDelete);

            if (rolePostDelete(TargetRoleListToDel) == true)
            {
                using (var context = new MCTRDbEntities(BaseRepository.MCTRConnectionString))
                {

                    foreach (MCTR_ROLE item in TargetRoleListToDelete)
                    {
                        context.Entry(item).State = EntityState.Modified;
                    }

                    context.SaveChanges();
                    return roleList;
                }

            }
            else
            {
                return null;
            }
        }

        public IEnumerable<Role> rolePostQuery(IEnumerable<Role> role)
        {

            OracleParameter[] parameter = new OracleParameter[1];
            logger.Debug("Executing MCTR.DataAccess.RoleRepository.rolePostQuery() with input : " + role);
            Role roleObj = new Role();
            roleObj = role.First();
            try
            {
                string sql = "select e.last_name , e.first_name , e.emp_status , e.stable_email , e.mail_code , e.work_phone , e.deptno , e.component , e.acctg_loc_cdm , b.group_cd7 , e.la_mgr_id_bems from mctr_employee_v e , mctr_bus_unit_v b where e.bems_id =:0 and e.component = b.business_unit(+) ";
                parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, roleObj.BEMS, ParameterDirection.Input);
                var response = entities.Database.SqlQuery<Role>(sql, parameter).ToList();
                logger.Debug("Response received from MCTR.DataAccess.RoleRepository.rolePostQuery() with input : " + response);
                if (response != null)
                {

                }
            }
            catch (Exception ex)
            {
                errorMsg = ex.Message;

            }

            return role;
        }

        public bool rolePostInsert(IEnumerable<Role> role)
        {
            OracleParameter[] parameter = new OracleParameter[7];
            logger.Debug("Executing MCTR.DataAccess.RoleRepository.rolePostInsert() with input : " + role);
            try
            {
                //Role previous = default(Role);
                Role current = role.FirstOrDefault();

                if (current.ACCOUNTANT_ROLE != null)
                {
                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(:0,:1,:2,:3,:4,:5,:6);";
                    parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, DateTime.Now.ToString("dd-MMM-yy"), ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "Insert", ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "ACCOUNTANT_ROLE", ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, "", ParameterDirection.Input);
                    parameter[6] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.ACCOUNTANT_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }


                if (current.ADMIN_ROLE!=null)
                {

                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(:0,:1,:2,:3,:4,:5,:6);";
                    parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, DateTime.Now.ToString("dd-MMM-yy"), ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "Insert", ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "ADMIN_ROLE", ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, "", ParameterDirection.Input);
                    parameter[6] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.ADMIN_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }

                if (current.COST_ACCT_ROLE!=null)
                {

                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(:0,:1,:2,:3,:4,:5,:6);";
                    parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, DateTime.Now.ToString("dd-MMM-yy"), ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "Insert", ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "COST_ACCT_ROLE", ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, "", ParameterDirection.Input);
                    parameter[6] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.COST_ACCT_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);


                }
                if (current.FIN_CONTROL_ROLE!=null)
                {
                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(:0,:1,:2,:3,:4,:5,:6);";
                    parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, DateTime.Now.ToString("dd-MMM-yy"), ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "Insert", ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "FIN_CONTROL_ROLE", ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, "", ParameterDirection.Input);
                    parameter[6] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.FIN_CONTROL_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }
                if (current.SR_ACCT_ROLE!=null)
                {

                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(:0,:1,:2,:3,:4,:5,:6);";
                    parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, DateTime.Now.ToString("dd-MMM-yy"), ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "Insert", ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "SR_ACCT_ROLE", ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, "", ParameterDirection.Input);
                    parameter[6] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.SR_ACCT_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }
                if (current.LBR_ACCT_ROLE!=null)
                {

                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(:0,:1,:2,:3,:4,:5,:6);";
                    parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, DateTime.Now.ToString("dd-MMM-yy"), ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "Insert", ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "LBR_ACCT_ROLE", ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, "", ParameterDirection.Input);
                    parameter[6] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.LBR_ACCT_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);


                }
                return true;
            }
            catch (Exception ex)
            {
                errorMsg = ex.Message;

            }
            return false;
        }

        public bool rolePostDelete(IEnumerable<Role> role)
        {
            OracleParameter[] parameter = new OracleParameter[10];
            logger.Debug("Executing MCTR.DataAccess.RoleRepository.rolePostDelete() with input : " + role);
            try
            {
                Role previous = default(Role);
                Role current = role.FirstOrDefault();
                if (previous.ACCOUNTANT_ROLE != current.ACCOUNTANT_ROLE)
                {
                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(:0,:1,:2,:3,:4,:5,:6);";
                    parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, DateTime.Now.ToString("dd-MMM-yy"), ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "DEL", ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "ACCOUNTANT_ROLE", ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, previous.ACCOUNTANT_ROLE, ParameterDirection.Input);
                    parameter[6] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.ACCOUNTANT_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }


                if (previous.ADMIN_ROLE != current.ADMIN_ROLE)
                {

                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(:0,:1,:2,:3,:4,:5,:6);";
                    parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, DateTime.Now.ToString("dd-MMM-yy"), ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "DEL", ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "ADMIN_ROLE", ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, previous.ADMIN_ROLE, ParameterDirection.Input);
                    parameter[6] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.ADMIN_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);


                }

                if (previous.COST_ACCT_ROLE != current.COST_ACCT_ROLE)
                {

                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(:0,:1,:2,:3,:4,:5,:6);";
                    parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, DateTime.Now.ToString("dd-MMM-yy"), ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "DEL", ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "COST_ACCT_ROLE", ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, previous.COST_ACCT_ROLE, ParameterDirection.Input);
                    parameter[6] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.COST_ACCT_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }
                if (previous.FIN_CONTROL_ROLE != current.FIN_CONTROL_ROLE)
                {

                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(:0,:1,:2,:3,:4,:5,:6);";
                    parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, DateTime.Now.ToString("dd-MMM-yy"), ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "DEL", ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "FIN_CONTROL_ROLE", ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, previous.FIN_CONTROL_ROLE, ParameterDirection.Input);
                    parameter[6] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.FIN_CONTROL_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }
                if (previous.SR_ACCT_ROLE != current.SR_ACCT_ROLE)
                {

                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(:0,:1,:2,:3,:4,:5,:6);";
                    parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, DateTime.Now.ToString("dd-MMM-yy"), ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "DEL", ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "SR_ACCT_ROLE", ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, previous.SR_ACCT_ROLE, ParameterDirection.Input);
                    parameter[6] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.SR_ACCT_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }
                if (previous.LBR_ACCT_ROLE != current.LBR_ACCT_ROLE)
                {
                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(:0,:1,:2,:3,:4,:5,:6);";
                    parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, DateTime.Now.ToString("dd-MMM-yy"), ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "DEL", ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "LBR_ACCT_ROLE", ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, previous.LBR_ACCT_ROLE, ParameterDirection.Input);
                    parameter[6] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.LBR_ACCT_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }

                return true;
            }
            catch (Exception ex)
            {
                errorMsg = ex.Message;

            }
            return false;
        }

        public bool rolePostUpdate(IEnumerable<Role> role)
        {
            OracleParameter[] parameter = new OracleParameter[6];
            logger.Debug("Executing MCTR.DataAccess.RoleRepository.rolePostUpdate() with input : " + role);
            try
            {
                Role previous = new Role();
                Role current = role.FirstOrDefault();
                var resp = entities.MCTR_ROLE.SqlQuery("select * from MCTR_OWNER.MCTR_ROLE where BEMS=" + current.BEMS).ToList<MCTR_ROLE>();

                previous = AutoMapper.Mapper.DynamicMap<MCTR_ROLE, Role>(resp.First());
                if (previous.ACCOUNTANT_ROLE != current.ACCOUNTANT_ROLE)
                {

                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER) VALUES(CURRENT_TIMESTAMP,:0,:1,:2,:3,:4,:5);";
                   
                    parameter[0] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "CHG", ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "ACCOUNTANT_ROLE", ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, previous.ACCOUNTANT_ROLE, ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.ACCOUNTANT_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }

                if (previous.ADMIN_ROLE != current.ADMIN_ROLE)
                {

                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(CURRENT_TIMESTAMP,:0,:1,:2,:3,:4,:5);";
                    
                    parameter[0] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "CHG", ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "ADMIN_ROLE", ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, previous.ADMIN_ROLE, ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.ADMIN_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }

                if (previous.COST_ACCT_ROLE != current.COST_ACCT_ROLE)
                {
                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(CURRENT_TIMESTAMP,:0,:1,:2,:3,:4,:5);";
                    
                    parameter[0] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                    parameter[1] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "CHG", ParameterDirection.Input);
                    parameter[2] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                    parameter[3] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "COST_ACCT_ROLE", ParameterDirection.Input);
                    parameter[4] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, previous.COST_ACCT_ROLE, ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.COST_ACCT_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }
                if (previous.FIN_CONTROL_ROLE != current.FIN_CONTROL_ROLE)
                {
                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(CURRENT_TIMESTAMP,:0,:1,:2,:3,:4,:5);";
                   
                   parameter[0] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                   parameter[1] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "CHG", ParameterDirection.Input);
                   parameter[2] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                   parameter[3] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "FIN_CONTROL_ROLE", ParameterDirection.Input);
                   parameter[4] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, previous.FIN_CONTROL_ROLE, ParameterDirection.Input);
                   parameter[5] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.FIN_CONTROL_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }
                if (previous.SR_ACCT_ROLE != current.SR_ACCT_ROLE)
                {
                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(CURRENT_TIMESTAMP,:0,:1,:2,:3,:4,:5);";
                   
                     parameter[0] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                     parameter[1] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "CHG", ParameterDirection.Input);
                     parameter[2] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                     parameter[3] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "SR_ACCT_ROLE", ParameterDirection.Input);
                     parameter[4] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, previous.SR_ACCT_ROLE, ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.SR_ACCT_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }
                if (previous.LBR_ACCT_ROLE != current.LBR_ACCT_ROLE)
                {
                    string query = "INSERT INTO MCTR_ROLE_CHG_LOG(LOG_DATE,LOG_BEMS,LOG_ACTION,ROLE_BEMS,FIELD_CHGD,FIELD_BEFORE,FIELD_AFTER)VALUES(CURRENT_TIMESTAMP,:0,:1,:2,:3,:4,:5);";
                   
                     parameter[0] = new OracleParameter(":LOG_BEMS", OracleDbType.Varchar2, current.BEMS, ParameterDirection.Input);
                     parameter[1] = new OracleParameter(":LOG_ACTION", OracleDbType.Varchar2, "CHG", ParameterDirection.Input);
                     parameter[2] = new OracleParameter(":ROLE_BEMS", OracleDbType.Varchar2, current.BEMS_ADMIN, ParameterDirection.Input);
                     parameter[3] = new OracleParameter(":FIELD_CHGD", OracleDbType.Varchar2, "LBR_ACCT_ROLE", ParameterDirection.Input);
                     parameter[4] = new OracleParameter(":FIELD_BEFORE", OracleDbType.Varchar2, previous.LBR_ACCT_ROLE, ParameterDirection.Input);
                    parameter[5] = new OracleParameter(":FIELD_AFTER", OracleDbType.Varchar2, current.LBR_ACCT_ROLE, ParameterDirection.Input);
                    int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter);

                }
                return true;
            }
            catch (Exception ex)
            {
                errorMsg = ex.Message;

            }
            return false;
        }

        public IEnumerable<Role> roleWhenNewFormInstance(IEnumerable<Role> role)
        {
            OracleParameter[] parameter = new OracleParameter[1];
            logger.Debug("Executing MCTR.DataAccess.RoleRepository.roleWhenNewFormInstance() with input : " + role);
            Role roleObj = role.First();
            try
            {
                string sql = "select e.last_name , e.first_name , e.emp_status , e.stable_email , e.mail_code , e.work_phone , e.deptno , e.component , e.acctg_loc_cdm , b.group_cd7 , e.la_mgr_id_bems from mctr_employee_v e , mctr_bus_unit_v b where e.bems_id =:0 and e.component = b.business_unit(+) ";
                parameter[0] = new OracleParameter(":LOG_DATE", OracleDbType.Varchar2, roleObj.BEMS, ParameterDirection.Input);
                var resultlist = entities.Database.SqlQuery<string>(sql, parameter).ToList();

                if (resultlist != null)
                {

                }
            }
            catch (Exception ex)
            {
                errorMsg = ex.Message;

            }
            return response;
        }
    }
}

