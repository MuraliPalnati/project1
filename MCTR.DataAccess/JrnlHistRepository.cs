///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MCTR.DataEntity;
using log4net;
using Oracle.ManagedDataAccess.Client;
using MCTR.DomainEntity;
using MCTR.DataAccessInterface;
using System.Globalization;

namespace MCTR.DataAccess
{
    ///*********************************************************************
    ///<summary>
    ///JrnlHistRepository is a data access implementation which holds all 
    ///the data access logic in it.
    ///</summary>
    public class JrnlHistRepository : BaseRepository, IJrnlHistRepository //: BaseRepository,
    {

        private readonly ILog logger = null;

        public JrnlHistRepository()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlHistOnLoad
        ///</summary>
        ///<param name = "JrnlHist"></param>
        ///<returns>IEnumerable<JrnlHist> </returns>

        public IEnumerable<JrnlHist> jrnlHistOnLoad(IEnumerable<JrnlHist> jrnlHist)
        {
            logger.Debug("Executing MCTR.DataAccess.JrnlHistRepository.jrnlHistOnLoad with input : " + jrnlHist);
            try
            {    
                StringBuilder sqlstmt = new StringBuilder("select * from MCTR_JOURNAL_HISTORY where (( '"+ jrnlHist.First().DATE_JOURNAL.ToString("dd-MMM-yy")+ "' is null and(date_journal > sysdate - 300) ) or( '" + jrnlHist.First().DATE_JOURNAL.ToString("dd-MMM-yy") + "' is not null and trunc(date_journal) = TO_DATE('" + jrnlHist.First().DATE_JOURNAL.ToString("dd-MMM-yy") + "', 'DD-MON-YY')) ) and exists (select lu.business_unit from mctr_role_bu lu where lu.bems = "+ jrnlHist.First().session_bems + " and (lu.business_unit = bus_unit_gl_from or (lu.business_unit = '**' and exists (select bu.business_unit from MCTR_PS_BUS_UNIT_TBL7_MV bu where bu.business_unit = bus_unit_gl_from and bu.group_cd7 = lu.group_cd7 )) ) )order by date_journal desc , mctr_no , line_no , from_to , line_no_oh ");//order by date_journal desc , mctr_no , line_no , from_to , line_no_oh
                var resultlist = entities.MCTR_JOURNAL_HISTORY.SqlQuery(sqlstmt.ToString()).ToList<MCTR_JOURNAL_HISTORY>();
                var response=AutoMapper.Mapper.DynamicMap<IEnumerable<MCTR_JOURNAL_HISTORY>,IEnumerable<JrnlHist>> (resultlist);
                logger.Debug("Response received from  MCTR.DataAccess.MctrIncrRatesRepository.jrnlHistOnLoad with input : " + jrnlHist);
                return response;
            }
            catch (Exception e)
            {
                logger.Error(" Error from MCTR.DataAccess.JrnlHistRepository.jrnlHistOnLoad() " + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : getRgJhistDateLOV
        ///</summary>
        ///<returns>IEnumerable<JrnlHist> </returns>
        public IEnumerable<JrnlHist> getRgJhistDateLOV()
        {
            logger.Debug("Executing MCTR.DataAccess.JrnlHistRepository.getRgJhistDateLOV()");
            try
            {
              
                string sqlstmt = "select date_journal as DATE_JOURNAL, count(*) as count  from mctr_journal_history group by date_journal"; // order by date_journeyed desc";
                var resultlist = entities.Database.SqlQuery<JrnlHist>(sqlstmt).ToList<JrnlHist>();
                logger.Debug("Response received from  MCTR.DataAccess.MctrIncrRatesRepository.getRgJhistDateLOV ");
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error(" Error from MCTR.DataAccess.JrnlHistRepository.getRgJhistDateLOV() " + e.Message);
                throw;
            }
        }

    }
}
