///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  


using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using log4net;

using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.Business;

namespace MCTR.RESTService.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///LineItemServiceController is a Rest controller implementation  
    ///which acts as a wrapper to the LineItemBusiness implementation and
    /// provides api path for each methods exposed.
    ///</summary>

    public class LineItemServiceController : ApiController
    {

         private readonly ILog logger;

        public LineItemServiceController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItemMctrLineItemOnLoad
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpPost]
        [ActionName("mctrLineItemMctrLineItemOnLoad")]
        public HttpResponseMessage mctrLineItemMctrLineItemOnLoad([FromBody]IEnumerable<LineItem> lineItem)
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.Controllers.LineItemServiceController.mctrLineItemMctrLineItemOnLoad() with request : " + lineItem);
                if (lineItem != null)
                {
                    ILineItemBusiness lineItemBusiness = new LineItemBusiness();
                    var response = lineItemBusiness.mctrLineItemMctrLineItemOnLoad(lineItem);
                    logger.Info("Response received from  MCTR.RESTService.Controllers.LineItemServiceController. MCTR.RESTService.Controllers.LineItemServiceController.lineItemBusiness.mctrLineItemMctrLineItemOnLoad() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService.Controllers.LineItemServiceController.mctrLineItemMctrLineItemOnLoad()" + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
            return null;

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItembutOpenMctrWhenButtonPressed
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpPost]
        [ActionName("mctrLineItembutOpenMctrWhenButtonPressed")]
        public HttpResponseMessage mctrLineItembutOpenMctrWhenButtonPressed([FromBody]IEnumerable<LineItem> lineItem)
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.Controllers.LineItemServiceController.mctrLineItembutOpenMctrWhenButtonPressed() with request : " + lineItem);
                if (lineItem != null)
                {
                    ILineItemBusiness lineItemBusiness = new LineItemBusiness();
                    var response = lineItemBusiness.mctrLineItembutOpenMctrWhenButtonPressed(lineItem);
                    logger.Info("Response received from  MCTR.RESTService.Controllers.LineItemServiceController.lineItemBusiness.mctrLineItembutOpenMctrWhenButtonPressed() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService.Controllers.LineItemServiceController.mctrLineItembutOpenMctrWhenButtonPressed()" + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItemPostQuery
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpPost]
        [ActionName("mctrLineItemPostQuery")]
        public HttpResponseMessage mctrLineItemPostQuery([FromBody]IEnumerable<LineItem> lineItem)
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.Controllers.LineItemServiceController.mctrLineItemPostQuery() with request : " + lineItem);
                if (lineItem != null)
                {
                    ILineItemBusiness lineItemBusiness = new LineItemBusiness();
                    var response = lineItemBusiness.mctrLineItemPostQuery(lineItem);
                    logger.Info("Response received from  MCTR.RESTService.Controllers.LineItemServiceController.lineItemBusiness.mctrLineItemPostQuery() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService.Controllers.LineItemServiceController.mctrLineItemPostQuery()" + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBems1LOV()
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpGet]
        [ActionName("getRgBems1LOV()")]
        public HttpResponseMessage getRgBems1LOV()
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.Controllers.LineItemServiceController.getRgBems1LOV()() with request : ");

                ILineItemBusiness lineItemBusiness = new LineItemBusiness();
                var response = lineItemBusiness.getRgBems1LOV();
                logger.Info("Response received from  MCTR.RESTService.Controllers.LineItemServiceController.getRgBems1LOV()() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService.Controllers.LineItemServiceController.getRgBems1LOV()() " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBems2LOV()
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpGet]
        [ActionName("getRgBems2LOV()")]
        public HttpResponseMessage getRgBems2LOV()
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.Controllers.LineItemServiceController.getRgBems2LOV()() with request : ");

                ILineItemBusiness lineItemBusiness = new LineItemBusiness();
                var response = lineItemBusiness.getRgBems2LOV();
                logger.Info("Response received from  MCTR.RESTService.Controllers.LineItemServiceController.lineItemBusiness.getRgBems2LOV(): " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService.Controllers.LineItemServiceController.getRgBems2LOV()(): ");
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }


        }

        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBems3LOV()
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpGet]
        [ActionName("getRgBems3LOV()")]
        public HttpResponseMessage getRgBems3LOV()
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.Controllers.LineItemServiceController.getRgBems3LOV()() with request : ");
                ILineItemBusiness lineItemBusiness = new LineItemBusiness();
                var response = lineItemBusiness.getRgBems3LOV();
                logger.Info("Response received from  MCTR.RESTService.Controllers.LineItemServiceController.lineItemBusiness.getRgBems3LOV() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService.Controllers.LineItemServiceController.getRgBems3LOV()(): ");
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : lineItemOnError
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpPost]
        [ActionName("lineItemOnError")]
        public HttpResponseMessage lineItemOnError([FromBody]IEnumerable<LineItem> lineItem)
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.Controllers.LineItemServiceController.lineItemOnError() with request : " + lineItem);
                if (lineItem != null)
                {
                    ILineItemBusiness lineItemBusiness = new LineItemBusiness();
                    var response = lineItemBusiness.lineItemOnError(lineItem);
                    logger.Info("Response received from  MCTR.RESTService.Controllers.LineItemServiceController.lineItemBusiness.lineItemOnError() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from  MCTR.RESTService.Controllers.LineItemServiceController.lineItemOnError(): ");
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : lineItemWhenWindowClosed
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpPost]
        [ActionName("lineItemWhenWindowClosed")]
        public HttpResponseMessage lineItemWhenWindowClosed([FromBody]IEnumerable<LineItem> lineItem)
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.Controllers.LineItemServiceController.lineItemWhenWindowClosed() with request : " + lineItem);
                if (lineItem != null)
                {
                    ILineItemBusiness lineItemBusiness = new LineItemBusiness();
                    var response = lineItemBusiness.lineItemWhenWindowClosed(lineItem);
                    logger.Info("Response received from  MCTR.RESTService.Controllers.LineItemServiceController.lineItemBusiness.lineItemWhenWindowClosed() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService.Controllers.LineItemServiceController.lineItemWhenWindowClosed(): ");
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
            return null;
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : Get
        ///</summary>
        [HttpGet]
        [ActionName("Get")]
        public HttpResponseMessage Get()
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.Controllers.LineItemServiceController.Get()");
                ILineItemBusiness lineItemBusiness = new LineItemBusiness();
                var response = lineItemBusiness.Get();
                logger.Info("Response Received from MCTR.RESTService.Controllers.LineItemServiceController.Get()");

                return Request.CreateResponse(HttpStatusCode.OK, response);
            }

            catch (Exception e)
            {
                logger.Error("Error fromMCTR.RESTService.Controllers.LineItemServiceController.Get(): ");
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }

        }

    }
}

