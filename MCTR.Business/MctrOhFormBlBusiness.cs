///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccessInterface;
using MCTR.DataAccess;

namespace MCTR.Business
{

    ///*********************************************************************
    ///<summary>
    ///mctrohformbl_business is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>
    public class MctrOhFormBlBusiness : BaseBusiness, IMctrOhFormBlBusiness
    {
         private readonly ILog logger;

        public MctrOhFormBlBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrOhMctrOhOnLoad
        ///</summary>
        ///<param name = "mctrOhFormBl"></param>
        ///<returns>IEnumerable<mctrOhFormBl></returns>
        public IEnumerable<MctrOhFormBl> mctrOhMctrOhOnLoad(IEnumerable<MctrOhFormBl> mctrOhFormBl)
        {
            try
            {
                logger.Info("Executing Business : mctrOhMctrOhOnLoad()");
                IMctrOhFormBlRepository MctrOhFormBlRepository = new MctrOhFormBlRepository();
                var response = MctrOhFormBlRepository.mctrOhMctrOhOnLoad(mctrOhFormBl);
                logger.Info("Response received from  MctrOhFormBlRepository.mctrOhMctrOhOnLoad() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.DataAccess.mctrOhMctrOhOnLoad():" + e.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrOhFormBlWhenNewFormInstance
        ///</summary>
        ///<param name = "mctrOhFormBl"></param>
        ///<returns>IEnumerable<mctrOhFormBl></returns>
        public IEnumerable<MctrOhFormBl> mctrOhFormBlWhenNewFormInstance(IEnumerable<MctrOhFormBl> mctrOhFormBl)
        {
            try
            {
                logger.Info("Executing Business : mctrOhFormBlWhenNewFormInstance()");
                IMctrOhFormBlRepository MctrOhFormBlRepository = new MctrOhFormBlRepository();
                var response = MctrOhFormBlRepository.mctrOhFormBlWhenNewFormInstance(mctrOhFormBl);
                logger.Info("Response received from MctrOhFormBlRepository.mctrOhFormBlWhenNewFormInstance() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.DataAccess.mctrOhFormBlWhenNewFormInstance():" + e.Message);
                throw;
            }
        }
        //*************************************************************
        ///<summary>
        ///Method Name : mctrOhFormBlWhenWindowClosed
        ///</summary>
        ///<param name = "mctrOhFormBl"></param>
        ///<returns>IEnumerable<mctrOhFormBl></returns>
        public IEnumerable<MctrOhFormBl> mctrOhFormBlWhenWindowClosed(IEnumerable<MctrOhFormBl> mctrOhFormBl)
        {
            try
            {
                logger.Info("Executing Business : mctrOhFormBlWhenWindowClosed()");
                IMctrOhFormBlRepository MctrOhFormBlRepository = new MctrOhFormBlRepository();
                var response = MctrOhFormBlRepository.mctrOhFormBlWhenWindowClosed(mctrOhFormBl);
                logger.Info("Response received from MctrOhFormBlRepository.mctrOhFormBlWhenWindowClosed() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.DataAccess.mctrOhFormBlWhenWindowClosed():" + e.Message);
                throw;
            }
        }
    }
}