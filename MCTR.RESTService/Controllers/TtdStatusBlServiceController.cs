///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///
 
///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  
 
 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using log4net;

using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.Business;

namespace MCTR.RESTService.Controllers
{
///*********************************************************************
///<summary>
///TtdStatusBlServiceController is a Rest controller implementation  
///which acts as a wrapper to the TtdStatusBlBusiness implementation and
/// provides api path for each methods exposed.
///</summary>

  public class TtdStatusBlServiceController : ApiController
  {
   	
     private readonly ILog logger;
    
    public TtdStatusBlServiceController()
    {
      logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
    }


        ///*************************************************************
        ///<summary>
        ///Method Name : lineItemLineItemOnLoad
        ///</summary>
        ///<param name = "TtdStatusBl"></param>
        ///<returns>IEnumerable<TtdStatusBl> </returns>

        [HttpPost]
        [ActionName("LineItemOnLoad")]
        public HttpResponseMessage LineItemOnLoad(IEnumerable<LineItem> lineitem)
        {
            try
            {
                if (lineitem != null)
                {
                    logger.Info("Executing Rest API : MCTR.RESTService.TtdStatusBlService.LineItemOnLoad() with request : " + lineitem);
                    ITtdStatusBIBusiness perStatusBlBusiness = new TtdStatusBIBusiness();
                    var response = perStatusBlBusiness.LineItemOnLoad(lineitem);
                    logger.Info("Response received from MCTR.RESTService.TtdStatusBlService.LineItemOnLoad() : ");
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.RESTService.TtdStatusBlService.LineItemOnLoad(): " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : ttdStatusBlWhenWindowClosed
        ///</summary>
        ///<param name = "TtdStatusBl"></param>
        ///<returns>IEnumerable<TtdStatusBl> </returns>

        [HttpPost]
    [ActionName("ttdStatusBlWhenWindowClosed")]
    public HttpResponseMessage ttdStatusBlWhenWindowClosed([FromBody]IEnumerable<LineItem> lineitem)
        {
            try
            {
                if (lineitem != null)
                {
                    logger.Info("Executing Rest API : MCTR.RESTService.TtdStatusBlService.ttdStatusBlWhenWindowClosed() with request : " + lineitem);
                    ITtdStatusBIBusiness ttdStatusBlBusiness = new TtdStatusBIBusiness();
                    var response = ttdStatusBlBusiness.ttdStatusBlWhenWindowClosed(lineitem);
                    logger.Info("Response received from MCTR.RESTService.TtdStatusBlService.ttdStatusBlWhenWindowClosed() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.RESTService.TtdStatusBlService.ttdStatusBlWhenWindowClosed(): " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
       }
 	}

}

