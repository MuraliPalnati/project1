///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Linq;
using MCTR.DataEntity;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using System.Data;
using log4net;
using Oracle.ManagedDataAccess.Client;

using MCTR.DomainEntity;

using MCTR.DataAccessInterface;
using System.Data.Entity.Validation;

namespace MCTR.DataAccess
{
    ///*********************************************************************
    ///<summary>
    ///MctrLogAcctRepository is a data access implementation which holds all 
    ///the data access logic in it.
    ///</summary>
    public class MctrLogAcctRepository : BaseRepository, IMctrLogAcctRepository 
    {

        private readonly ILog logger = null;
        Repository<MCTR_LOG_ACCT_CHG> dataRepository;
        MctrLogAcct mctrlogAcct = new MctrLogAcct();
        List<MctrLogAcct> resultList = new List<MctrLogAcct>();

        public MctrLogAcctRepository()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
            dataRepository = new Repository<MCTR_LOG_ACCT_CHG>();
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogOnInsert
        ///</summary>
        ///<param name = "MctrLogAcct"></param>
        ///<returns>IEnumerable<MctrLogAcct> </returns>

        public IEnumerable<MctrLogAcct> mctrLogOnInsert(IEnumerable<MctrLogAcct> mctrLogAcct)
        {
            OracleParameter[] parameters = new OracleParameter[6];
            logger.Debug("Executing Mctr.DataAccess: MctrLogAcctRepository mctrLogOnInsert with input : " + mctrLogAcct);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            try
            {
                mctrlogAcct = mctrLogAcct.First();

                List<OracleParameter> paramters = new List<OracleParameter>();

                StringBuilder sqlstmt = new StringBuilder("insert  into  mctr_log_acct_chg  (  mctr_no  ,  date_changed  ,  status_id  ,  bems_acct  ,  bems_acct_new  ,  reason  ,  bems_admin  ) values(:0,CURRENT_TIMESTAMP,:1,:2, :3, :4, :5);");
                OracleParameter[] parameter1 = new OracleParameter[6];
                parameter1[0] = new OracleParameter(":mctrno", OracleDbType.Int32, mctrlogAcct.Mctr_No, ParameterDirection.Input);
                parameter1[1] = new OracleParameter(":statusId", OracleDbType.Varchar2, mctrlogAcct.Status_Id, ParameterDirection.Input);
                parameter1[2] = new OracleParameter(":bems_acct", OracleDbType.Varchar2, mctrlogAcct.Bems_Acct, ParameterDirection.Input);
                parameter1[3] = new OracleParameter(":bems_acct_new", OracleDbType.Varchar2, mctrlogAcct.Bems_Acct_New, ParameterDirection.Input);
                parameter1[4] = new OracleParameter(":reason", OracleDbType.Varchar2, mctrlogAcct.reason, ParameterDirection.Input);
                parameter1[5] = new OracleParameter(":bemsAdmin", OracleDbType.Varchar2, mctrlogAcct.Bems_Admin, ParameterDirection.Input);

                int result = entities.Database.ExecuteSqlCommand("BEGIN " + sqlstmt + " END;", parameter1);
                sqlstmt = new StringBuilder("update mctr_header set bems_acct = :0 where mctr_no = :1;");
                parameter1 = new OracleParameter[2];
                parameter1[0] = new OracleParameter(":bems_orig", OracleDbType.Varchar2, mctrlogAcct.Bems_Acct_New, ParameterDirection.Input);
                parameter1[1] = new OracleParameter(":mctr_no", OracleDbType.Int32, mctrlogAcct.Mctr_No, ParameterDirection.Input);
                result = entities.Database.ExecuteSqlCommand("BEGIN " + sqlstmt + " END;", parameter1);

                if (result != 0)
                {
                    mctrLogAcct.First().RespMsg = "";
                }
                else
                {
                    throw new Exception("Couldn't Save it into DB");
                }


            }
            catch (OracleException e)
            {
                logger.Error("Error from DataAccess.mctrLogOnInsert():" + e.Message);
                mctrLogAcct.First().RespMsg = e.Message.Split(':')[1];
            }
            catch (DbEntityValidationException e)
            {
                logger.Error("Error from DataAccess.mctrLogOnInsert():" + e.Message);
                mctrLogAcct.First().RespMsg = "";
            }
            catch (Exception e)
            {
                logger.Error("Error from DataAccess.mctrLogOnInsert():" + e.Message);
                throw;
            }


            resultList.Add(mctrlogAcct);

            return resultList;

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogWhenNewRecordInstance
        ///</summary>
        ///<param name = "MctrLogAcct"></param>
        ///<returns>IEnumerable<MctrLogAcct> </returns>

        public IEnumerable<MctrLogAcct> mctrLogWhenNewRecordInstance(IEnumerable<MctrLogAcct> mctrLogAcct)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing Mctr.DataAccess MctrLogAcctRepository mctrLogWhenNewRecordInstance with input : " + mctrLogAcct);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            //mctr_log.date_changed;
            //= sysdate;
            //mctr_log.bems_admin;
            //= global.session_bems;
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogAcctWhenWindowClosed
        ///</summary>
        ///<param name = "MctrLogAcct"></param>
        ///<returns>IEnumerable<MctrLogAcct> </returns>

        public IEnumerable<MctrLogAcct> mctrLogAcctWhenWindowClosed(IEnumerable<MctrLogAcct> mctrLogAcct)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing Mctr.DataAccess.MctrLogAcctRepository.mctrLogAcctWhenWindowClosed with input : " + mctrLogAcct);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }
        
        public IEnumerable<MctrLogAcct> mctrLogMctrLogOnLoad()
        {
            //inparam = new LinkedHashMap<Integer, Object>();
            //// SQL: select * from mctr_owner . mctr_log_acct_chg
            //sql = new StringBuilder("select * from mctr_owner.mctr_log_acct_chg ");
            //resultList = executeQuery(sql.toString(), inparam);
            try
            {
                logger.Debug("Executing Mctr.DataAccess.MctrLogAcctRepository.mctrLogMctrLogOnLoad()");
                var result = AutoMapper.Mapper.DynamicMap<IEnumerable<MCTR_LOG_ACCT_CHG>, IEnumerable<MctrLogAcct>>(dataRepository.Get());
                logger.Debug("Executing Mctr.DataAccess.MctrLogAcctRepository.mctrLogMctrLogOnLoad()");
                return result;
            }
            catch (OracleException exp)
            {
                logger.Error("Error from  Mctr.DataAccess.MctrLogAcctRepository.mctrLogMctrLogOnLoad():" + exp.Message);
                throw;
            }
            catch (Exception ex)
            {
                logger.Error("Error from  Mctr.DataAccess.MctrLogAcctRepository.mctrLogMctrLogOnLoad():" + ex.Message);
                throw;
            }
        }

        public IEnumerable<MctrLogAcct> mctrHeaderMctrHeaderOnLoad(IEnumerable<MctrLogAcct> mctrLogAcct)
        {
            logger.Debug("Executing Mctr.DataAccess.MctrLogAcctRepository.mctrHeaderMctrHeaderOnLoad() with input : " + mctrLogAcct);
            try
            {
                mctrlogAcct = mctrLogAcct.First();
                StringBuilder query = new StringBuilder("select * from MCTR_HEADER where MCTR_NO=:0");
                OracleParameter[] parameters = new OracleParameter[1];
                parameters[0] = new OracleParameter(":mctr_no", OracleDbType.Int32, mctrlogAcct.Mctr_No, ParameterDirection.Input);
                var response = entities.Database.SqlQuery<MctrLogAcct>(query.ToString(), parameters).ToList<MctrLogAcct>();
          
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.DataAccess.MctrLogAcctRepository.mctrHeaderMctrHeaderOnLoad():" + e.Message);
                mctrLogAcct.First().RespMsg = "Invalid MCTR No. Please Enter Valid MCTR No";
            }

            logger.Debug("Exiting Mctr.DataAccess.MctrLogAcctRepository.mctrLogAcctWhenWindowClosed with response : " + resultList);
            return mctrLogAcct;
        }
        public IEnumerable<MctrLogAcct> validateBems(IEnumerable<MctrLogAcct> mctrLogAcct)
        {
            logger.Debug("Executing Mctr.DataAccess.MctrLogAcctRepository.validateBems() with input : " + mctrLogAcct);
            try
            {
                mctrlogAcct = mctrLogAcct.First();
                StringBuilder query = new StringBuilder("select * from MCTR_EMPLOYEE_V where BEMS_ID=" + mctrlogAcct.Bems_Acct_New);
                var response = entities.MCTR_EMPLOYEE_V.SqlQuery(query.ToString()).ToList<MCTR_EMPLOYEE_V>();

                if (!response.Any())
                {
                    mctrLogAcct.First().RespMsg = "Invalid BEMS ID. Please Enter Valid BEMS ID";

                }
                else
                {
                    mctrLogAcct.First().RespMsg = "";
                }
            }
            catch (OracleException e)
            {
                logger.Error("Error from  Mctr.DataAccess.MctrLogAcctRepository.mctrHeaderMctrHeaderOnLoad():" + e.Message);
                mctrLogAcct.First().RespMsg = "Invalid BEMS ID. Please Enter Valid BEMS ID";
            }
            return mctrLogAcct;
        }
    }

}

