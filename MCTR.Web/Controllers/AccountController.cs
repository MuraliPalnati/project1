///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///
///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  using MCTR.DomainEntity;
using MCTR.Web.Models;
using MCTR.Web.Security;
using MCTR.Web.ViewModel;
using System;
using System.Web.Mvc;
using MCTR.DomainEntity;
using System.Linq;

namespace MCTR.Web.Controllers
{
    public class AccountController : Controller
    {
        // GET: Account
        //public ActionResult Index()
        //{
        //    return View();
        //}
        [HttpGet]
        public ActionResult Login(string BEMS)
        {
            string MCTRWebUrl = Request.Url.ToString();
            try
            {
                string currentEnvironment = string.Empty;
#if DEBUG
                MCTRWebUrl = "https://mctr-dev.web.boeing.com/MCTRRESTService/api/";
#endif
                string[] MCTRURLSplitArray = MCTRWebUrl.Split('-');

                if (MCTRURLSplitArray.Count() > 0)
                {
                    string[] MCTREnvironmentSplitArray = MCTRURLSplitArray[1].Split('.');
                    if (MCTREnvironmentSplitArray.Count() > 0)
                    {
                        currentEnvironment = MCTREnvironmentSplitArray[0].ToString();
                    }
                }

                switch (currentEnvironment)
                {
                    case "dev":
                        {
                            
                            SessionPerister.MCTRENVIRONMENT = "DEVELOPMENT";
                            break;
                        }
                    case "pre":
                        {
                            SessionPerister.MCTRENVIRONMENT = "INTEGRATED";
                            break;
                        }
                    case "prod":
                        {
                            SessionPerister.MCTRENVIRONMENT = "PRODUCTION";
                            break;
                        }
                    default:
                        {
                            SessionPerister.MCTRENVIRONMENT = "DEVELOPMENT";
                            break;
                        }
                }
            }
            catch (Exception e)
            {
                //return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }

            if (BEMS!=null && BEMS!="")
            {
                RoleListViewModel roleViewModel = new RoleListViewModel();
                RoleList rolelist = new RoleList();
                rolelist.bems = BEMS;
                roleViewModel.roleList = rolelist;
                //var userName = System.Web.HttpContext.Current.Request.Headers["UserName"];
                //var name = System.Web.HttpContext.Current.Request.Headers["Name"];
                //var role = System.Web.HttpContext.Current.Request.Headers["Role"];
                RoleList EmplList = new RoleList();
                RoleModel rm = new RoleModel();
                EmplList = rm.login(roleViewModel.roleList);
                //var bems = rm.find(roleViewModel.roleList.bems);
                if (string.IsNullOrEmpty(roleViewModel.roleList.bems) || EmplList == null)
                {
                    ViewBag.Error = "Account is Invalid";
                    return View("Index");
                }
                if (Convert.ToInt32(EmplList.messageEnv["rolecount"]) != 0)
                {
                    SessionPerister.BEMSID = roleViewModel.roleList.bems;
                    SessionPerister.UserName = EmplList.first_name + " " + EmplList.last_name;
                    SessionPerister.ACTIVE = EmplList.active;
                    SessionPerister.ADMINROLE = EmplList.admin_role;
                    SessionPerister.ACCOUNTANTROLE = EmplList.accountant_role;
                    SessionPerister.COSTACCTROLE = EmplList.cost_acct_role;
                    SessionPerister.FINCTRLROLE = EmplList.fin_control_role;
                    SessionPerister.LBRACCTROLE = EmplList.lbr_acct_role;
                    SessionPerister.SRACCTROLE = EmplList.sr_acct_role;
                    SessionPerister.MATLACCTROLE = EmplList.matl_acct_role;
                    SessionPerister.MESSAGEADMINBEMS = EmplList.msgadmin;
                    SessionPerister.IP = EmplList.ip;
                    return RedirectToAction("buttonPalettebutRefreshWhenButtonPressed", "MctrMainMenu");
                }
                else
                {
                    
                    SessionPerister.UserName = EmplList.first_name + " " + EmplList.last_name;
                    ViewData["id"] = EmplList.accountvalid;
                    return View("ValidUser");

                }
            }
            else
            {
                return RedirectToAction("Home", "Home");
            }
        }

        public ActionResult Logout()
        {
            string MCTRWebUrl = Request.Url.ToString();
            try
            {
                string currentEnvironment = string.Empty;
#if DEBUG
                MCTRWebUrl = "https://mctr-dev.web.boeing.com/MCTRRESTService/api/";
#endif 
                string[] MCTRURLSplitArray = MCTRWebUrl.Split('-');

                if (MCTRURLSplitArray.Count() > 0)
                {
                    string[] MCTREnvironmentSplitArray = MCTRURLSplitArray[1].Split('.');
                    if (MCTREnvironmentSplitArray.Count() > 0)
                    {
                        currentEnvironment = MCTREnvironmentSplitArray[0].ToString();
                    }
                }

                switch (currentEnvironment)
                {
                    case "dev":
                        {
                            TempData["Environment"] = "Finance Accounting Development";
                            break;
                        }
                    case "pre":
                        {
                            TempData["Environment"] = "Finance Accounting Test";
                            break;
                        }
                    case "prod":
                        {
                            TempData["Environment"] = "Finance Accounting Production";
                            break;
                        }
                    default:
                        {
                            TempData["Environment"] = "Finance Accounting Development";
                            break;
                        }
                }
            }
            catch (Exception e)
            {
                //return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
            //TempData["Environment"] = ConfigurationManager.AppSettings["Environment"].ToString();
            Session.RemoveAll();
            Session.Abandon();
            return View("LoggedOut");
        }
    }
}