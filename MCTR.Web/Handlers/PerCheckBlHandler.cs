///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;

using log4net;

using MCTR.DomainEntity;

namespace MCTR.Web.Handlers
{
    ///*********************************************************************
    ///<summary>
    ///PerCheckBlHandler provides a level of abstraction for consuming the REST api.
    ///</summary>
    public class PerCheckBlHandler
    {
         private readonly ILog logger;

        public PerCheckBlHandler()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : perCheckPerCheckOnLoad
        ///</summary>
        ///<param name = "PerCheckBl"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>

        public IEnumerable<PerCheckBl> perCheckPerCheckOnLoad(PerCheckBl perCheckBl)
        {
            try
            {

                logger.Debug("Executing perCheckPerCheckOnLoad rest service handler.");
                string restApiPath = "PerCheckBlService/perCheckPerCheckOnLoad";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + perCheckBl);
                var response = HandlerUtil<PerCheckBl>.RestPostProcessor(restApiPath, perCheckBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.PerCheckBlHandler.perCheckPerCheckOnLoad():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : perCheckBlWhenNewFormInstance
        ///</summary>
        ///<param name = "PerCheckBl"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>

        public IEnumerable<PerCheckBl> perCheckBlWhenNewFormInstance(PerCheckBl perCheckBl)
        {
            try
            {

                logger.Debug("Executing perCheckBlWhenNewFormInstance rest service handler.");
                string restApiPath = "PerCheckBlService/perCheckBlWhenNewFormInstance";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + perCheckBl);
                var response = HandlerUtil<PerCheckBl>.RestPostProcessor(restApiPath, perCheckBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.PerCheckBlHandler.perCheckBlWhenNewFormInstance():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : perCheckBlWhenWindowClosed
        ///</summary>
        ///<param name = "PerCheckBl"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>

        public IEnumerable<PerCheckBl> perCheckBlWhenWindowClosed(PerCheckBl perCheckBl)
        {
            try
            {

                logger.Debug("Executing perCheckBlWhenWindowClosed rest service handler.");
                string restApiPath = "PerCheckBlService/perCheckBlWhenWindowClosed";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + perCheckBl);
                var response = HandlerUtil<PerCheckBl>.RestPostProcessor(restApiPath, perCheckBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.PerCheckBlHandler.perCheckBlWhenWindowClosed():" + e.Message);
                throw;
            }
        }


    }

}

