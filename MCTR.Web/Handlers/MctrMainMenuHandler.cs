///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;

namespace MCTR.Web.Handlers
{
    ///*********************************************************************
    ///<summary>
    ///MctrMainMenuHandler provides a level of abstraction for consuming the REST api.
    ///</summary>
    public class MctrMainMenuHandler
    {
         private readonly ILog logger;

        public MctrMainMenuHandler()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : buttonPalettebutAdminTblsWhenButtonPressed
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        public IEnumerable<MctrMainMenu> buttonPalettebutAdminTblsWhenButtonPressed(MctrMainMenu mctrMainMenu)
        {

            logger.Debug("Executing buttonPalettebutAdminTblsWhenButtonPressed rest service handler.");
            string restApiPath = "MctrMainMenuService/buttonPalettebutAdminTblsWhenButtonPressed";
            logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrMainMenu);
            var response = HandlerUtil<MctrMainMenu>.RestPostProcessor(restApiPath, mctrMainMenu);
            logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
            return response;
        }
        

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrMainMenuWhenTimerExpired
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        public IEnumerable<MctrMainMenu> mctrMainMenuWhenTimerExpired(MctrMainMenu mctrMainMenu)
        {

            logger.Debug("Executing mctrMainMenuWhenTimerExpired rest service handler.");
            string restApiPath = "MctrMainMenuService/mctrMainMenuWhenTimerExpired";
            logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrMainMenu);
            var response = HandlerUtil<MctrMainMenu>.RestPostProcessor(restApiPath, mctrMainMenu);
            logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
            return response;
        }


        public IEnumerable<Status> getDescription()
        {

            logger.Debug("Executing getDescription rest service handler.");
            string restApiPath = "MctrMainMenuService/getDescription";
            logger.Info("Invoking Rest API : " + restApiPath);
            var response = HandlerUtil<Status>.RestGetProcessor(restApiPath);
            logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
            return response;
        }


        public IEnumerable<MctrMainMenu> populateActionTree(MctrMainMenu mctrMainMenu)
        {

            logger.Debug("Executing populateActionTree rest service handler.");
            string restApiPath = "MctrMainMenuService/populateActionTree";
            logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrMainMenu);
            var response = HandlerUtil<MctrMainMenu>.RestPostProcessor(restApiPath, mctrMainMenu);
            logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
            return response;
        }

        public IEnumerable<MctrMainMenu> populateAssignedAtree(MctrMainMenu mctrMainMenu)
        {

            logger.Debug("Executing populateAssignedAtree rest service handler.");
            string restApiPath = "MctrMainMenuService/populateAssignedAtree";
            logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrMainMenu);
            var response = HandlerUtil<MctrMainMenu>.RestPostProcessor(restApiPath, mctrMainMenu);
            logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
            return response;
        }

    }

}
