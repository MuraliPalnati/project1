///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccess;
using MCTR.DataAccessInterface;

namespace MCTR.Business
///*********************************************************************
///<summary>
///jrnlweek_business is the business logic implementation class which holds all
///business logic in it.
///</summary>
{
    public class JrnlWeekBusiness : BaseBusiness, IJrnlWeekBusiness
    {
        private readonly ILog logger = null;
        IJrnlWeekRepository jrnlWeekRepository = new JrnlWeekRepository();

        public JrnlWeekBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekJrnlWeekOnLoad
        ///</summary>
        ///<returns>IEnumerable<bems> </returns>

        public IEnumerable<JrnlWeek> jrnlWeekJrnlWeekOnLoad(IEnumerable<string> bems)
        {
            try
            {
                logger.Info("Executing Business : jrnlWeekJrnlWeekOnLoad()");

                var response = jrnlWeekRepository.jrnlWeekJrnlWeekOnLoad(bems);
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
                

            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekWhenNewFormInstance
        ///</summary>
        ///<param name = "JrnlWeek"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>
        public IEnumerable<JrnlWeek> jrnlWeekWhenNewFormInstance(IEnumerable<JrnlWeek> jrnlWeek)
        {
            try
            {
                logger.Info("Executing Business : jrnlWeekWhenNewFormInstance()");
                
                var response = jrnlWeekRepository.jrnlWeekWhenNewFormInstance(jrnlWeek);
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekWhenNewFormInstance() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekWhenWindowClosed
        ///</summary>
        ///<param name = "JrnlWeek"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>
        public IEnumerable<JrnlWeek> jrnlWeekWhenWindowClosed(IEnumerable<JrnlWeek> jrnlWeek)
        {
            try
            {
                logger.Info("Executing Business : jrnlWeekWhenWindowClosed()");
                
                var response = jrnlWeekRepository.jrnlWeekWhenWindowClosed(jrnlWeek);
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekWhenWindowClosed() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
    }
}