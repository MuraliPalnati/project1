///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History : 
 using log4net;
using MCTR.DomainEntity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace MCTR.Web.Handlers
{
    public class AccountHandler
    {
         private readonly ILog logger;

        public AccountHandler()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : AccountDeatils
        ///</summary>
        ///<param name = "Role"></param>
        ///<returns>IEnumerable<Role> </returns>
        public IEnumerable<RoleList> AccountDeatils(RoleList roleList)
        {
            try
            {
                if (!string.IsNullOrEmpty(roleList.bems))
                {
                    logger.Debug("Executing AccountDeatils rest service handler.");
                    string restApiPath = "AccountDetailService/AccountDetail";
                    logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleList);
                    var response = HandlerUtil<RoleList>.RestPostProcessor(restApiPath, roleList);
                    logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                    return response;
                }
                else
                    return null;
            }
            catch (Exception exception)
            {

                throw exception;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : AccountDeatils
        ///</summary>
        ///<param name = "Role"></param>
        ///<returns>IEnumerable<Role> </returns>
        public IEnumerable<MCTREmployeev> UserDeatils(string BEMS)
        {
            try
            {
                if (!string.IsNullOrEmpty(BEMS))
                {
                    logger.Debug("Executing custTypeWhenNewFormInstance rest service handler.");
                    string restApiPath = "AccountDetailService/UserDetail";
                    logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + BEMS);
                    var response = HandlerUtil<MCTREmployeev>.RestgetProcessor(restApiPath, BEMS);
                    logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                    return response;
                }
                else
                    return null;
            }
            catch (Exception exception)
            {

                throw exception;
            }
        }
    }
}