///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using log4net;
using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using MCTR.Web.Security;
using System;
using System.Linq;
using System.Web.Mvc;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///TransTypeController is a web controller implementation for the 
    ///TransType screen.
    ///</summary>
    [CustomAuthorize]
    public class TransTypeController : Controller
    {
         private readonly ILog logger;
        public TransTypeController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : transtypeGetAll
        ///</summary>
        ///<returns>View</returns>
        [HttpGet]
        public ActionResult transtypeGetAll()
        {
            return View();
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : transTypeLists
        ///</summary>
        ///<returns>IEnumerable<TransType> </returns>
        /// 
        [HttpPost]
        public JsonResult transtypeonload(TransType TransTypeRequest)
        {
            try
            {
                TransTypeRequest.session_bems = SessionPerister.BEMSID;
                TransTypeHandler transTypeHandler = new TransTypeHandler();
                var transTypeResp = transTypeHandler.transtypeonload(TransTypeRequest);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = transTypeResp.Count(),
                    rows = transTypeResp,

                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from TransTypeController.transtypeonload() : " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : transTypecmponCdPostTextItem
        ///</summary>
        ///<param name = "TransType"></param>
        ///<returns>IEnumerable<TransType> </returns>

        [HttpPost]
        public JsonResult transTypecmponCdPostTextItem(TransType TransTypeRequest)
        {
            try
            {
                logger.Info("Executing transTypecmponCdPostTextItem() : " + TransTypeRequest);
                    TransTypeRequest.session_bems = SessionPerister.BEMSID;
                    TransTypeHandler transTypeHandler = new TransTypeHandler();
                    logger.Debug("Executing transTypeHandler.transTypecmponCdPostTextItem().");
                    var transTypeResp = transTypeHandler.transTypecmponCdPostTextItem(TransTypeRequest);
                    logger.Info("Response Received : " + transTypeResp);
                    return Json(transTypeResp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from TransTypeController.transTypecmponCdPostTextItem() : " + e.Message);
                throw e;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : transTypeWhenNewFormInstance
        ///</summary>
        ///<param name = "TransType"></param>
        ///<returns>IEnumerable<TransType> </returns>
        [HttpPost]
        public JsonResult transTypeWhenNewFormInstance(TransType TransTypeRequest)
        {
            try
            {
              
                TransTypeHandler LbrHandler = new TransTypeHandler();
                var result = LbrHandler.transTypeWhenNewFormInstance(TransTypeRequest);
                return Json(result, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from TransTypeController.transTypeWhenNewFormInstance() : " + e.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : transTypeWhenWindowClosed
        ///</summary>
        ///<param name = "TransType"></param>
        ///<returns>IEnumerable<TransType> </returns>
        [HttpPost]
        public ActionResult transTypeWhenWindowClosed(TransType TransTypeRequest)
        {
            try
            {
                logger.Info("Executing transTypeWhenWindowClosed() : " + TransTypeRequest);
                if (TransTypeRequest != null)
                {
                    TransTypeHandler transTypeHandler = new TransTypeHandler();
                    logger.Debug("Executing transTypeHandler.custTypeWhenWindowClosed().");
                    var transTypeResp = transTypeHandler.transTypeWhenWindowClosed(TransTypeRequest);
                    logger.Info("Response Received : " + transTypeResp);
                    return View("transtypeGetAll");
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from TransTypeController.transTypeWhenWindowClosed() : " + e.Message);

                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : transTypeEdit
        ///</summary>
        ///<param name = "TransType"></param>
        ///<returns>IEnumerable<TransType> </returns>
        [HttpPost]
        [ActionName("transTypeEdit")]
        public JsonResult transTypeEdit(TransType transTypeRequest, TransType editRowData)
        {
            try
            {
                logger.Info("Executing transTypeEdit : " + transTypeRequest);
                    var transTypeEdit = new TransTypeEdit();
                    transTypeEdit.EditedRow = transTypeRequest;
                    transTypeEdit.Row = editRowData;
                    TransTypeHandler transTypeHandler = new TransTypeHandler();
                    logger.Debug("Executing TransTypeHandler.EditCustType()");
                    var TransTypeResp = transTypeHandler.transTypeEdit(transTypeEdit);
                    logger.Info("Response Received : " + transTypeRequest);
                    return Json(TransTypeResp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from TransTypeController.transTypeEdit() : " + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : transTypeDelete
        ///</summary>
        ///<param name = "TransType"></param>
        ///<returns>IEnumerable<TransType> </returns>
        [HttpPost]
        [ActionName("transTypeDelete")]
        public ActionResult transTypeDelete(TransType transtype)
        {
            try
            {
                logger.Info("Executing transTypeDelete : " + transtype);
                if (transtype != null)
                {
                    TransTypeHandler transTypeHandler = new TransTypeHandler();
                    logger.Debug("Executing transTypeHandler.transTypeDelete()");
                    transTypeHandler.transTypeDelete(transtype);
                    logger.Info("Response Received : " + transtype);
                    return View("transtypeGetAll");
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from TransTypeController.transTypeDelete() : " + e.Message);
                throw;
            }
        }


        public JsonResult rolecheck()
        {
            string role;
            role = SessionPerister.ACCOUNTANTROLE;
            return Json(role, JsonRequestBehavior.AllowGet);

        }
    }
}
