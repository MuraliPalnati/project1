
///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :
/// 
using MCTR.BusinessInterface;
using MCTR.DataAccess;
using MCTR.DomainEntity;
using log4net;
using System.Collections.Generic;
using System;

namespace MCTR.Business
{
    public class MctrlogorigBusiness : BaseBusiness, IMctrLogBusiness
    {

         private readonly ILog logger;
        List<MctrLog> resultlist;
        MctrLog obj;
        IMCTRlogOrigChgRepository repository = new MCTRlogOrigChgRepository();
        public MctrlogorigBusiness()
        {
            resultlist = new List<MctrLog>();
            obj = new MctrLog();
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        public void initialize()
        {
            //TODO: initialize input from controller
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogOnInsert
        ///</summary>
        ///<param name = "mctrLogOrig"></param>
        ///<returns>IEnumerable<MctrLog> </returns>

        public IEnumerable<MctrLog> mctrLogOnInsert(IEnumerable<MctrLog> mctrLogOrig)
        {

            try
            {
                logger.Debug("Executing MCTR.Business.MctrlogorigBusiness.mctrLogOnInsert with input : ");
                var response = repository.mctrLogOnInsert(mctrLogOrig);
                logger.Debug("Response recieved from MCTR.Business.MctrlogorigBusiness.mctrLogOnInsert :" + response);
                return response;
            }
            catch (Exception ex)
            {
                logger.Debug("Exception Occured at MCTR.Business.MctrlogorigBusiness.mctrLogOnInsert:" + ex.Message);
                throw;
            }
           
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogWhenNewRecordInstance
        ///</summary>
        ///<param name = "logReq"></param>
        ///<returns>IEnumerable<logReq> </returns>

        public IEnumerable<MctrLog> mctrLogWhenNewRecordInstance(IEnumerable<MctrLog> logReq)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.MctrlogorigBusiness.mctrLogWhenNewRecordInstance with input : "+ logReq);
                var response = repository.mctrLogWhenNewRecordInstance(logReq);
                logger.Debug("Response recieved from MCTR.Business.MctrlogorigBusiness.mctrLogOnInsert :" + response);
                return response;
            }
            catch (Exception ex)
            {
                logger.Debug("Exception Occured at MCTR.Business.MctrlogorigBusiness.mctrLogWhenNewRecordInstance:" + ex.Message);
                throw;
            }
        
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogOrigWhenWindowClosed
        ///</summary>
        ///<param name = "mctrLogOrig"></param>
        ///<returns>IEnumerable<MctrLog> </returns>
        public void mctrLogOrigWhenWindowClosed(IEnumerable<MctrLog> mctrLogOrig)
        {
            //exit_form
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : Get
        ///</summary>
   
        public IEnumerable<MctrLog> Get()
        {
            try
            {
                logger.Debug("Executing MCTR.Business.MctrlogorigBusiness.Get");
                var response = repository.Get();
                logger.Debug("Response recieved from MCTR.Business.MctrlogorigBusiness.Get :" + response);
                return response;
            }
            catch (Exception ex)
            {
                logger.Debug("Exception Occured at MCTR.Business.MctrlogorigBusiness.Get:" + ex.Message);
                throw;
            }
            
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : validateBemsJson
        ///</summary>
        ///<param name = "mctrLog"></param>
        ///<returns>IEnumerable<MctrLog> </returns>
        public IEnumerable<MctrLog> validateBemsJson(IEnumerable<MctrLog> mctrLog)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.MctrlogorigBusiness.Get");
                var response = repository.validateBemsJson(mctrLog);
                logger.Debug("Response recieved from MCTR.Business.MctrlogorigBusiness.Get :" + response);
                return response;
            }
            catch (Exception ex)
            {
                logger.Debug("Exception Occured at MCTR.Business.MctrlogorigBusiness.Get:" + ex.Message);
                throw;
            }

        }
    }
}