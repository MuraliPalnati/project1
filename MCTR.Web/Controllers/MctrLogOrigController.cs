///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using log4net;
using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System;
using System.Collections.Generic;
using System.Web.Mvc;
using MCTR.Web.Security;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///MctrLogOrigController is a web controller implementation for the 
    ///MctrLogOrig screen.
    ///</summary>
    [CustomAuthorize]
    public class MctrLogOrigController : Controller
    {
         private readonly ILog logger;
        public MctrLogOrigController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogOnInsert
        ///</summary>
        ///<param name = "MctrLogOrig"></param>
        ///<returns>IEnumerable<MctrLogOrig> </returns>
        [HttpPost]
        public ActionResult mctrLogOnInsert(MctrLog mctrLogOrig)
        {
            try
            {
                logger.Info("Executing mctrLogOnInsert() : " + mctrLogOrig);
                if (mctrLogOrig != null)
                {
                    MctrLogHandler mctrLogOrigHandler = new MctrLogHandler();
                    logger.Debug("Executing mctrLogOrigHandler.mctrLogOnInsert().");
                    var mctrLogOrigResp = mctrLogOrigHandler.mctrLogOnInsert(mctrLogOrig);
                    logger.Info("Response Received : " + mctrLogOrigResp);
                    return Json(mctrLogOrigResp, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogOnInsert
        ///</summary>
        ///<param name = "MctrLogOrig"></param>
        ///<returns>IEnumerable<MctrLogOrig> </returns>
        [HttpPost]
        public ActionResult mctrLogWhenNewRecordInstance()
        {
            return View();
        }

        public ActionResult Texts()
        {
            return View();
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogOnInsert
        ///</summary>
        ///<param name = "MctrLogOrig"></param>
        ///<returns>IEnumerable<MctrLogOrig> </returns>
        [HttpPost]
        public JsonResult Postjson(MctrLog mctrLogOrigmctr)
        {
            try
            {
                mctrLogOrigmctr.Bems_Admin = SessionPerister.BEMSID;
                MctrLogHandler mctrLogOrigHandler = new MctrLogHandler();
                logger.Debug("Executing mctrLogOrigHandler.mctrLogWhenNewRecordInstance().");
                var mctrLogOrigResp = mctrLogOrigHandler.mctrLogWhenNewRecordInstance(mctrLogOrigmctr);
                logger.Info("Response Received : " + mctrLogOrigResp);
                return Json(mctrLogOrigResp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }

        [HttpPost]
        public JsonResult validateBemsJson(MctrLog mctrLogOrigmctr)
        {
            try
            {
                MctrLogHandler mctrLogOrigHandler = new MctrLogHandler();
                logger.Debug("Executing mctrLogOrigHandler.validateBemsJson().");
                var mctrLogOrigResp = mctrLogOrigHandler.validateBemsJson(mctrLogOrigmctr);
                logger.Info("Response Received : " + mctrLogOrigResp);
                return Json(mctrLogOrigResp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogOrigWhenWindowClosed
        ///</summary>
        ///<param name = "MctrLogOrig"></param>
        ///<returns>IEnumerable<MctrLogOrig> </returns>
        [HttpPost]
        public ActionResult mctrLogOrigWhenWindowClosed(MctrLog mctrLogOrig)
        {
            try
            {
                logger.Info("Executing mctrLogOrigWhenWindowClosed() : " + mctrLogOrig);
                if (mctrLogOrig != null)
                {
                    MctrLogHandler mctrLogOrigHandler = new MctrLogHandler();
                    logger.Debug("Executing mctrLogOrigHandler.mctrLogOrigWhenWindowClosed().");
                    var mctrLogOrigResp = mctrLogOrigHandler.mctrLogOrigWhenWindowClosed(mctrLogOrig);
                    logger.Info("Response Received : " + mctrLogOrigResp);
                    return View("MctrLog", mctrLogOrigResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : Get
        ///</summary>
        ///<param name = "MctrLogOrig"></param>
        ///<returns>IEnumerable<MctrLogOrig> </returns>
        [HttpGet]
        [ActionName("Get")]
        public ActionResult Get(MctrLog mctrLogOrig)
        {
            try
            {
                logger.Info("Executing mctrLogOrigWhenWindowClosed() : " + mctrLogOrig);
                if (mctrLogOrig != null)
                {
                    MctrLogHandler mctrLogOrigHandler = new MctrLogHandler();
                    logger.Debug("Executing mctrLogOrigHandler.mctrLogOrigWhenWindowClosed().");
                    var mctrLogOrigResp = mctrLogOrigHandler.Get();
                    logger.Info("Response Received : " + mctrLogOrigResp);
                    return View("MctrLog", mctrLogOrigResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : MCtrOrginatorReassignment
        ///</summary>
        ///<param name = "MctrLogOrig"></param>
        ///<returns>IEnumerable<MctrLogOrig> </returns>
        public ActionResult MCtrOrginatorReassignment()
        {
            try
            {
                List<MctrLog> list = new List<MctrLog>();
                MctrLog obj = new MctrLog() { Bems_Orig_New = "", Bems_Admin = "", Date_Changed = DateTime.Now, IsEnabled = false, Bems_Orig = "", Mctr_No = 0, reason = "", RespMsg = "" };
                list.Add(obj);
                return View(list);
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
    }
}
