
///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  


using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System;
using System.Web.Mvc;
using log4net;
using System.Linq;
using MCTR.Web.Security;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///PerCheckBlController is a web controller implementation for the 
    ///PerCheckBl screen.
    ///</summary>
    ///
    [CustomAuthorize]
    public class PerCheckBlController : Controller
    {
         private readonly ILog logger;


        public PerCheckBlController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }

        public ActionResult perCheckLoad(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView();
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : perCheckPerCheckOnLoad
        ///</summary>
        ///<param name = "PerCheckBl"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>

        public JsonResult perCheckPerCheckOnLoad(int MctrNo, short LineNo)
        {
            try
            {
                PerCheckBl perCheckBl = new PerCheckBl();
                perCheckBl.MCTR_NO = MctrNo;
                perCheckBl.LINE_NO = LineNo;
                PerCheckBlHandler perCheckBlHandler = new PerCheckBlHandler();
                logger.Debug("Executing perCheckBlHandler.perCheckPerCheckOnLoad().");
                var perCheckBlResp = perCheckBlHandler.perCheckPerCheckOnLoad(perCheckBl);
                logger.Info("Response Received : " + perCheckBlResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = perCheckBlResp.Count(),
                    rows = perCheckBlResp,
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : perCheckBlWhenNewFormInstance
        ///</summary>
        ///<param name = "PerCheckBl"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>

        [HttpPost]
        public ActionResult perCheckBlWhenNewFormInstance(PerCheckBl perCheckBl)
        {
            try
            {
                logger.Info("Executing perCheckBlWhenNewFormInstance() : " + perCheckBl);
                if (perCheckBl != null)
                {
                    PerCheckBlHandler perCheckBlHandler = new PerCheckBlHandler();
                    logger.Debug("Executing perCheckBlHandler.perCheckBlWhenNewFormInstance().");
                    var perCheckBlResp = perCheckBlHandler.perCheckBlWhenNewFormInstance(perCheckBl);
                    logger.Info("Response Received : " + perCheckBlResp);
                    return View("PerCheckBl", perCheckBlResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : perCheckBlWhenWindowClosed
        ///</summary>
        ///<param name = "PerCheckBl"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>

        [HttpPost]
        public ActionResult perCheckBlWhenWindowClosed(PerCheckBl perCheckBl)
        {
            try
            {
                logger.Info("Executing perCheckBlWhenWindowClosed() : " + perCheckBl);
                if (perCheckBl != null)
                {
                    PerCheckBlHandler perCheckBlHandler = new PerCheckBlHandler();
                    logger.Debug("Executing perCheckBlHandler.perCheckBlWhenWindowClosed().");
                    var perCheckBlResp = perCheckBlHandler.perCheckBlWhenWindowClosed(perCheckBl);
                    logger.Info("Response Received : " + perCheckBlResp);
                    return View("PerCheckBl", perCheckBlResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
    }
}
