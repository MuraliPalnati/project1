///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History : 

using log4net;
using MCTR.DomainEntity;
using MCTR.Business;
using MCTR.BusinessInterface;
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace MCTR.RESTService.Controllers
{
    [AllowAnonymous]
    public class LbrRateCyServiceController : ApiController
    {

         private readonly ILog logger;
        public LbrRateCyServiceController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesMctrIncrRatesOnLoad
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        [ActionName("LbrRateOnLoad")]
        public HttpResponseMessage LbrRateOnLoad([FromBody]IEnumerable<LbrRateCy> lbrRateCy)
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.Controllers.MctrIncrRatesService.mctrIncrRatesMctrIncrRatesOnLoad() with request : " + lbrRateCy);
                if (lbrRateCy != null)
                {
                    logger.Info("Executing Rest API : LbrRateOnLoad() with request : " + lbrRateCy);
                    ILbrRateCyLogic lbrRateCyBusiness = new LbrRateCyLogic();
                    var response = lbrRateCyBusiness.LbrRateOnLoad(lbrRateCy);
                    logger.Info("Response received from  MCTR.RESTService.Controllers.MctrIncrRatesService.mctrIncrRatesMctrIncrRatesOnLoad() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from  MCTR.RESTService.Controllers.MctrIncrRatesService.mctrIncrRatesMctrIncrRatesOnLoad()" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : RateCyWhenNewFormInstance
        ///</summary>
        ///<param name = "lbrRateCy"></param>
        ///<returns>HttpResponseMessage</returns>
        [HttpPost]
        [ActionName("lbrRateCyWhenNewFormInstance")]
        public HttpResponseMessage RateCyWhenNewFormInstance([FromBody]IEnumerable<LbrRateCy> lbrRateCy)
        {
            try
            {
                if (lbrRateCy != null)
                {
                    logger.Info("Executing Rest API : lbrRateCyWhenNewFormInstance() with request : " + lbrRateCy);
                    ILbrRateCyLogic lbrRateCyBusiness = new LbrRateCyLogic();
                    var response = lbrRateCyBusiness.lbrRateCyWhenNewFormInstance(lbrRateCy);
                    logger.Info("Response received from lbrRateCyBusiness.lbrRateCyWhenNewFormInstance() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }

        
    }
}

