///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using MCTR.Web.Handlers;
using System;
using System.Web.Mvc;
using log4net;
using MCTR.DomainEntity;
using MCTR.Web.Security;
using System.Linq;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///MctrJobStatusController is a web controller implementation for the 
    ///MctrJobStatus screen.
    ///</summary>
    [CustomAuthorize]
    public class MCTRJobStatusController : Controller
    {
         private readonly ILog logger;
        public MCTRJobStatusController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : MCTRJobStatusOnInsert
        ///</summary>
        ///<param name = "MctrJobStatus"></param>
        ///<returns>IEnumerable<MctrJobStatus> </returns>
        [HttpPost]
        public ActionResult MCTRJobStatusOnInsert(MCTRJobStatus MCTRJobstatus)
        {
            try
            {
                logger.Info("Executing MCTRJobStatusOnInsert() : " + MCTRJobstatus);
                if (MCTRJobstatus != null)
                {
                    MCTRJobStatusHandler MCTRJobStatusHandler = new MCTRJobStatusHandler();
                    logger.Debug("Executing MCTRJobStatusHandler.MCTRJobStatusOnInsert().");
                    var MCTRJobStatusResp = MCTRJobStatusHandler.MCTRJobStatusOnInsert(MCTRJobstatus);
                    logger.Info("Response Received : " + MCTRJobStatusResp);
                    return Json(MCTRJobStatusResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return RedirectToAction("Message");
                }
            }
            catch (Exception e)
            {
                logger.Info("Error from MCTRJobStatusHandler.MCTRJobStatusOnInsert(): " + e.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : GetData
        ///</summary>
        ///<returns>IEnumerable<MctrJobStatus> </returns>
        [HttpGet]
        public ActionResult GetData()
        {
            try
            {
                logger.Debug("Executing MCTRJobStatusHandler.GetData().");
                MCTRJobStatusHandler MCTRjobStatusHandler = new MCTRJobStatusHandler();
                var list = MCTRjobStatusHandler.GetData();
                logger.Info("Response Received : " + list);
                return View("GetData", list.First());
            }
            catch (Exception e)
            {
                logger.Info("Error from CTRjobStatusHandler.GetData(): " + e.Message);
                throw;
            }
        }


        [HttpPost]
        public JsonResult DateCheck(string dateThru,string dateFrom,string dateNow)
        {
            bool formatFlag=false;
            DateTime throughDate = Convert.ToDateTime(dateThru);
            DateTime fromDate = Convert.ToDateTime(dateFrom);
            DateTime nowDate = DateTime.Today;

            if(throughDate>fromDate && (fromDate>nowDate || fromDate==nowDate) && throughDate>nowDate)
            {
                formatFlag = true;
            }

            return Json(formatFlag, JsonRequestBehavior.AllowGet);
        }


    }
}
