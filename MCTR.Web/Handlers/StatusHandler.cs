///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using log4net;
using MCTR.DomainEntity;
using System;
using System.Collections.Generic;

namespace MCTR.Web.Handlers
{
    ///*********************************************************************
    ///<summary>
    ///StatusHandler provides a level of abstraction for consuming the REST api.
    ///</summary>
    public class StatusHandler
    {
         private readonly ILog logger;

        public StatusHandler()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : statusWhenNewFormInstance
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>Array<Status> </returns>
        public Status[] statusWhenNewFormInstance()
        {
            try
            {
                logger.Debug("Executing statusWhenNewFormInstance rest service handler.");
                string APIAction = "StatusService/statusWhenNewFormInstance";
                var Response = HandlerUtil<Status>.RestGetProcessor(APIAction, null);
                logger.Info("Response received form Rest API : " + APIAction + " : " + Response);
                return Response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.StatusHandler.statusWhenNewFormInstance():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : CreateHandlerPost
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status> </returns>
        public bool CreateHandlerPost(IEnumerable<Status> status)
        {
            try
            {
                logger.Debug("Executing statusWhenNewFormInstance rest service handler.");
                string APIAction = "StatusService/CreateStatus";
                HandlerUtil<Status>.PostProcessor(APIAction, status);
                return true;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.StatusHandler.CreateHandlerPost():" + e.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : DeleteHandlerPost
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status> </returns>
        public bool DeleteHandlerPost(Status status)
        {
            try
            {
                logger.Debug("Executing statusWhenNewFormInstance rest service handler.");
                string APIAction = "StatusService/DeleteStatus";
                HandlerUtil<Status>.RestPostProcessor(APIAction, status);
                return true;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.StatusHandler.DeleteHandlerPost():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : EditHandlerPost
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status> </returns>
        public bool EditHandlerPost(IEnumerable<Status> status)
        {
            try
            {
                logger.Debug("Executing statusWhenNewFormInstance rest service handler.");
                string APIAction = "StatusService/EditStatus";
                HandlerUtil<Status>.PostProcessor(APIAction, status);
                return true;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.StatusHandler.EditHandlerPost():" + e.Message);
                throw;
            }
        }
    }
}