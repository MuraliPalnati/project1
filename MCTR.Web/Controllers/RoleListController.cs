///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System.Web.Mvc;
using log4net;
using System.Collections.Generic;
using System;
using System.Linq;
using MCTR.Web.Security;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///RoleListController is a web controller implementation for the 
    ///RoleList screen.
    ///</summary>
    [CustomAuthorize]
    public class RoleListController : Controller
    {
         private readonly ILog logger;
        private readonly List<RoleList> ListRole = new List<RoleList>();
        RoleList roleListObj=null;

        public RoleListController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }


        ///*************************************************************
        ///<summary>
        ///Method Name : roleListRoleListOnLoad
        ///</summary>
        ///<returns>IEnumerable<RoleList> </returns>
        [HttpGet]
        public ActionResult roleListOnLoad()
        {
            return View();
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : roleListDataonLoad
        ///</summary>
        ///<param name = "roleList"></param>
        ///<returns>JsonResult</returns>
        //[AcceptVerbs(HttpVerbs.Get)]
        public JsonResult roleListDataonLoad(RoleList roleList)
        {
            try
            {
                    logger.Info("Executing MCTR.Web.RoleListController.roleListDataonLoad() with input :" + roleList);
                    RoleListHandler roleListHandler = new RoleListHandler();
                    var roleListResp = roleListHandler.roleListOnLoad(roleList);
                    logger.Info("Response received from MCTR.Web.RoleListController.roleListDataonLoad()" + roleListResp);
                    foreach (var item in roleListResp)
                    {
                        roleListObj = new RoleList();
                        roleListObj.accountant_role = item.accountant_role;
                        roleListObj.acctg_loc_cdm = item.acctg_loc_cdm;
                        roleListObj.active = item.active;
                        roleListObj.admin_role = item.admin_role;
                        roleListObj.bems = item.bems;
                        roleListObj.bus_unit = item.bus_unit;
                        roleListObj.component = item.component;
                        roleListObj.cost_acct_role = item.cost_acct_role;
                        roleListObj.deptno = item.deptno;
                        roleListObj.fin_control_role = item.fin_control_role;
                        roleListObj.first_name = item.first_name;
                        roleListObj.last_bu = item.last_bu;
                        roleListObj.last_dept = item.last_dept;
                        roleListObj.last_loc = item.last_loc;
                        roleListObj.last_logon = item.last_logon;
                        roleListObj.last_name = item.last_name;
                        roleListObj.lbr_acct_role = item.lbr_acct_role;
                        roleListObj.matl_acct_role = item.matl_acct_role;
                        roleListObj.sr_acct_role = item.sr_acct_role;
                    if (roleListObj.last_logon == null)
                    {
                        roleListObj.last_logon_days = "";
                    }
                    else
                    {
                        roleListObj.last_logon_days = Math.Round((DateTime.Now - (Convert.ToDateTime(item.last_logon))).TotalDays).ToString();
                    }
                        ListRole.Add(roleListObj);
                    }

                    var jsonData = new
                    {
                        total = 1,
                        page = 1,
                        records = ListRole.Count,
                        rows = ListRole,
                        userdata= ListRole
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
        
        ///*************************************************************
        ///<summary>
        ///Method Name : roleListbutRoleWhenButtonPressed
        ///</summary>
        ///<param name = "RoleList"></param>
        ///<returns>IEnumerable<RoleList> </returns>
        [HttpPost]
        public ActionResult roleListbutRoleWhenButtonPressed(RoleList roleList)
        {
            try
            {
                logger.Info("Executing MCTR.Web.RoleListController.roleListbutRoleWhenButtonPressed() with input :" + roleList);
                if (roleList != null)
                {
                    RoleListHandler roleListHandler = new RoleListHandler();
                    var roleListResp = roleListHandler.roleListbutRoleWhenButtonPressed(roleList);
                    logger.Info("Response received from MCTR.Web.RoleListController.roleListDataonLoad()" + roleListResp);
                    return View("RoleList", roleListResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListbutFindWhenButtonPressed
        ///</summary>
        ///<param name = "RoleList"></param>
        ///<returns>IEnumerable<RoleList> </returns>

        [HttpGet]
        public JsonResult roleListbutFindWhenButtonPressed(string lastName, string bemsId, string deprtId, string buUnit)
        {
            try
            {
                RoleList roleList = new RoleList();
                roleList.bems = bemsId;
                roleList.last_name = lastName;
                roleList.deptno = deprtId;
                roleList.component = buUnit;
                logger.Info("Executing MCTR.Web.RoleListController.roleListbutFindWhenButtonPressed() with input :" + roleList);
                if (roleList != null)
                {
                    RoleListHandler roleListHandler = new RoleListHandler();
                    var roleListResp = roleListHandler.roleListbutFindWhenButtonPressed(roleList);
                    logger.Info("Response received from MCTR.Web.RoleListController.roleListbutFindWhenButtonPressed()" + roleListResp);
                    foreach (var item in roleListResp)
                    {
                        roleListObj = new RoleList();
                        roleListObj.accountant_role = item.accountant_role;
                        roleListObj.acctg_loc_cdm = item.acctg_loc_cdm;
                        roleListObj.active = item.active;
                        roleListObj.admin_role = item.admin_role;
                        roleListObj.bems = item.bems;
                        roleListObj.component = item.bus_unit;
                        roleListObj.component = item.component;
                        roleListObj.cost_acct_role = item.cost_acct_role;
                        roleListObj.deptno = item.deptno;
                        roleListObj.fin_control_role = item.fin_control_role;
                        roleListObj.first_name = item.first_name;
                        roleListObj.last_bu = item.last_bu;
                        roleListObj.last_dept = item.last_dept;
                        roleListObj.last_loc = item.last_loc;
                        roleListObj.last_logon = item.last_logon;
                        roleListObj.last_name = item.last_name;
                        roleListObj.lbr_acct_role = item.lbr_acct_role;
                        roleListObj.matl_acct_role = item.matl_acct_role;
                        roleListObj.sr_acct_role = item.sr_acct_role;
                        roleListObj.last_logon_days = Math.Round((DateTime.Now - (Convert.ToDateTime(item.last_logon))).TotalDays).ToString(System.Globalization.CultureInfo.CurrentCulture);
                        ListRole.Add(roleListObj);
                    }
                    var jsonData = new
                    {
                        total = 1,
                        page = 1,
                        records = ListRole.Count(),
                        rows = ListRole,

                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListPostQuery
        ///</summary>
        ///<param name = "RoleList"></param>
        ///<returns>IEnumerable<RoleList> </returns>

        [HttpPost]
        public ActionResult roleListPostQuery(RoleList roleList)
        {
            try
            {
                logger.Info("Executing MCTR.Web.RoleListController.roleListPostQuery() with input :" + roleList);
                if (roleList != null)
                {
                    RoleListHandler roleListHandler = new RoleListHandler();
                    var roleListResp = roleListHandler.roleListPostQuery(roleList);
                    logger.Info("Response received from MCTR.Web.RoleListController.roleListPostQuery()" + roleListResp);
                    return View("RoleList", roleListResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListWhenNewFormInstance
        ///</summary>
        ///<param name = "RoleList"></param>
        ///<returns>IEnumerable<RoleList> </returns>
        [HttpPost]
        public ActionResult roleListWhenNewFormInstance(RoleList roleList)
        {
            try
            {
                logger.Info("Executing MCTR.Web.RoleListController.roleListWhenNewFormInstance() with input :" + roleList);
                if (roleList != null)
                {
                    RoleListHandler roleListHandler = new RoleListHandler();
                    var roleListResp = roleListHandler.roleListWhenNewFormInstance(roleList);
                    logger.Info("Response received from MCTR.Web.RoleListController.roleListWhenNewFormInstance()" + roleListResp);
                    return View("RoleList", roleListResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListWhenWindowClosed
        ///</summary>
        ///<param name = "RoleList"></param>
        ///<returns>IEnumerable<RoleList> </returns>

        [HttpPost]
        public ActionResult roleListWhenWindowClosed(RoleList roleList)
        {
            try
            {
                logger.Info("Executing MCTR.Web.RoleListController.roleListWhenWindowClosed() with input :" + roleList);
                if (roleList != null)
                {
                    RoleListHandler roleListHandler = new RoleListHandler();
                    var roleListResp = roleListHandler.roleListWhenWindowClosed(roleList);
                    logger.Info("Response received from MCTR.Web.RoleListController.roleListWhenWindowClosed()" + roleListResp);
                    return View("RoleList", roleListResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
    }
}
