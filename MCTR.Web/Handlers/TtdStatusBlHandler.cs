///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///
 
///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using System.Threading.Tasks;
using System.Web.Mvc;
using System.Net.Http;
using System.Net.Http.Headers;

using log4net;

using MCTR.DomainEntity;

namespace MCTR.Web.Handlers
{
///*********************************************************************
///<summary>
///TtdStatusBlHandler provides a level of abstraction for consuming the REST api.
///</summary>
  public class TtdStatusBlHandler
  {
     private readonly ILog logger;
    
    public TtdStatusBlHandler()
    {
      logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
    }
        
     
    ///*************************************************************
    ///<summary>
    ///Method Name : lineItemLineItemOnLoad
    ///</summary>
    ///<param name = "TtdStatusBl"></param>
    ///<returns>IEnumerable<TtdStatusBl> </returns>

    public IEnumerable<TtdStatusBl> lineItemLineItemOnLoad(TtdStatusBl ttdStatusBl)
        {
            try
            {

                logger.Debug("Executing MCTR.Web.Handlers.TtdStatusBlHandler.LineItemOnLoad rest service handler.");
                string restApiPath = "TtdStatusBl/lineItemLineItemOnLoad";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + ttdStatusBl);
                var response = HandlerUtil<TtdStatusBl>.RestPostProcessor(restApiPath, ttdStatusBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            } 
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Handlers.TtdStatusBlHandler.LineItemOnLoad rest service handler." + e.Message);
                throw;
            }
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : ttdStatusBlWhenWindowClosed
    ///</summary>
    ///<param name = "TtdStatusBl"></param>
    ///<returns>IEnumerable<TtdStatusBl> </returns>

    public IEnumerable<TtdStatusBl> ttdStatusBlWhenWindowClosed(TtdStatusBl ttdStatusBl)
        {
            try
            {
                logger.Debug("Executing MCTR.Web.Handlers.TtdStatusBlHandler.ttdStatusBlWhenWindowClosed rest service handler");
                string restApiPath = "TtdStatusBl/ttdStatusBlWhenWindowClosed";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + ttdStatusBl);
                var response = HandlerUtil<TtdStatusBl>.RestPostProcessor(restApiPath, ttdStatusBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Handlers.TtdStatusBlHandler.ttdStatusBlWhenWindowClosed rest service handler." + e.Message);
                throw;
            }
    }
        
    
  }

}

