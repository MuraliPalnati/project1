///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  


using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using System.Text;
using log4net;
using MCTR.Web.Util;
using System.Data;
using AutoMapper;
using MCTR.Web.Security;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///MctrIncrRatesController is a web controller implementation for the 
    ///MctrIncrRates screen.
    ///</summary>
    ///
    [CustomAuthorize]
    public class MctrIncrRatesController : Controller
    {
         private readonly ILog logger;


        public MctrIncrRatesController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }


        ///*************************************************************
        ///<summary>
        ///Method Name : selectionfYearOnError
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult selectionfYearOnError(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.MctrIncrRates.selectionfYearOnError(): " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    //message("prior year must be a numeric value between 2000 and 2099")
                    return null;
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.selectionfYearOnError() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : selectionbutRatesListWhenButtonPressed
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        //[HttpPost]
        public FileResult selectionbutRatesListWhenButtonPressed(int f_year)
        {
            MctrIncrRates mctrIncrRates = new MctrIncrRates();
            mctrIncrRates.f_year = f_year;
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.MctrIncrRates.selectionbutRatesListWhenButtonPressed(): " + mctrIncrRates);
                MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                logger.Debug("Executing  MCTR.Web.Controllers.MctrIncrRates.selectionbutRatesListWhenButtonPressed().");
                var mctrIncrRatesResp = mctrIncrRatesHandler.selectionbutRatesListWhenButtonPressed(mctrIncrRates).ToList();

                var c = (mctrIncrRates.f_year == null) ? "ALL" : mctrIncrRates.f_year.ToString();
                var responseexcel = Mapper.DynamicMap<IEnumerable<MctrIncrRates>, IEnumerable<MCTRIncrRatesExcel>>(mctrIncrRatesResp).ToList<MCTRIncrRatesExcel>();

                Download obj = new Download();
                DataTable[] dt = new DataTable[6];

                DataTable d1 = new DataTable();
                string msg = @"MCTR PRIOR YEAR INCREMENTAL RATES LISTING  (AS OF "+DateTime.Now.ToString("MM/dd/yy/ hh:mm:ss tt") + ")";
                d1.Columns.Add(msg);
                dt[0] = d1;
                d1.Dispose();
                DataTable d2 = new DataTable();
                string msg1 = @"YEAR:" + c;
                d2.Columns.Add(msg1);
                dt[1] = d2;
                d2.Dispose();
                dt[2] = obj.ToDataTable<MCTRIncrRatesExcel>(responseexcel);

                DataTable d3 = new DataTable();
                d3.Columns.Add("MCTR RATE TABLE selection was based on the criteria listed below.");
                dt[3] = d3;
                d3.Dispose();
                DataTable d4 = new DataTable();
                string msg4 = "\""+@"SELECT CMPON_CD, FISCAL_YEAR, RSC_POOL, SUM(RATE) FROM MCTR_INCR_RATES WHERE FISCAL_YEAR ='" + c + "'GROUP BY CMPON_CD, FISCAL_YEAR, RSC_POOL ORDER BY CMPON_CD ASC, FISCAL_YEAR ASC, RSC_POOL ASC;"+ "\"";
                d4.Columns.Add(msg4);
                dt[4] = d4;
                d4.Dispose();
                DataTable d5 = new DataTable();
                d5.Columns.Add("End of Listing");
                dt[5] = d5;
                d5.Dispose();
                string filename = "xtrt-MCTR-PYR-INCR-RATES" + DateTime.Now.ToString("yyyyMMddTHHmmss");
                var result = obj.ToCsv(dt, true);
                byte[] fileBytes = Encoding.ASCII.GetBytes(result);

                var cd = new System.Net.Mime.ContentDisposition
                {
                    FileName = filename + ".csv",
                    Inline = false,
                };
                Response.ContentType = "application/vnd.ms-excel";
                Response.AppendHeader("Content-Disposition", cd.ToString());
                return File(fileBytes, filename);
            }
            catch (Exception e)
            {
                logger.Error("Error from  MCTR.Web.Controllers.MctrIncrRates.selectionbutRatesListWhenButtonPressed() " + e.Message);
                throw;
            }
        }

        [HttpGet]
        public ActionResult IncrRates()
        {
            return View();
        }



        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesMctrIncrRatesOnLoad
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public JsonResult mctrIncrRatesMctrIncrRatesOnLoad(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesMctrIncrRatesOnLoad() : " + mctrIncrRates);


                mctrIncrRates.session_bems = SessionPerister.BEMSID;
                MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                logger.Debug("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesMctrIncrRatesOnLoad()");
                var mctrIncrRatesResp = mctrIncrRatesHandler.mctrIncrRatesMctrIncrRatesOnLoad(mctrIncrRates);
                logger.Info("Response Received : " + mctrIncrRatesResp);

                var JsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrIncrRatesResp.Count(),
                    rows = mctrIncrRatesResp,
                    userdata = mctrIncrRatesResp
                };
                return Json(JsonData, JsonRequestBehavior.AllowGet);

            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesMctrIncrRatesOnLoad() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatescmponCdPostTextItem
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public JsonResult mctrIncrRatescmponCdPostTextItem(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatescmponCdPostTextItem(): " + mctrIncrRates);
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    mctrIncrRates.session_bems = SessionPerister.BEMSID;
                    logger.Debug("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatescmponCdPostTextItem()");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.mctrIncrRatescmponCdPostTextItem(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return Json(mctrIncrRatesResp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatescmponCdPostTextItem(): " + e.Message);

                throw e;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatescascadeFlgWhenMouseClick
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult mctrIncrRatescascadeFlgWhenMouseClick(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatescascadeFlgWhenMouseClick() : " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatescascadeFlgWhenMouseClick():");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.mctrIncrRatescascadeFlgWhenMouseClick(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatescascadeFlgWhenMouseClick() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesPreUpdate
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult mctrIncrRatesPreUpdate(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesPreUpdate(): " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesPreUpdate():.");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.mctrIncrRatesPreUpdate(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();

                }
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesPreUpdate(): " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesPostQuery
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult mctrIncrRatesPostQuery(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesPostQuery() " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing  MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesPostQuery()");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.mctrIncrRatesPostQuery(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from  MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesPostQuery() " + e.Message);
                throw;

            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutildummyWhenButtonPressed
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult webutildummyWhenButtonPressed(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing webutildummyWhenButtonPressed() : " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing mctrIncrRatesHandler.webutildummyWhenButtonPressed().");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.webutildummyWhenButtonPressed(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from  MCTRCompRates.webutildummyWhenButtonPressed() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilClientinfoFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult webutilwebutilClientinfoFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing webutilwebutilClientinfoFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing mctrIncrRatesHandler.webutilwebutilClientinfoFunctionsWhenCustomItemEvent().");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.webutilwebutilClientinfoFunctionsWhenCustomItemEvent(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from  MCTRCompRates.webutildummyWhenButtonPressed() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilFileFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult webutilwebutilFileFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing webutilwebutilFileFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing mctrIncrRatesHandler.webutilwebutilFileFunctionsWhenCustomItemEvent().");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.webutilwebutilFileFunctionsWhenCustomItemEvent(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from  MCTRCompRates.webutilwebutilFileFunctionsWhenCustomItemEvent() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilHostFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult webutilwebutilHostFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing webutilwebutilHostFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing mctrIncrRatesHandler.webutilwebutilHostFunctionsWhenCustomItemEvent().");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.webutilwebutilHostFunctionsWhenCustomItemEvent(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from  MCTRCompRates.webutilwebutilHostFunctionsWhenCustomItemEvent() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilSessionFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>
        [HttpPost]
        public ActionResult webutilwebutilSessionFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing webutilwebutilSessionFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing mctrIncrRatesHandler.webutilwebutilSessionFunctionsWhenCustomItemEvent().");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.webutilwebutilSessionFunctionsWhenCustomItemEvent(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from  MCTRCompRates.webutilwebutilSessionFunctionsWhenCustomItemEvent() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilFiletransferFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult webutilwebutilFiletransferFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing webutilwebutilFiletransferFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing mctrIncrRatesHandler.webutilwebutilFiletransferFunctionsWhenCustomItemEvent().");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.webutilwebutilFiletransferFunctionsWhenCustomItemEvent(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from  MCTRCompRates.webutilwebutilFiletransferFunctionsWhenCustomItemEvent() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilOleFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>
        [HttpPost]
        public ActionResult webutilwebutilOleFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing webutilwebutilOleFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing mctrIncrRatesHandler.webutilwebutilOleFunctionsWhenCustomItemEvent().");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.webutilwebutilOleFunctionsWhenCustomItemEvent(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from  MCTRCompRates.webutilwebutilOleFunctionsWhenCustomItemEvent() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilCApiFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult webutilwebutilCApiFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing webutilwebutilCApiFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing mctrIncrRatesHandler.webutilwebutilCApiFunctionsWhenCustomItemEvent().");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.webutilwebutilCApiFunctionsWhenCustomItemEvent(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from  MCTRCompRates.webutilwebutilCApiFunctionsWhenCustomItemEvent() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilBrowserFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult webutilwebutilBrowserFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing webutilwebutilBrowserFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing mctrIncrRatesHandler.webutilwebutilBrowserFunctionsWhenCustomItemEvent().");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.webutilwebutilBrowserFunctionsWhenCustomItemEvent(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from  MCTRCompRates.webutilwebutilBrowserFunctionsWhenCustomItemEvent() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpGet]
        public JsonResult mctrIncrRatesWhenNewFormInstance()
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesWhenNewFormInstance() : ");

                MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                logger.Debug("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesWhenNewFormInstance()");
                var mctrIncrRatesResp = mctrIncrRatesHandler.mctrIncrRatesWhenNewFormInstance();
                logger.Info("Response Received : " + mctrIncrRatesResp);
                return Json(mctrIncrRatesResp, JsonRequestBehavior.AllowGet);

            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesWhenNewFormInstance() " + e.Message);
                throw;
            }
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesOnError
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult mctrIncrRatesOnError(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesOnError() " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesOnError()");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.mctrIncrRatesOnError(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("MctrIncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesOnError()" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesWhenWindowClosed
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        [HttpPost]
        public ActionResult mctrIncrRatesWhenWindowClosed(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesWhenWindowClosed(): " + mctrIncrRates);
                if (mctrIncrRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesWhenWindowClosed()");
                    var mctrIncrRatesResp = mctrIncrRatesHandler.mctrIncrRatesWhenWindowClosed(mctrIncrRates);
                    logger.Info("Response Received : " + mctrIncrRatesResp);
                    return View("IncrRates", mctrIncrRatesResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesWhenWindowClosed()" + e.Message);
                throw;
            }
        }

        public ActionResult updateCompRates(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.MctrIncrRates.updateCompRates() : " + mctrCompRates);
                if (mctrCompRates != null)
                {
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.MctrIncrRates.updateCompRates()");
                    var mctrCompRatesResp = mctrIncrRatesHandler.updateCompRates(mctrCompRates);
                    logger.Info("Response Received : " + mctrCompRatesResp);
                    return View("MctrIncrRates", mctrCompRates);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.updateCompRates()" + e.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : Create
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>
        [HttpPost]
        public JsonResult Create(MctrIncrRates mctrIncrRates)
        {
            try
            {


                MctrIncrRatesHandler IncrHandler = new MctrIncrRatesHandler();
                var result = IncrHandler.CreateHandlerPost(mctrIncrRates);
                return Json(result, JsonRequestBehavior.AllowGet);            
            }
            catch (Exception)
            {
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : Deletes
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>
        [HttpPost]
        public JsonResult Deletes(MctrIncrRates mctrIncrRates)
        {
            try
            {
                
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    var result=mctrIncrRatesHandler.DeleteHandlerPost(mctrIncrRates);
                    return Json(result, JsonRequestBehavior.AllowGet);

            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : Edits
        ///</summary>
        ///<param name = "Edits"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>


        [HttpPost]
        public JsonResult Edits(MctrIncrRates IncrRatesRequest, MctrIncrRates editRowData)
        {
            try
            {
                    var incrRateEdit = new IncrRateEdit();
                    incrRateEdit.EditedRow = IncrRatesRequest;
                    incrRateEdit.Row = editRowData;
                    MctrIncrRatesHandler mctrIncrRatesHandler = new MctrIncrRatesHandler();
                    var IncrRateResp = mctrIncrRatesHandler.EditHandlerPost(incrRateEdit);
                    return Json(IncrRateResp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }

        }
    }
}

