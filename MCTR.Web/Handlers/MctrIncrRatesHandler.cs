///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Web.Mvc;
using log4net;
using MCTR.DomainEntity;

namespace MCTR.Web.Handlers
{
    ///*********************************************************************
    ///<summary>
    ///MctrIncrRatesHandler provides a level of abstraction for consuming the REST api.
    ///</summary>
    public class MctrIncrRatesHandler
    {
         private readonly ILog logger;

        public MctrIncrRatesHandler()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : selectionfYearOnError
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> selectionfYearOnError(MctrIncrRates mctrIncrRates)
        {
            try {
                logger.Debug("Executing selectionfYearOnError rest service handler.");
                string restApiPath = "MctrIncrRatesService/selectionfYearOnError";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : selectionbutRatesListWhenButtonPressed
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> selectionbutRatesListWhenButtonPressed(MctrIncrRates mctrIncrRates)
        {
            try {

                logger.Debug("Executing selectionbutRatesListWhenButtonPressed rest service handler.");
                string restApiPath = "MctrIncrRatesService/selectionbutRatesListWhenButtonPressed";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesMctrIncrRatesOnLoad
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> mctrIncrRatesMctrIncrRatesOnLoad(MctrIncrRates mctrIncrRates)
        {
            try {
                logger.Debug("Executing mctrIncrRatesMctrIncrRatesOnLoad rest service handler.");
                string restApiPath = "MctrIncrRatesService/mctrIncrRatesMctrIncrRatesOnLoad";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatescmponCdPostTextItem
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> mctrIncrRatescmponCdPostTextItem(MctrIncrRates mctrIncrRates)
        {
            try {
                logger.Debug("Executing mctrIncrRatescmponCdPostTextItem rest service handler.");
                string restApiPath = "MctrIncrRatesService/mctrIncrRatescmponCdPostTextItem";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatescascadeFlgWhenMouseClick
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> mctrIncrRatescascadeFlgWhenMouseClick(MctrIncrRates mctrIncrRates)
        {
            try {
                logger.Debug("Executing mctrIncrRatescascadeFlgWhenMouseClick rest service handler.");
                string restApiPath = "MctrIncrRatesService/mctrIncrRatescascadeFlgWhenMouseClick";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesPreUpdate
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> mctrIncrRatesPreUpdate(MctrIncrRates mctrIncrRates)
        {
            try {
                logger.Debug("Executing mctrIncrRatesPreUpdate rest service handler.");
                string restApiPath = "MctrIncrRatesService/mctrIncrRatesPreUpdate";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesPostQuery
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> mctrIncrRatesPostQuery(MctrIncrRates mctrIncrRates)
        {
            try {
                logger.Debug("Executing mctrIncrRatesPostQuery rest service handler.");
                string restApiPath = "MctrIncrRatesService/mctrIncrRatesPostQuery";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }

            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutildummyWhenButtonPressed
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> webutildummyWhenButtonPressed(MctrIncrRates mctrIncrRates)
        {
            try {
                logger.Debug("Executing webutildummyWhenButtonPressed rest service handler.");
                string restApiPath = "MctrIncrRatesService/webutildummyWhenButtonPressed";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilClientinfoFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> webutilwebutilClientinfoFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Debug("Executing webutilwebutilClientinfoFunctionsWhenCustomItemEvent rest service handler.");
                string restApiPath = "MctrIncrRatesService/webutilwebutilClientinfoFunctionsWhenCustomItemEvent";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilFileFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> webutilwebutilFileFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Debug("Executing webutilwebutilFileFunctionsWhenCustomItemEvent rest service handler.");
                string restApiPath = "MctrIncrRatesService/webutilwebutilFileFunctionsWhenCustomItemEvent";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilHostFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> webutilwebutilHostFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try {
                logger.Debug("Executing webutilwebutilHostFunctionsWhenCustomItemEvent rest service handler.");
                string restApiPath = "MctrIncrRatesService/webutilwebutilHostFunctionsWhenCustomItemEvent";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilSessionFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> webutilwebutilSessionFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Debug("Executing webutilwebutilSessionFunctionsWhenCustomItemEvent rest service handler.");
                string restApiPath = "MctrIncrRatesService/webutilwebutilSessionFunctionsWhenCustomItemEvent";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilFiletransferFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> webutilwebutilFiletransferFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Debug("Executing webutilwebutilFiletransferFunctionsWhenCustomItemEvent rest service handler.");
                string restApiPath = "MctrIncrRatesService/webutilwebutilFiletransferFunctionsWhenCustomItemEvent";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilOleFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> webutilwebutilOleFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try {
                logger.Debug("Executing webutilwebutilOleFunctionsWhenCustomItemEvent rest service handler.");
                string restApiPath = "MctrIncrRatesService/webutilwebutilOleFunctionsWhenCustomItemEvent";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilCApiFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> webutilwebutilCApiFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Debug("Executing webutilwebutilCApiFunctionsWhenCustomItemEvent rest service handler.");
                string restApiPath = "MctrIncrRatesService/webutilwebutilCApiFunctionsWhenCustomItemEvent";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }

            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilBrowserFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> webutilwebutilBrowserFunctionsWhenCustomItemEvent(MctrIncrRates mctrIncrRates)
        {
            try {
                logger.Debug("Executing webutilwebutilBrowserFunctionsWhenCustomItemEvent rest service handler.");
                string restApiPath = "MctrIncrRatesService/webutilwebutilBrowserFunctionsWhenCustomItemEvent";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> mctrIncrRatesWhenNewFormInstance()
        {
            try
            {
                logger.Debug("Executing mctrIncrRatesWhenNewFormInstance rest service handler.");
                string restApiPath = "MctrIncrRatesService/mctrIncrRatesWhenNewFormInstance";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : ");
                var response = HandlerUtil<MctrIncrRates>.RestGetProcessor(restApiPath);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesOnError
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> mctrIncrRatesOnError(MctrIncrRates mctrIncrRates)
        {
            try {
                logger.Debug("Executing mctrIncrRatesOnError rest service handler.");
                string restApiPath = "MctrIncrRatesService/mctrIncrRatesOnError";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesWhenWindowClosed
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> mctrIncrRatesWhenWindowClosed(MctrIncrRates mctrIncrRates)
        {
            try {
                logger.Debug("Executing mctrIncrRatesWhenWindowClosed rest service handler.");
                string restApiPath = "MctrIncrRatesService/mctrIncrRatesWhenWindowClosed";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrIncrRates);
                var response = HandlerUtil<MctrIncrRates>.RestPostProcessor(restApiPath, mctrIncrRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }

        public IEnumerable<MctrCompRates> updateCompRates(MctrCompRates mctrcomprates)
        {
            try
            {
                logger.Debug("Executing updateCompRates rest service handler.");
                string restApiPath = "MctrIncrRatesService/updateCompRates";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrcomprates);
                var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrcomprates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.Web.Handlers.MctrLogHandler.mctrLogWhenNewRecordInstance :" + e.Message);
                throw;
            }
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : CreateHandlerPost
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> CreateHandlerPost(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Debug("Executing statusWhenNewFormInstance rest service handler.");
                string APIAction = "MctrIncrRatesService/Create";
                var Response = HandlerUtil<MctrIncrRates>.RestPostProcessor(APIAction, mctrIncrRates);
                return Response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.MctrIncrRatesHandler.CreateHandlerPost():" + e.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : DeleteHandlerPost
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>
        public bool DeleteHandlerPost(MctrIncrRates mctrIncrRates)
        {
            try
            {
                logger.Debug("Executing statusWhenNewFormInstance rest service handler.");
                string APIAction = "MctrIncrRatesService/DeleteIncr";
                HandlerUtil<MctrIncrRates>.RestPostProcessor(APIAction, mctrIncrRates);
                return true;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.MctrIncrRatesHandler.DeleteHandlerPost():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : EditHandlerPost
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>
        public IEnumerable<IncrRateEdit> EditHandlerPost(IncrRateEdit mctrIncrRates)
        {
            try
            {
                logger.Debug("Executing statusWhenNewFormInstance rest service handler.");
                string APIAction = "MctrIncrRatesService/EditIncr";
                var Response = HandlerUtil<IncrRateEdit>.RestPostProcessor(APIAction, mctrIncrRates);
                return Response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.MctrIncrRatesHandler.EditHandlerPost():" + e.Message);
                throw;
            }
        }

    }

}

