///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using log4net;

using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.Business;

namespace MCTR.RESTService.Controllers
///*********************************************************************
///<summary>
///JrnlWeekServiceController is a Rest controller implementation  
///which acts as a wrapper to the JrnlWeekBusiness implementation and
/// provides api path for each methods exposed.
///</summary>
{

    public class JrnlWeekServiceController : ApiController
    {

         private readonly ILog logger;
      

        public JrnlWeekServiceController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        

        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekJrnlWeekOnLoad
        ///</summary>
        ///<param name = "JrnlWeek"></param>
        ///<returns>IEnumerable<JrnlWeek> </returns>

        [HttpPost]
        [ActionName("jrnlWeekJrnlWeekOnLoad")]
        public HttpResponseMessage jrnlWeekJrnlWeekOnLoad([FromBody]IEnumerable<string> bems)
        {
            try
            {
                logger.Info("Executing Rest API : jrnlWeekJrnlWeekOnLoad() with request : " +bems);
                
                IJrnlWeekBusiness jrnlWeekBusiness = new JrnlWeekBusiness();
                var response = jrnlWeekBusiness.jrnlWeekJrnlWeekOnLoad(bems);
                logger.Info("Response received from jrnlWeekBusiness.jrnlWeekJrnlWeekOnLoad() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekWhenNewFormInstance
        ///</summary>
        ///<param name = "JrnlWeek"></param>
        ///<returns>IEnumerable<JrnlWeek> </returns>


        [HttpPost]
        [ActionName("jrnlWeekWhenNewFormInstance")]
        public HttpResponseMessage jrnlWeekWhenNewFormInstance([FromBody]IEnumerable<JrnlWeek> jrnlWeek)
        {
            try
            {
                logger.Info("Executing Rest API : jrnlWeekWhenNewFormInstance() with request : " + jrnlWeek);
                if (jrnlWeek != null)
                {
                    IJrnlWeekBusiness jrnlWeekBusiness = new JrnlWeekBusiness();
                    var response = jrnlWeekBusiness.jrnlWeekWhenNewFormInstance(jrnlWeek);
                    logger.Info("Response received from jrnlWeekBusiness.jrnlWeekWhenNewFormInstance() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekWhenWindowClosed
        ///</summary>
        ///<param name = "JrnlWeek"></param>
        ///<returns>IEnumerable<JrnlWeek> </returns>


        [HttpPost]
        [ActionName("jrnlWeekWhenWindowClosed")]
        public HttpResponseMessage jrnlWeekWhenWindowClosed([FromBody]IEnumerable<JrnlWeek> jrnlWeek)
        {
            try
            {
                logger.Info("Executing Rest API : jrnlWeekWhenWindowClosed() with request : " + jrnlWeek);
                if (jrnlWeek != null)
                {
                    IJrnlWeekBusiness jrnlWeekBusiness = new JrnlWeekBusiness();
                    var response = jrnlWeekBusiness.jrnlWeekWhenWindowClosed(jrnlWeek);
                    logger.Info("Response received from jrnlWeekBusiness.jrnlWeekWhenWindowClosed() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);

            }
        }


    }

}

