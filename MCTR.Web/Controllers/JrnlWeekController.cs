
///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  


using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System;
using System.Web.Mvc;
using log4net;
using MCTR.Web.Security;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///JrnlWeekController is a web controller implementation for the 
    ///JrnlWeek screen.
    ///</summary>
    ///
    [CustomAuthorize]
    public class JrnlWeekController : Controller
    {
         private readonly ILog logger;
        private readonly Role role = new Role();
        private readonly JrnlWeek jrnlweek = new JrnlWeek();
       

        public JrnlWeekController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }  
        public ActionResult JournalsInProcess()
        {
            return View();
        }

        public ActionResult JournalsInProcessPopUp()
        {
            return PartialView();
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekJrnlWeekOnLoad
        ///</summary>
        ///<returns>IEnumerable<JrnlWeek> </returns>

        [HttpGet]
        public JsonResult jrnlWeekJrnlWeekOnLoad()
        {
            string bems = SessionPerister.BEMSID;
            try
            {
                logger.Info("Executing jrnlWeekJrnlWeekOnLoad()");
                
                JrnlWeekHandler jrnlWeekHandler = new JrnlWeekHandler();
                logger.Debug("Executing jrnlWeekHandler.jrnlWeekJrnlWeekOnLoad().");
                var jrnlWeekResp = jrnlWeekHandler.jrnlWeekJrnlWeekOnLoad(bems);
                logger.Info("Response Received : " + jrnlWeekResp);
                return Json(jrnlWeekResp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekWhenNewFormInstance
        ///</summary>
        ///<param name = "JrnlWeek"></param>
        ///<returns>IEnumerable<JrnlWeek> </returns>

        [HttpPost]
        public ActionResult jrnlWeekWhenNewFormInstance(JrnlWeek jrnlWeek)
        {
            try
            {
                logger.Info("Executing jrnlWeekWhenNewFormInstance() : " + jrnlWeek);
                if (jrnlWeek != null)
                {
                    JrnlWeekHandler jrnlWeekHandler = new JrnlWeekHandler();
                    logger.Debug("Executing jrnlWeekHandler.jrnlWeekWhenNewFormInstance().");
                    var jrnlWeekResp = jrnlWeekHandler.jrnlWeekWhenNewFormInstance(jrnlWeek);
                    logger.Info("Response Received : " + jrnlWeekResp);
                    return Json(jrnlWeekResp, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
        
        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekWhenWindowClosed
        ///</summary>
        ///<param name = "JrnlWeek"></param>
        ///<returns>IEnumerable<JrnlWeek> </returns>

        [HttpPost]
        public ActionResult jrnlWeekWhenWindowClosed(JrnlWeek jrnlWeek)
        {
            try
            {
                logger.Info("Executing jrnlWeekWhenWindowClosed() : " + jrnlWeek);
                if (jrnlWeek != null)
                {
                    JrnlWeekHandler jrnlWeekHandler = new JrnlWeekHandler();
                    logger.Debug("Executing jrnlWeekHandler.jrnlWeekWhenWindowClosed().");
                    var jrnlWeekResp = jrnlWeekHandler.jrnlWeekWhenWindowClosed(jrnlWeek);
                    logger.Info("Response Received : " + jrnlWeekResp);
                    return View("JrnlWeek", jrnlWeekResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }

            
        }
       
    }
}
