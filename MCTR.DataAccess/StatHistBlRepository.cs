///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Linq;
using MCTR.DataEntity;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using System.Data;
using log4net;
using Oracle.ManagedDataAccess.Client;

using MCTR.DomainEntity;

using MCTR.DataAccessInterface;
using System.Diagnostics;

namespace MCTR.DataAccess
{
    ///*********************************************************************
    ///<summary>
    ///StatHistBlRepository is a data access implementation which holds all 
    ///the data access logic in it.
    ///</summary>
    public class StatHistBlRepository : BaseRepository, IStatHistBlRepository { 

        private readonly ILog logger = null;
        List<StatusHistory> obj = new List<StatusHistory>();
        StatusHistory statusHistItem = new StatusHistory();

        public StatHistBlRepository()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrStatusHisthistButtonCloseWhenButtonPressed
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> mctrStatusHisthistButtonCloseWhenButtonPressed(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing mctrStatusHisthistButtonCloseWhenButtonPressed with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrStatusHistPostQuery
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> mctrStatusHistPostQuery(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing mctrStatusHistPostQuery with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : selectionrgrpSortWhenRadioChanged
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> selectionrgrpSortWhenRadioChanged(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing selectionrgrpSortWhenRadioChanged with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : selectionbutToXlsWhenButtonPressed
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> selectionbutToXlsWhenButtonPressed(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing selectionbutToXlsWhenButtonPressed with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutildummyWhenButtonPressed
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> webutildummyWhenButtonPressed(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing webutildummyWhenButtonPressed with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilClientinfoFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> webutilwebutilClientinfoFunctionsWhenCustomItemEvent(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing webutilwebutilClientinfoFunctionsWhenCustomItemEvent with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilFileFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> webutilwebutilFileFunctionsWhenCustomItemEvent(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing webutilwebutilFileFunctionsWhenCustomItemEvent with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilHostFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> webutilwebutilHostFunctionsWhenCustomItemEvent(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing webutilwebutilHostFunctionsWhenCustomItemEvent with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilSessionFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> webutilwebutilSessionFunctionsWhenCustomItemEvent(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing webutilwebutilSessionFunctionsWhenCustomItemEvent with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilFiletransferFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> webutilwebutilFiletransferFunctionsWhenCustomItemEvent(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing webutilwebutilFiletransferFunctionsWhenCustomItemEvent with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilOleFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> webutilwebutilOleFunctionsWhenCustomItemEvent(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing webutilwebutilOleFunctionsWhenCustomItemEvent with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilCApiFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> webutilwebutilCApiFunctionsWhenCustomItemEvent(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing webutilwebutilCApiFunctionsWhenCustomItemEvent with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilBrowserFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> webutilwebutilBrowserFunctionsWhenCustomItemEvent(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing webutilwebutilBrowserFunctionsWhenCustomItemEvent with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : statHistBlWhenNewFormInstance
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> statHistBlWhenNewFormInstance(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing statHistBlWhenNewFormInstance with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : statHistBlWhenWindowClosed
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatHistBl> </returns>

        public IEnumerable<StatHistBl> statHistBlWhenWindowClosed(IEnumerable<StatHistBl> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[10];
            logger.Debug("Executing statHistBlWhenWindowClosed with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            return null;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrStatusHistMctrStatusHistOnLoad
        ///</summary>
        ///<param name = "StatHistBl"></param>
        ///<returns>IEnumerable<StatusHistory> </returns>


        public IEnumerable<StatusHistory> mctrStatusHistMctrStatusHistOnLoad(IEnumerable<StatusHistory> statHistBl)
        {
            OracleParameter[] parameters = new OracleParameter[1];
            logger.Debug("Executing statHistBlWhenWindowClosed with input : " + statHistBl);
            //TODO: Move the Data Access logic from the Business implementation class to here.
            //statHistBl.First().SHHeader.First().Mctr_No = 55905;
            try
            {

                string sql = @"select sh . date_time_entered , sh . date_time_left , sh . prior_status , sh . next_status ,
                    st . status_descr, rc.reject_code, rc.reject_reason
                    from mctr_status_hist sh , mctr_status st , mctr_reject_code rc
                    where sh . mctr_no = :0 and next_status = st . status_id ( + ) 
                    and sh . reject_code = rc . reject_code ( + ) 
                    order by date_time_entered DESC";
                //sql = @"select * 
                //    from mctr_status_hist sh 
                //    where mctr_no = :0 ";




                int mctrno = statHistBl.First().MCTRNO == 0 ? statHistBl.First().SHHeader.First().Mctr_No : statHistBl.First().MCTRNO;
                parameters[0] = new OracleParameter(":0", OracleDbType.Int32, mctrno, ParameterDirection.Input);
                var response1 = entities.Database.SqlQuery<StatHistBl>(sql, parameters).ToList();
                 sql = @"select h.mctr_no, h.title, h.orig_bu, h.fiscal_year, TO_CHAR(h.date_enter,'DD-MON-YYYY') as date_enter, TO_CHAR(h.date_journal,'DD-MON-YYYY') as date_journal,
            h.reason_code, r.reason_descr, h.status_id, s.status_descr,
            h.appl_jrnl_id, h.jv_item_cd,  h.bems_orig,
            decode(rtrim(rtrim(org.last_name) || ', ' || rtrim(org.first_name) || ' ' || rtrim(org.middle_int)),
            ',',' ',(rtrim(org.last_name) || ', ' || rtrim(org.first_name) || ' ' || rtrim(org.middle_int))) as bems_orig_name
            , h.orig_group, abu.descr
             from mctr_header h,mctr_status s,mctr_reason_code r,MCTR_PS_BUS_UNIT_TBL7_MV abu,mctr_employee_v org
              where h.mctr_no = :0
                and h.status_id = s.status_id(+)
                and h.reason_code = r.reason_code(+)
                and h.orig_bu = abu.business_unit(+)
                and h.bems_orig = org.bems_id(+)";
                OracleParameter[] parameters1 = new OracleParameter[1];
                parameters1[0] = new OracleParameter(":0", OracleDbType.Int32, statHistBl.First().MCTRNO, ParameterDirection.Input);

                try {
                    var response = entities.Database.SqlQuery<StatusHistHeader>(sql, parameters).ToList();
                    foreach (var item in response)
                    {
                        item.bems_orig_name = "\"" + item.bems_orig_name + "\"";
                        item.date_enter = Convert.ToDateTime(item.date_enter).ToShortDateString();
                        item.date_journal = Convert.ToDateTime(item.date_journal).ToShortDateString();

                    }

                    statusHistItem.SHHeader = response;
                }
                catch(Exception e)
                {
                    logger.Error("Error from  Mctr.DataAccess.mctrStatusHistMctrStatusHistOnLoad():" + e.Message);
                    statusHistItem.SHHeader = null;
                }

             //   Debug.Write(response[0].bems_orig);
              //  Debug.Write(response1[0].Prior_Status);


               
                statusHistItem.SHBody = response1;
            }
            catch (Exception ex)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.mctrLineItemPostQuery" + ex.Message);

                throw;

            }
            obj.Add(statusHistItem);


            return obj;
        }
    }

}

