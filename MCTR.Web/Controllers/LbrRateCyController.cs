///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using log4net;
using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using MCTR.Web.Security;
using System;
using System.Linq;
using System.Web.Mvc;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///LbrRateCyController is a web controller implementation for the 
    ///LbrRateCy screen.
    ///</summary>
    [CustomAuthorize]
    public class LbrRateCyController : Controller
    {
         private readonly ILog logger;
        public LbrRateCyController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : LbrRate
        ///</summary>
        ///<returns>ActionResult</returns>
        [HttpGet]
        public ActionResult LbrRate()
        {
           return View();
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : lbrRateCyWhenNewFormInstance
        ///</summary>
        ///<param name = "lbrRateCy"></param>
        ///<returns>ActionResult</returns>
        [HttpPost]
        public ActionResult lbrRateCyWhenNewFormInstance(string lbrRateCY)
        {
            logger.Info("Executing lbrRateCyWhenNewFormInstance() : " + lbrRateCY);
            if (lbrRateCY != null)
            {
                LbrRateCyHandler lbrRateCyHandler = new LbrRateCyHandler();
                logger.Debug("Executing lbrRateCyHandler.lbrRateCyWhenNewFormInstance().");
                var lbrRateCyResp = lbrRateCyHandler.lbrRateCyWhenNewFormInstance(lbrRateCY);
                logger.Info("Response Received : " + lbrRateCyResp);
                return View("LbrRateCy", lbrRateCyResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : lbrRateCyWhenNewFormInstance
        ///</summary>
        ///<param name = "lbrRateCy"></param>
        ///<returns>ActionResult</returns>
        //[HttpPost]
        public JsonResult LbrRateOnLoad()
        {
            try
            {
                LbrRateCy lbrRateCY = new LbrRateCy();
                lbrRateCY.session_bems = SessionPerister.BEMSID;
                logger.Info("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesMctrIncrRatesOnLoad() : " + lbrRateCY);
                LbrRateCyHandler lbrRateCyHandler = new LbrRateCyHandler();
                logger.Debug("Executing MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesMctrIncrRatesOnLoad()");
                var lbrRateCyResp = lbrRateCyHandler.LbrRateOnLoad(lbrRateCY);
                logger.Info("Response Received : " + lbrRateCyResp);
                var JsonData = new
                {
                    total = 1,
                    page = 1,
                    records = lbrRateCyResp.Count(),
                    rows = lbrRateCyResp,


                };
                return Json(JsonData, JsonRequestBehavior.AllowGet);

            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.mctrIncrRatesMctrIncrRatesOnLoad() " + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : lbrRateCyWhenWindowClosed
        ///</summary>
        ///<param name = "lbrRateCy"></param>
        ///<returns>ActionResult</returns>

        [HttpPost]
        public ActionResult lbrRateCyWhenWindowClosed(string lbrRateCy)
        {
            logger.Info("Executing lbrRateCyWhenWindowClosed() : " + lbrRateCy);
            if (lbrRateCy != null)
            {
                LbrRateCyHandler lbrRateCyHandler = new LbrRateCyHandler();
                logger.Debug("Executing lbrRateCyHandler.lbrRateCyWhenWindowClosed().");
                var lbrRateCyResp = lbrRateCyHandler.lbrRateCyWhenWindowClosed(lbrRateCy);
                logger.Info("Response Received : " + lbrRateCyResp);
                return View("LbrRateCy", lbrRateCyResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }
    }
}


