///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccessInterface;
using MCTR.DataAccess;

namespace MCTR.Business
{

    ///*********************************************************************
    ///<summary>
    ///mctrincrrates_business is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>
    public class MctrIncrRatesBusiness : BaseBusiness, IMctrIncrRatesBusiness
    {
         private readonly ILog logger;

        IMctrIncrRatesRepository repository = new MctrIncrRatesRepository();

        public MctrIncrRatesBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatescascadeFlgWhenMouseClick
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> mctrIncrRatescascadeFlgWhenMouseClick(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatescascadeFlgWhenMouseClick() with request : " + mctrIncrRates);
                var resultlist = repository.mctrIncrRatescascadeFlgWhenMouseClick(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatescascadeFlgWhenMouseClick() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatescascadeFlgWhenMouseClick" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatescmponCdPostTextItem
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> mctrIncrRatescmponCdPostTextItem(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatescmponCdPostTextItem() with request : " + mctrIncrRates);
                var resultlist = repository.mctrIncrRatescmponCdPostTextItem(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatescmponCdPostTextItem() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatescmponCdPostTextItem" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesMctrIncrRatesOnLoad
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> mctrIncrRatesMctrIncrRatesOnLoad(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesMctrIncrRatesOnLoad() with request : " + mctrIncrRates);
                var resultlist = repository.mctrIncrRatesMctrIncrRatesOnLoad(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesMctrIncrRatesOnLoad() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }
        }
        
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesPostQuery
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>

        public IEnumerable<MctrIncrRates> mctrIncrRatesPostQuery(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesPostQuery() with request : " + mctrIncrRates);
                var resultlist = repository.mctrIncrRatesPostQuery(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesPostQuery() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesPostQuery" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesPreUpdate
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> mctrIncrRatesPreUpdate(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesPreUpdate() with request : " + mctrIncrRates);
                var resultlist = repository.mctrIncrRatesPreUpdate(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesPreUpdate() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesPreUpdate" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesWhenNewFormInstance
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> mctrIncrRatesWhenNewFormInstance()
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesWhenNewFormInstance() with request : " );
                var resultlist = repository.mctrIncrRatesWhenNewFormInstance();
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesWhenNewFormInstance() : " );
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesWhenNewFormInstance" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesWhenWindowClosed
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> mctrIncrRatesWhenWindowClosed(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesWhenWindowClosed() with request : " + mctrIncrRates);
                var resultlist = repository.mctrIncrRatesWhenWindowClosed(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesWhenWindowClosed() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrIncrRatesWhenWindowClosed" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : selectionbutRatesListWhenButtonPressed
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> selectionbutRatesListWhenButtonPressed(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.selectionbutRatesListWhenButtonPressed() with request : " + mctrIncrRates);
                var resultlist = repository.selectionbutRatesListWhenButtonPressed(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.selectionbutRatesListWhenButtonPressed() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.selectionbutRatesListWhenButtonPressed" + e.Message);
                throw;
            }
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : webutildummyWhenButtonPressed
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> webutildummyWhenButtonPressed(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.webutildummyWhenButtonPressed() with request : " + mctrIncrRates);
                var resultlist = repository.webutildummyWhenButtonPressed(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.webutildummyWhenButtonPressed() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilBrowserFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> webutilwebutilBrowserFunctionsWhenCustomItemEvent(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.webutilwebutilBrowserFunctionsWhenCustomItemEvent() with request : " + mctrIncrRates);
                var resultlist = repository.webutilwebutilBrowserFunctionsWhenCustomItemEvent(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.webutilwebutilBrowserFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilCApiFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> webutilwebutilCApiFunctionsWhenCustomItemEvent(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.webutilwebutilCApiFunctionsWhenCustomItemEvent() with request : " + mctrIncrRates);
                var resultlist = repository.webutilwebutilCApiFunctionsWhenCustomItemEvent(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.webutilwebutilCApiFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilClientinfoFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> webutilwebutilClientinfoFunctionsWhenCustomItemEvent(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.webutilwebutilClientinfoFunctionsWhenCustomItemEvent() with request : " + mctrIncrRates);
                var resultlist = repository.webutilwebutilClientinfoFunctionsWhenCustomItemEvent(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.webutilwebutilClientinfoFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilFileFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> webutilwebutilFileFunctionsWhenCustomItemEvent(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.webutilwebutilFileFunctionsWhenCustomItemEvent() with request : " + mctrIncrRates);
                var resultlist = repository.webutilwebutilFileFunctionsWhenCustomItemEvent(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.webutilwebutilFileFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilFiletransferFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> webutilwebutilFiletransferFunctionsWhenCustomItemEvent(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.webutilwebutilFiletransferFunctionsWhenCustomItemEvent() with request : " + mctrIncrRates);
                var resultlist = repository.webutilwebutilFiletransferFunctionsWhenCustomItemEvent(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.webutilwebutilFiletransferFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilHostFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> webutilwebutilHostFunctionsWhenCustomItemEvent(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.webutilwebutilHostFunctionsWhenCustomItemEvent() with request : " + mctrIncrRates);
                var resultlist = repository.webutilwebutilHostFunctionsWhenCustomItemEvent(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.webutilwebutilHostFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilOleFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> webutilwebutilOleFunctionsWhenCustomItemEvent(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.webutilwebutilOleFunctionsWhenCustomItemEvent() with request : " + mctrIncrRates);
                var resultlist = repository.webutilwebutilOleFunctionsWhenCustomItemEvent(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.webutilwebutilOleFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutilwebutilSessionFunctionsWhenCustomItemEvent
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> webutilwebutilSessionFunctionsWhenCustomItemEvent(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrIncrRatesBusiness.webutilwebutilSessionFunctionsWhenCustomItemEvent() with request : " + mctrIncrRates);
                var resultlist = repository.webutilwebutilSessionFunctionsWhenCustomItemEvent(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.webutilwebutilSessionFunctionsWhenCustomItemEvent() : " + mctrIncrRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrIncrRatesBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesOnError
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> mctrIncrRatesOnError(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            throw new NotImplementedException();
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : CreateStatus
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> Create(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing DataAccess MCTR.Business.MctrIncrRatesBusiness.CreateStatus() with input:" + mctrIncrRates);
                IMctrIncrRatesRepository incrRepository = new MctrIncrRatesRepository();
                var response = incrRepository.Create(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.CreateStatus() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : DeleteStatus
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<MctrIncrRates> DeleteStatus(IEnumerable<MctrIncrRates> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing DataAccess  MCTR.Business.MctrIncrRatesBusiness.DeleteStatus() with input:" + mctrIncrRates);
                IMctrIncrRatesRepository incrRepository = new MctrIncrRatesRepository();
                var response = incrRepository.DeleteStatus(mctrIncrRates);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.DeleteStatus() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : EditStatus
        ///</summary>
        ///<param name = "mctrIncrRates"></param>
        ///<returns>IEnumerable<mctrIncrRates> </returns>
        public IEnumerable<IncrRateEdit> EditStatus(IEnumerable<IncrRateEdit> mctrIncrRates)
        {
            try
            {
                logger.Info("Executing DataAccess  MCTR.Business.MctrIncrRatesBusiness.EditStatus()with input:" + mctrIncrRates);
                IMctrIncrRatesRepository incrRepository = new MctrIncrRatesRepository();
                var response = incrRepository.EditStatus(mctrIncrRates);
                logger.Info("Response received from MCTR.Business.MctrIncrRatesBusiness.EditStatus() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
    }
}