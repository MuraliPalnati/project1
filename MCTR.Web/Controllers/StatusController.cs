///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using log4net;
using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using MCTR.Web.Security;
using System;
using System.Collections.Generic;
using System.Web.Mvc;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///StatusController is a web controller implementation for the 
    ///Status screen.
    ///</summary>
    [CustomAuthorize]
    public class StatusController : Controller
    {
         private readonly ILog logger;
        public StatusController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : StatusGet
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status> </returns>
        public JsonResult StatusGet(string page)
        {
            try
            {
                StatusHandler statusHandler = new StatusHandler();
                logger.Debug("Executing statusHandler.statusWhenNewFormInstance().");
                var ReturnedStatues = statusHandler.statusWhenNewFormInstance();
                logger.Info("Response Received : " + ReturnedStatues);
                var jsonData = new
                {
                    total = 100,
                    page = page,
                    records = ReturnedStatues.Length,
                    rows = ReturnedStatues,

                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : ViewIndex
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status> </returns>
        [HttpGet]
        public ActionResult ViewIndex()
        {
            return View();
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : Create
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status> </returns>
        [HttpPost]
        public ActionResult Create(IEnumerable<Status> status)
        {
            try
            {
                if (status != null)
                {
                    StatusHandler statusHandler = new StatusHandler();
                    if (statusHandler.CreateHandlerPost(status))
                    {
                        return View();
                    }
                }

                return View();
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : Deletes
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status> </returns>
        [HttpPost]
        public ActionResult Deletes(Status status)
        {
            try
            {
                if (status != null)
                {
                    StatusHandler statusHandler = new StatusHandler();
                    if (statusHandler.DeleteHandlerPost(status))
                    {
                        return View();
                    }
                }
                return View();
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : Edits
        ///</summary>
        ///<param name = "Edits"></param>
        ///<returns>IEnumerable<Status> </returns>
        [HttpPost]
        public ActionResult Edits(IEnumerable<Status> status)
        {
            try
            {
                if (status != null)
                {
                    StatusHandler statusHandler = new StatusHandler();
                    if (statusHandler.EditHandlerPost(status))
                    {
                        return View();
                    }
                }

                return View();
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);


                throw;
            }

        }
    }
}
 
