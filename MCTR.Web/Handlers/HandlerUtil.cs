///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History : 

using System;
using System.Collections.Generic;
using System.Web;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net;
using Resources;

using Newtonsoft.Json.Linq;
using MCTR.DomainEntity;
using System.Web.Mvc;
using AutoMapper;
using MCTR.Web.Util;
using System.Data;
using System.Text;
using System.Linq;
using MCTR.Web.Handlers;
using log4net;
using System.Configuration;

namespace MCTR.Web.Handlers
{
    ///*********************************************************************
    ///<summary>
    ///Handlers provides a level of abstraction for consuming the REST api.
    ///</summary>
    public abstract class HandlerUtil<T>:IDisposable
    {
        static string RestURL = getRESTURL();
        private static  ILog logger;
        public static List<T> RestPostProcessor(string APIAction, T Input)
        {
            try
            {
                HttpClient httpClient = new HttpClient();
                httpClient.BaseAddress = new Uri(getRESTURL());
                httpClient.DefaultRequestHeaders.Accept.Clear();
                httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                httpClient.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "application/json");
                List<T> InputToService = null;
                if ( !object.Equals(Input, default(T)))
                {
                    InputToService = new List<T>();
                    InputToService.Add(Input);
                }
                
                string URL = RestURL + APIAction;
                HttpResponseMessage response = httpClient.PostAsJsonAsync<IEnumerable<T>>(URL, InputToService).Result;
                httpClient.Dispose();
                if (response.IsSuccessStatusCode)
                {
                    var ReturnValue = response.Content.ReadAsStringAsync().Result;
                    System.Web.Script.Serialization.JavaScriptSerializer json_serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                    var ReturnedEmployees = json_serializer.Deserialize<List<T>>(ReturnValue);
                    return ReturnedEmployees;
                }

                if (response.StatusCode == HttpStatusCode.InternalServerError)
                {
                    var errCode = response.Content.ReadAsStringAsync().Result;
                    throw new HttpException(errCode, 500);
                }
                else
                    return null;
            }
            catch (HttpException exp)
            {
                throw exp;
            }
        }


        public static List<T> RestgetProcessor(string APIAction, string Input)
        {
            try
            {
                HttpClient httpClient = new HttpClient();
                httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                httpClient.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "application/json");
                List<string> InputToService = null;

                InputToService = new List<string>();
                InputToService.Add(Input);

                string URL = RestURL + APIAction;
                HttpResponseMessage response = httpClient.PostAsJsonAsync<IEnumerable<string>>(URL, InputToService).Result;
                httpClient.Dispose();
                if (response.IsSuccessStatusCode)
                {
                    var ReturnValue = response.Content.ReadAsStringAsync().Result;
                    System.Web.Script.Serialization.JavaScriptSerializer json_serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                    var ReturnedEmployees = json_serializer.Deserialize<List<T>>(ReturnValue);
                    return ReturnedEmployees;
                }

            }
            catch (Exception exp)
            {
                throw exp;
            }
            return null;
        }

        public static T[] RestGetProcessor(string APIAction)
        {
            try
            {
                System.Web.Script.Serialization.JavaScriptSerializer json_serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                string URL = RestURL + APIAction;
                WebClient client = new WebClient();
                var DataReturned = client.DownloadString(URL);
                client.Dispose();
                T[] myOutput = json_serializer.Deserialize<T[]>(DataReturned);

                return myOutput;
            }
            catch (HttpException exp)
            {
                throw exp;
            }
            catch (Exception exp)
            {
                throw exp;
            }

        }

        public static T[] RestGetProcessor(string APIAction, T Input)
        {
            try
            {
                string URL = RestURL + APIAction;
                WebClient client = new WebClient();
                var DataReturned = client.DownloadString(URL);
                client.Dispose();
                System.Web.Script.Serialization.JavaScriptSerializer json_serializer = new System.Web.Script.Serialization.JavaScriptSerializer();

                return json_serializer.Deserialize<T[]>(DataReturned);
            }
            catch (Exception exp)
            {
                throw exp;
            }
        }

        public static List<T> PostProcessor(string APIAction, IEnumerable<T> Input)
        {
            try
            {
                HttpClient httpClient = new HttpClient();
                httpClient.BaseAddress = new Uri(RestURL);
                httpClient.DefaultRequestHeaders.Accept.Clear();
                httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                httpClient.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "application/json");
                string URL = RestURL + APIAction;
                HttpResponseMessage response = httpClient.PostAsJsonAsync<IEnumerable<T>>(URL, Input).Result;
                httpClient.Dispose();
                if (response.IsSuccessStatusCode)
                {
                    var ReturnValue = response.Content.ReadAsStringAsync().Result;
                    System.Web.Script.Serialization.JavaScriptSerializer json_serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                    var ReturnedEmployees = json_serializer.Deserialize<List<T>>(ReturnValue);
                    return ReturnedEmployees;
                }
                else
                    return null;
            }
            catch (Exception exp)
            {
                throw exp;
            }
        }
        public static byte[] RestFilePostProcessor(string APIAction, T Input)
        {
            try
            {
                HttpClient httpClient = new HttpClient();
                httpClient.BaseAddress = new Uri(RestURL);
                httpClient.DefaultRequestHeaders.Accept.Clear();
                httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                httpClient.DefaultRequestHeaders.TryAddWithoutValidation("Content-Type", "application/json");
                List<T> InputToService = null;
                if (!object.Equals(Input, default(T)))
                {
                    InputToService = new List<T>();
                    InputToService.Add(Input);
                }
                string URL = RestURL + APIAction;
                HttpResponseMessage response = httpClient.PostAsJsonAsync<IEnumerable<T>>(URL, InputToService).Result;
                httpClient.Dispose();
                if (response.IsSuccessStatusCode)
                {
                    var attachBlob = response.Content.ReadAsByteArrayAsync().Result;
                    return attachBlob;
                }
                if (response.StatusCode == HttpStatusCode.InternalServerError)
                {
                    var errCode = response.Content.ReadAsStringAsync().Result;
                    throw new HttpException(errCode, 500);
                }
                else
                    return null;
            }
            catch (HttpException exp)
            {
                throw exp;
            }
        }

        public static List<DataTable> ConvertAdminTableData(List<T> mctrAdminReportsResp, string firstRow, string secondRow, string thirdRow, string fourthRow, string lastRow)
        {
            var responseexcel = mctrAdminReportsResp;

            Download obj = new Download();
            var dt = new List<DataTable>();

            DataTable d1 = new DataTable();
            string msg = firstRow + DateTime.Now.ToString("MM/dd/yy hh:mm:ss tt") + ")";
            d1.Columns.Add(msg);
            dt.Add(d1);
            d1.Dispose();
            DataTable d2 = new DataTable();
            d2.Columns.Add(secondRow);
            dt.Add(d2);
            d2.Dispose();
            dt.Add(obj.ToDataTable(responseexcel));
            DataTable d3 = new DataTable();
            d3.Columns.Add(thirdRow);
            dt.Add(d3);
            d3.Dispose();

            DataTable d4 = new DataTable();
            d4.Columns.Add(fourthRow);
            dt.Add(d4);
            d4.Dispose();
            DataTable d5 = new DataTable();
            d5.Columns.Add(lastRow.ToUpper(System.Globalization.CultureInfo.CurrentCulture));
            dt.Add(d5);
            d5.Dispose();
    
            return dt;
        }
        public static List<DataTable> Metricdata(List<T> mctrAdminReportsResp, string firstRow, string secondRow, string thirdRow, string fourthRow, string lastRow)
        {
            var responseexcel = mctrAdminReportsResp;
            Download obj = new Download();
            var dt = new List<DataTable>();

            DataTable d1 = new DataTable();
            string msg = firstRow+ DateTime.Now.ToString("MM/dd/yy hh:mm:ss tt") + ")";
            d1.Columns.Add(msg);
            dt.Add(d1);
            dt.Add(obj.ToDataTable(responseexcel));

            DataTable d2 = new DataTable();
            d2.Columns.Add(secondRow);
            dt.Add(d2);
            DataTable d3 = new DataTable();
            d3.Columns.Add(thirdRow);
            dt.Add(d3);
            DataTable d4 = new DataTable();
            d4.Columns.Add(fourthRow);
            dt.Add(d4);
            DataTable d5 = new DataTable();
            d5.Columns.Add(lastRow.ToUpper(System.Globalization.CultureInfo.CurrentCulture));
            dt.Add(d5);
            d1.Dispose();
            d2.Dispose();
            d3.Dispose();
            d4.Dispose();
            d5.Dispose();
            
            return dt;
        }

        public static List<DataTable> MetricdataJrnl(List<T> mctrAdminReportsResp, string firstRow, string secondRow, string thirdRow)
        {
            var responseexcel = mctrAdminReportsResp;
            Download obj = new Download();
            var dt = new List<DataTable>();



            DataTable d1 = new DataTable();
            string msg = firstRow;
            d1.Columns.Add(msg);
            dt.Add(d1);
           

            DataTable d2 = new DataTable();
            d2.Columns.Add(secondRow);
            dt.Add(d2);

            DataTable d3 = new DataTable();
            d3.Columns.Add(thirdRow);
            dt.Add(d3);

            DataTable d4 = new DataTable();
            dt.Add(d4);
            dt.Add(obj.ToDataTable(responseexcel));
            dt[4].Columns["ORIGGRP"].ColumnName = "Orig Grp";
            dt[4].Columns["ORIGBU"].ColumnName = "Orig BU";
            dt[4].Columns["JRNLYEAR"].ColumnName = "Jrnl Year";
            dt[4].Columns["DATEJRNLD"].ColumnName = "Date Journeyed";
            dt[4].Columns["APPLJRNLID"].ColumnName = "Appl Jrnl Id";
            dt[4].Columns["JVITEMCD"].ColumnName = "JV Item Cd";
            dt[4].Columns["DATEENTER"].ColumnName = "Date Entered";
            dt[4].Columns["STATUSID"].ColumnName = "Status Id";
            dt[4].Columns["OHBASEYR"].ColumnName = "OH Base Yr";
            dt[4].Columns["MCTRNO"].ColumnName = "MCTR No";
            dt[4].Columns["LICNTED"].ColumnName = "Line Items Counted";
            dt[4].Columns["LASTLINO"].ColumnName = "Last LI No";
            dt[4].Columns["ABSOLUTEQTY"].ColumnName = "Absolute Qty";
            dt[4].Columns["ABSOLUTEAMT"].ColumnName = "Absolute Amt";
            dt[4].Columns["BALANCE"].ColumnName = "Net Balance";
            dt[4].Columns["LIFROMQTY"].ColumnName = "LI From Hrs";
            dt[4].Columns["LIFROMAMT"].ColumnName = "Line Items From Amt";
            dt[4].Columns["OHFROMAMT"].ColumnName = "LI OH From AMT";
            dt[4].Columns["LITOQTY"].ColumnName = "LI To Hrs";
            dt[4].Columns["LITOAMT"].ColumnName = "Line Items To Amt";
            dt[4].Columns["OHTOAMT"].ColumnName = "LI OH To Amt";
            dt[4].Columns["OFFSETAMT"].ColumnName = "Offset Amt";
            dt[4].Columns["BEMS_ORIG"].ColumnName = "Originator Bems";
            dt[4].Columns["ORIG_LNAME"].ColumnName = "Orig Last Name";
            dt[4].Columns["ORIG_FNAME"].ColumnName = "Orig First Name";
            dt[4].Columns["BEMSFINCTL"].ColumnName = "Financial Controller Bems";
            dt[4].Columns["FINCTLLNAME"].ColumnName = "Fin Ctl Last Name";
            dt[4].Columns["FINCTLFNAME"].ColumnName = "Fin Ctl First Name";
            dt[4].Columns["PROGDAYSHIST"].ColumnName = "Prog Days";
            dt[4].Columns["ACCTDAYSHIST"].ColumnName = "Acct Days";
            dt[4].Columns["TOTALDAYS"].ColumnName = "Total Days";
            dt[4].Columns["REASONCODE"].ColumnName = "Reason Cd";
            dt[4].Columns["REASONDESCR"].ColumnName = "Reason Description";
            dt[4].Columns["TITLE"].ColumnName = "Title";
            d1.Dispose();
            d2.Dispose();
            d3.Dispose();
            d4.Dispose();
            return dt;
        }
        public static List<DataTable> ChangesMadedata(List<T> mctrAdminReportsResp, string firstRow, string secondRow, string lastRow)
        {
            var responseexcel = mctrAdminReportsResp;

           
            var dt = new List<DataTable>();

            DataTable d1 = new DataTable();
        
            string msg = firstRow + DateTime.Now.ToString("MM/dd/yy hh:mm:ss tt") + ")";
            d1.Columns.Add(msg);
            dt.Add(d1);
            Download obj = new Download();
            dt.Add(obj.ToDataTable(responseexcel));
            DataTable d2 = new DataTable();
            d2.Columns.Add(secondRow);
            dt.Add(d2);
            DataTable d3 = new DataTable();
            d3.Columns.Add(lastRow.ToUpper(System.Globalization.CultureInfo.CurrentCulture));
            dt.Add(d3);
            d1.Dispose();
            d2.Dispose();
            d3.Dispose();
            return dt;

        }
        public static List<DataTable> AuthorizedBuData(List<T> mctrAdminReportsResp, string firstRow, string secondRow, string thirdRow, string fourthRow, string lastRow, string BusinessGroup, string BusinessUnit)
        {
            AdminTables admintables = new AdminTables();
            admintables.BusinessGroup = BusinessGroup;
            var responseexcel = mctrAdminReportsResp;
            admintables.BusinessUnit = BusinessUnit;
            Download obj = new Download();
            var dt = new List<DataTable>();
            DataTable d1 = new DataTable();
            d1.Columns.Add(firstRow);
            dt.Add(d1);
            d1.Dispose();
            DataTable d2 = new DataTable();
            d2.Columns.Add(secondRow +','+ admintables.BusinessGroup + ','+admintables.BusinessUnit);
            dt.Add(d2);
            dt.Add(obj.ToDataTable(responseexcel));
            d2.Dispose();
            DataTable d3 = new DataTable();
            d3.Columns.Add(thirdRow);
            dt.Add(d3);
            d3.Dispose();
            

            DataTable d4 = new DataTable();
            d4.Columns.Add(fourthRow);
            dt.Add(d4);
            d4.Dispose();
            DataTable d5 = new DataTable();
            d5.Columns.Add(lastRow.ToUpper(System.Globalization.CultureInfo.CurrentCulture));
            dt.Add(d5);
            d5.Dispose();

            return dt;
        }
        public static List<DataTable> RoleNotificationpart1Data(List<T> mctrAdminReportsResp, string firstRow, string secondRow)
        {
            var responseexcel = mctrAdminReportsResp;

           
            var dt = new List<DataTable>();
            DataTable d1 = new DataTable();
            d1.Columns.Add(firstRow + DateTime.Now.ToString("MM/dd/yy hh:mm:ss tt") + ")");
            dt.Add(d1);
            d1.Dispose();
            Download obj = new Download();

            DataTable d2 = new DataTable();
            d2.Columns.Add(secondRow);
            dt.Add(d2);
            dt.Add(obj.ToDataTable(responseexcel));

            d2.Dispose();
            
            return dt;

        }
        public static List<DataTable> statusheader(List<T> mctrResp, string firstRow)
        {
            var responseexcel = mctrResp;
            Download obj = new Download();
            var dt = new List<DataTable>();
            DataTable d1 = new DataTable();
            d1.Columns.Add(firstRow);
            dt.Add(d1);
            d1.Dispose();
            dt.Add(obj.ToDataTable(responseexcel));
            dt[1].Columns["MCTR_NO"].ColumnName = "MCTR No";
            dt[1].Columns["title"].ColumnName = "Title";
            dt[1].Columns["orig_bu"].ColumnName = "BU";
            dt[1].Columns["orig_group"].ColumnName = "Grp";
            dt[1].Columns["fiscal_year"].ColumnName = "OH Base Year";
            dt[1].Columns["reason_code"].ColumnName = "Rs Cd";
            dt[1].Columns["reason_descr"].ColumnName = "Rs Desc";
            dt[1].Columns["status_id"].ColumnName = "Current Status";
            dt[1].Columns["status_descr"].ColumnName = "Current Status Desc";
            dt[1].Columns["date_enter"].ColumnName = "Date Enter";
            dt[1].Columns["date_journal"].ColumnName = "Date Journal";
            dt[1].Columns["appl_jrnl_id"].ColumnName = "Appl Jrnl Id";
            dt[1].Columns["jv_item_cd"].ColumnName = "JV Item Cd";
            dt[1].Columns["bems_orig"].ColumnName = "Originator Bems";
            dt[1].Columns["bems_orig_name"].ColumnName = "Originator Name";
            dt[1].Columns["descr"].ColumnName = "BU Name";
            
            return dt;

        }
        public static List<DataTable> statusbody(List<T> mctrResp, List<DataTable> dt, string firstRow, string secondRow)
        {
            var responseexcel = mctrResp;
            Download obj = new Download();
            DataTable d1 = new DataTable();
            d1.Columns.Add(firstRow);
            dt.Add(d1);
            d1.Dispose();
            dt.Add(obj.ToDataTable(responseexcel));
            dt[3].Columns["Date_Time_Entered"].ColumnName = "Date Time Entered";
            dt[3].Columns["Date_Time_Left"].ColumnName = "Date Time Left";
            dt[3].Columns["Prior_Status"].ColumnName = "Prior Status";
            dt[3].Columns["Next_Status"].ColumnName = "Next Status";
            dt[3].Columns["Status_Descr"].ColumnName = "Next Status Descr";
            dt[3].Columns["reject_code"].ColumnName = "Rj Cd";
            dt[3].Columns["reject_reason"].ColumnName = "Rj Descr";
            DataTable d2 = new DataTable();
            d2.Columns.Add(secondRow);
            dt.Add(d2);
            d2.Dispose();
            
            return dt;

        }
        public static List<DataTable> RoleNotificationpart2Data(List<T> mctrAdminReportsResp,List<DataTable> dt, string firstRow, string secondRow,string thirdRow, string fourthRow, string fifthRow)
        {
            var responseexcel = mctrAdminReportsResp;
            Download obj = new Download();
            DataTable d1 = new DataTable();
            d1.Columns.Add(firstRow);
            dt.Add(d1);
            dt.Add(obj.ToDataTable(responseexcel));
            DataTable d2 = new DataTable();
            d2.Columns.Add(secondRow);
            dt.Add(d2);
            DataTable d3 = new DataTable();
            d3.Columns.Add(thirdRow);
            dt.Add(d3);
            DataTable d4 = new DataTable();
            d4.Columns.Add(fourthRow.ToUpper(System.Globalization.CultureInfo.CurrentCulture));
            dt.Add(d4);
            DataTable d5 = new DataTable();
            d5.Columns.Add(fifthRow.ToUpper(System.Globalization.CultureInfo.CurrentCulture));
            dt.Add(d5);
            d1.Dispose();
            d2.Dispose();
            d3.Dispose();
            d4.Dispose();
            d5.Dispose();
            
            return dt;

        }
        public static List<DataTable> StatusHistoryHeader(List<T> mctrAdminReportsResp, string firstRow)
        {
            var responseexcel = mctrAdminReportsResp;
            var dt = new List<DataTable>();
            DataTable d1 = new DataTable();
            Download obj = new Download();
            d1.Columns.Add(firstRow);
            dt.Add(d1);
            dt.Add(obj.ToDataTable(responseexcel));
            
            d1.Dispose();
            return dt;
        }
        public static List<DataTable> StatusHistoryFooter(List<T> mctrAdminReportsResp, List<DataTable> dt, string firstRow1)
        {
            var responseexcel = mctrAdminReportsResp;

            Download obj = new Download();
            DataTable d1 = new DataTable();
            d1.Columns.Add(firstRow1);
            dt.Add(d1);
            dt.Add(obj.ToDataTable(responseexcel));
            d1.Dispose();
            
            return dt;

        }
        public static List<DataTable> ConvertActiveStatedata(List<T> mctrAdminReportsResp, string firstRow, string secondRow, string lastRow)
        {
            var responseexcel = mctrAdminReportsResp;

           
            var dt = new List<DataTable>();
            DataTable d1 = new DataTable();
            d1.Columns.Add(firstRow + DateTime.Now.ToString("MM/dd/yy hh:mm:ss tt") + ")");
            dt.Add(d1);
            d1.Dispose();
            Download obj = new Download();
            dt.Add(obj.ToDataTable(responseexcel));
            DataTable d2 = new DataTable();
            d2.Columns.Add(secondRow);
            dt.Add(d2);
            d2.Dispose();
            DataTable d3 = new DataTable();
            d3.Columns.Add(lastRow.ToUpper(System.Globalization.CultureInfo.CurrentCulture));
            dt.Add(d3);
            d3.Dispose();
            
            return dt;
        }

        private static string getRESTURL()
        {
            string URL = string.Empty;
            string currentEnvironment = string.Empty;
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

            string MCTRWebUrl = HttpContext.Current.Request.Url.ToString();
            
            try
            {
#if DEBUG
                MCTRWebUrl = "https://mctr-dev.web.boeing.com/MCTRRESTService/api/";
#endif
                logger.Info("MCTRWebUrl : " + MCTRWebUrl);

                string[] MCTRURLSplitArray = MCTRWebUrl.Split('-');                

                if(MCTRURLSplitArray.Count() > 0)
                {
                    string[] MCTREnvironmentSplitArray = MCTRURLSplitArray[1].Split('.');
                    if(MCTREnvironmentSplitArray.Count() > 0)
                    {
                        currentEnvironment = MCTREnvironmentSplitArray[0].ToString();
                    }
                }
                                
                switch (currentEnvironment)
                {
                    case "dev":
                        {
                            URL = ConfigurationManager.AppSettings["URL_DEV"].ToString();
                            break;
                        }
                    case "pre":
                        {
                            URL = ConfigurationManager.AppSettings["URL_PRE"].ToString();
                            break;
                        }
                    case "prod":
                        {
                            URL = ConfigurationManager.AppSettings["URL_PROD"].ToString();
                            break;
                        }
                    default:
                        {
                            URL = ConfigurationManager.AppSettings["URL_DEV"].ToString();
                            break;
                        }
                }
            }
            catch (Exception e)
            {
                //return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
#if DEBUG
            URL = "http://localhost:64772/api/";
            //URL = "http://localhost/MCTRRESTService/api/";
#endif
            logger.Info("URL returned : " + URL);
            return URL;

        }

        public abstract void Dispose();

    }
}