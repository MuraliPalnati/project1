///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :
using System;
using System.Collections.Generic;
using System.Linq;
using AutoMapper;
using MCTR.DataEntity;
using System.Data;
using log4net;
using Oracle.ManagedDataAccess.Client;

using MCTR.DomainEntity;

using MCTR.DataAccessInterface;
using System.Text;

namespace MCTR.DataAccess
///*********************************************************************
///<summary>
///JrnlWeekRepository is a data access implementation which holds all 
///the data access logic in it.
///</summary>
{

    public class JrnlWeekRepository : BaseRepository, IJrnlWeekRepository
    {

        private readonly ILog logger;

        public JrnlWeekRepository()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekJrnlWeekOnLoad
        ///</summary>
        ///<param name = "JrnlWeek"></param>
        ///<returns>IEnumerable<JrnlWeek> </returns>
        public IEnumerable<JrnlWeek> jrnlWeekJrnlWeekOnLoad(IEnumerable<string> bems)
        {
            try
            {      
                var resultlist = entities.MCTR_JOURNAL.SqlQuery("select * from mctr_owner . mctr_journal where exists ( select lu . business_unit from mctr_role_bu lu where lu . bems ="+bems.First()+" and ( lu . business_unit = bus_unit_gl_from or ( lu . business_unit = '**' and exists ( select bu . business_unit from mctr_bus_unit_v bu where bu . business_unit = bus_unit_gl_from and bu . group_cd7 = lu . group_cd7 ) ) ) ) order by mctr_no , line_no , from_to , line_no_oh").ToList<MCTR_JOURNAL>();           
                var targetJrnls = Mapper.DynamicMap<IEnumerable<MCTR_JOURNAL>, IEnumerable<JrnlWeek>>(resultlist);
                return targetJrnls;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekWhenNewFormInstance
        ///</summary>
        ///<param name = "JrnlWeek"></param>
        ///<returns>IEnumerable<JrnlWeek> </returns>

        public IEnumerable<JrnlWeek> jrnlWeekWhenNewFormInstance(IEnumerable<JrnlWeek> jrnlWeek)
        {
            try
            {
                logger.Debug("Executing jrnlWeekWhenNewFormInstance with input : " + jrnlWeek);
                //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.JrnlWeekRepository.jrnlWeekWhenNewFormInstance():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekWhenWindowClosed
        ///</summary>
        ///<param name = "JrnlWeek"></param>
        ///<returns>IEnumerable<JrnlWeek> </returns>

        public IEnumerable<JrnlWeek> jrnlWeekWhenWindowClosed(IEnumerable<JrnlWeek> jrnlWeek)
        {
            try
            {
                logger.Debug("Executing jrnlWeekWhenWindowClosed with input : " + jrnlWeek);
                //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.JrnlWeekRepository.jrnlWeekWhenWindowClosed():" + e.Message);

                throw;
            }
        }


    }

}

