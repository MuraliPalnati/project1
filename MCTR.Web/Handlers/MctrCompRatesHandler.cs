///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using System.Threading.Tasks;
using System.Web.Mvc;
using System.Net.Http;
using System.Net.Http.Headers;

using log4net;

using MCTR.DomainEntity;

namespace MCTR.Web.Handlers
{
    ///*********************************************************************
    ///<summary>
    ///MctrCompRatesHandler provides a level of abstraction for consuming the REST api.
    ///</summary>
    public class MctrCompRatesHandler
    {
         private readonly ILog logger;

        public MctrCompRatesHandler()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesMctrCompRatesOnLoad
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        public IEnumerable<MctrCompRates> mctrcompratesonload(MctrCompRates mctrCompRates)
        {
            try
            {
                if (mctrCompRates != null)
                {
                    logger.Debug("Executing mctrCompRatesMctrCompRatesOnLoad rest service handler.");
                    string restApiPath = "MctrCompRatesService/mctrcompratesonload";
                    logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrCompRates);
                    var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                    logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                    return response;
                }
                else
                {
                    logger.Info("The passed parameter mctrCompRates is NULL.");
                    return null;
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.mctrcompratesonload rest service handler." + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatescmponCdPostTextItem
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        public IEnumerable<MctrCompRates> mctrCompRatescmponCdPostTextItem(MctrCompRates mctrCompRates)
        {
            try
            {
                if (mctrCompRates != null)
                {
                    logger.Debug("Executing mctrCompRatescmponCdPostTextItem rest service handler.");
                    string restApiPath = "MctrCompRatesService/mctrCompRatescmponCdPostTextItem";
                    logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrCompRates);
                    var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                    logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                    return response;
                }
                else
                {
                    logger.Info("The passed parameter mctrCompRates is NULL.");
                    return null;
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.mctrcompratesonload rest service handler." + e.Message);
                throw;
            }
        }

     

       
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesrscOutputPostChange
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        public IEnumerable<MctrCompRates> mctrCompRatesrscOutputPostChange(MctrCompRates mctrCompRates)
        {
            try
            {
                if (mctrCompRates != null)
                {
                    logger.Debug("Executing mctrCompRatesrscOutputPostChange rest service handler.");
                    string restApiPath = "MctrCompRatesService/mctrCompRatesrscOutputPostChange";
                    logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrCompRates);
                    var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                    logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                    return response;
                }
                else
                {
                    logger.Info("The passed parameter mctrCompRates is NULL.");
                    return null;
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.mctrCompRatesrscOutputPostChange rest service handler." + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatespoolOutputPostChange
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        public IEnumerable<MctrCompRates> mctrCompRatespoolOutputPostChange(MctrCompRates mctrCompRates)
        {
            try {
                if (mctrCompRates != null)
                {
                    logger.Debug("Executing mctrCompRatespoolOutputPostChange rest service handler.");
                    string restApiPath = "MctrCompRatesService/mctrCompRatespoolOutputPostChange";
                    logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrCompRates);
                    var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                    logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                    return response;
                }
                else
                {
                    logger.Info("The passed parameter mctrCompRates is NULL.");
                    return null;
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.mctrCompRatespoolOutputPostChange rest service handler." + e.Message);
                throw;
            }
        }




        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatescascadeFlgWhenMouseClick
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        public IEnumerable<MctrCompRates> mctrCompRatescascadeFlgWhenMouseClick(MctrCompRates mctrCompRates)
        {
            try
            {
                if (mctrCompRates != null)
                {
                    logger.Debug("Executing mctrCompRatescascadeFlgWhenMouseClick rest service handler.");
                    string restApiPath = "MctrCompRatesService/mctrCompRatescascadeFlgWhenMouseClick";
                    logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrCompRates);
                    var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                    logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                    return response;
                }
                else
                {
                    logger.Info("The passed parameter mctrCompRates is NULL.");
                    return null;
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.mctrCompRatescascadeFlgWhenMouseClick rest service handler." + e.Message);
                throw;
            }
        }

      

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesKeyDelrec
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        public IEnumerable<MctrCompRates> mctrCompRatesKeyDelrec(MctrCompRates mctrCompRates)
        {
            try
            {
                if (mctrCompRates != null)
                {
                    logger.Debug("Executing mctrCompRatesKeyDelrec rest service handler.");
                    string restApiPath = "MctrCompRatesService/mctrCompRatesKeyDelrec";
                    logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrCompRates);
                    var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                    logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                    return response;
                }
                else
                {
                    logger.Info("The passed parameter mctrCompRates is NULL.");
                    return null;
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.mctrCompRatesKeyDelrec rest service handler." + e.Message);
                throw;
            }
        }

      


        ///*************************************************************
        ///<summary>
        ///Method Name : selectBlockbutCopyWhenButtonPressed
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        public IEnumerable<MctrCompRates> selectBlockbutCopyWhenButtonPressed(MctrCompRates mctrCompRates)
        {
            try
            {
                if (mctrCompRates != null)
                {
                    logger.Debug("Executing selectBlockbutCopyWhenButtonPressed rest service handler.");
                    string restApiPath = "MctrCompRatesService/selectBlockbutCopyWhenButtonPressed";
                    logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrCompRates);
                    var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                    logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                    return response;
                }
                else
                {
                    logger.Info("The passed parameter mctrCompRates is NULL.");
                    return null;
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.selectBlockbutCopyWhenButtonPressed rest service handler." + e.Message);
                throw;
            }
        }



        ///*************************************************************
        ///<summary>
        ///Method Name : getRgRateILOV
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        public IEnumerable<MctrCompRates> getRgRateILOV(MctrCompRates mctrCompRates)
        {
            try
            {
                if (mctrCompRates != null)
                {
                    logger.Debug("Executing getRgRateILOV rest service handler.");
                    string restApiPath = "MctrCompRatesService/getrgrateilov";
                    logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrCompRates);
                    var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                    logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                    return response;
                }
                else
                {
                    logger.Info("The passed parameter mctrCompRates is NULL.");
                    return null;
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.getRgRateILOV rest service handler." + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : getRgRateCLOV
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        public IEnumerable<MctrCompRates> getRgRateCLOV(MctrCompRates mctrCompRates)
        {
            try {
                if (mctrCompRates != null)
                {
                    logger.Debug("Executing getRgRateCLOV rest service handler.");
                    string restApiPath = "MctrCompRatesService/getrgrateclov";
                    logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrCompRates);
                    var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                    logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                    return response;
                }
                else
                {
                    logger.Info("The passed parameter mctrCompRates is NULL.");
                    return null;
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.getRgRateCLOV rest service handler." + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        public IEnumerable<MctrCompRates> mctrCompRatesWhenNewFormInstance(MctrCompRates mctrCompRates)
        {
            try {
                if (mctrCompRates != null)
                {
                    logger.Debug("Executing mctrCompRatesWhenNewFormInstance rest service handler.");
                    string restApiPath = "MctrCompRatesService/mctrCompRatesWhenNewFormInstance";
                    logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrCompRates);
                    var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                    logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                    return response;
                }
                else
                {
                    logger.Info("The passed parameter mctrCompRates is NULL.");
                    return null;
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.getRgRateCLOV rest service handler." + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        public IEnumerable<MctrCompRates> genericLovCall(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Debug("Executing genericLovCall rest service handler.");
                string restApiPath = "MctrCompRatesService/genericLovCall";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrCompRates);
                var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch(Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.genericLovCall rest service handler." + e.Message);
                throw;
            }

        } 
        ///*************************************************************
          ///<summary>
          ///Method Name : mctrCompRatesWhenNewFormInstance
          ///</summary>
          ///<param name = "MctrCompRates"></param>
          ///<returns>IEnumerable<MctrCompRates> </returns>

        public IEnumerable<MctrCompRates> crtetbl(MctrCompRates mctrCompRates)
        {
            try
            {
                string restApiPath = "MctrCompRatesService/crtetbl";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrCompRates);
                var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch(Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.crtetbl rest service handler." + e.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : compositeDelete
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>
        public IEnumerable<MctrCompRates> compositeDelete(MctrCompRates mctrCompRates)
        {
            try
            {
                string restApiPath = "MctrCompRatesService/compositeDelete";
                var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.compositeDelete rest service handler." + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : compositeInsert
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>
        public IEnumerable<MctrCompRates> compositeInsert(MctrCompRates mctrCompRates)
        {
            try
            {
                string restApiPath = "MctrCompRatesService/compositeInsert";
                var response = HandlerUtil<MctrCompRates>.RestPostProcessor(restApiPath, mctrCompRates);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MctrCompRatesHandler.compositeInsert rest service handler." + e.Message);
                throw;
            }
        }
    }
}