
///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MCTR.DataEntity;
using System.Data;
using log4net;
using Oracle.ManagedDataAccess.Client;

using MCTR.DomainEntity;
using MCTR.DataAccessInterface;
using AutoMapper;

namespace MCTR.DataAccess
{
    ///*********************************************************************
    ///<summary>
    ///LbrRateRepository is a data access implementation which holds all 
    ///the data access logic in it.
    ///</summary>
    public class LbrRateRepository : BaseRepository, ILbrRateRepository
    {
        LbrRate obj = new LbrRate();
        readonly List<LbrRate> list = new List<LbrRate>();
         private readonly ILog logger= LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);


        public LbrRateRepository()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrIncrRates"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<LbrRate> LbrRatesWhenNewFormInstance()
        {
            logger.Debug("Executing MCTR.DataAccess.MctrIncrRatesRepository.mctrIncrRatesWhenNewFormInstance with input : ");
            try
            {
                List<LbrRate> ra = new List<LbrRate>();
                LbrRate a = new LbrRate();
                string sqlstmt2 = "select max(fiscal_year) from mctr_lbr_rate";

                int f_year = entities.Database.SqlQuery<int>(sqlstmt2).Single<int>();

                a.f_year = f_year;

                logger.Debug("Response received from  MCTR.DataAccess.MctrIncrRatesRepository.mctrIncrRatesWhenNewFormInstance with input : ");

                ra.Add(a);
                return ra;
            }

            catch (OracleException e)
            {
                logger.Error("Error from MCTR.DataAccess.MctrIncrRatesRepository.mctrIncrRatesWhenNewFormInstance" + e.Message);

                throw;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.MctrIncrRatesRepository.mctrIncrRatesWhenNewFormInstance" + e.Message);

                throw;
            }

        }
        public IEnumerable<LabourRatePyEdit> EditStatus(IEnumerable<LabourRatePyEdit> lbrRate)
        {
            logger.Debug("Executing MCTR.DataAccess.MctrIncrRatesRepository.EditStatus with input : ");
            try
            {
                var labourratepy = lbrRate.First<LabourRatePyEdit>();
                var row = labourratepy.Row;
                var editedRow = labourratepy.EditedRow;
                labourratepy.LbrCount = new Dictionary<string, int>();
                labourratepy.LbrCount.Clear();
                OracleParameter[] parameters = new OracleParameter[5];
                var sql = new StringBuilder("SELECT COUNT(*) FROM MCTR_LBR_RATE WHERE SETID=:0 AND FISCAL_YEAR=:1 AND LABOR_RATE_CD7=:2 AND PROJ_TRANS_CODE=:3 AND RATE=:4 ");
                parameters[0] = new OracleParameter(":0", OracleDbType.Varchar2, editedRow.SETID.ToUpper(System.Globalization.CultureInfo.CurrentCulture), ParameterDirection.Input);
                parameters[1] = new OracleParameter(":1", OracleDbType.Int32, editedRow.FISCAL_YEAR, ParameterDirection.Input);
                parameters[2] = new OracleParameter(":2", OracleDbType.Varchar2, editedRow.LABOR_RATE_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture), ParameterDirection.Input);
                parameters[3] = new OracleParameter(":3", OracleDbType.Varchar2, editedRow.PROJ_TRANS_CODE.ToUpper(System.Globalization.CultureInfo.CurrentCulture), ParameterDirection.Input);
                parameters[4] = new OracleParameter(":4", OracleDbType.Double, editedRow.RATE, ParameterDirection.Input);
                var v_count = entities.Database.SqlQuery<int>(sql.ToString(), parameters).SingleOrDefault();
                labourratepy.LbrCount.Add("add", v_count);
                if (v_count == 0) { 
                if (!(row.SETID.ToUpper(System.Globalization.CultureInfo.CurrentCulture) == editedRow.SETID.ToUpper(System.Globalization.CultureInfo.CurrentCulture) && row.FISCAL_YEAR == editedRow.FISCAL_YEAR && row.LABOR_RATE_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture) == editedRow.LABOR_RATE_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture) && row.PROJ_TRANS_CODE.ToUpper(System.Globalization.CultureInfo.CurrentCulture) == editedRow.PROJ_TRANS_CODE.ToUpper(System.Globalization.CultureInfo.CurrentCulture) && row.RATE == editedRow.RATE))
                {
                    var rowList = new List<LbrRate>();
                    var editedRowList = new List<LbrRate>();
                    rowList.Add(row);
                    editedRowList.Add(editedRow);
                    Delete(rowList);
                    Create(editedRowList);
                }

                }
            }
            catch (OracleException ex)
            {

                logger.Error("MCTR.DataAccess.MctrIncrRatesRepository.EditStatus:" + ex.Message);

            }
            catch (Exception exp)
            {
                logger.Error("MCTR.DataAccess.MctrIncrRatesRepository.EditStatus:"+exp.Message);
                throw exp;
            }
            return lbrRate;
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : selectionfYearOnError
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<LbrRateCy> </returns>

        public IEnumerable<LbrRate> selectionfYearOnError(IEnumerable<LbrRate> lbrRate)
        {
            logger.Debug("Executing MCTR.DataAccess.LbrRateRepository.selectionfYearOnError() with input : " + lbrRate);
            try
            {
                return lbrRate;
            }
            catch (Exception e)
            {

                logger.Error("Error from MCTR.DataAccess.LbrRateRepository.selectionfYearOnError():" + e.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : selectionbutRatesListWhenButtonPressed
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<LbrRateCy> </returns>
        ///  -- download pulled data to excel file.
        public IEnumerable<LbrRate> selectionbutRatesListWhenButtonPressed(IEnumerable<LbrRate> lbrRate)
        {
            logger.Debug("Executing MCTR.DataAccess.LbrRateRepository.selectionbutRatesListWhenButtonPressed() with input : " + lbrRate);
            try
            {
            OracleParameter[] parameter1 = new OracleParameter[1];
            obj = lbrRate.First();
            StringBuilder sb = new StringBuilder("select setid, fiscal_year, labor_rate_cd7, proj_trans_code, rate from mctr_lbr_rate where ( fiscal_year = :0 and :0 is not null ) or :0 is null order by setid asc, fiscal_year asc, labor_rate_cd7 asc");
            parameter1[0] = new OracleParameter(":fiscal_year", OracleDbType.Int32, obj.f_year, ParameterDirection.Input);

            var resultlist = entities.Database.SqlQuery<LbrRate>(sb.ToString(), parameter1).ToList<LbrRate>();

            return resultlist;

        }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LbrRateRepository.selectionbutRatesListWhenButtonPressed():" + e.Message);
                throw;

            }

}
        ///*************************************************************
        ///<summary>
        ///Method Name : Create
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<LbrRate> </returns>
        //Method to create a data in DB
        public IEnumerable<LbrRate> Create(IEnumerable<LbrRate> lbrRate)
        {
            obj = lbrRate.First<LbrRate>();
            obj.lbrCount = new Dictionary<string, int>();
            obj.lbrCount.Clear();
            
            logger.Debug("Executing MCTR.DataAccess.LbrRateRepository.Create() with input : " + lbrRate);
            try
            {
                OracleParameter[] parameters = new OracleParameter[4];
                var sql = new StringBuilder("SELECT COUNT(*) FROM MCTR_LBR_RATE WHERE SETID=:0 AND FISCAL_YEAR=:1 AND LABOR_RATE_CD7=:2 AND PROJ_TRANS_CODE=:3");
                parameters[0] = new OracleParameter(":0", OracleDbType.Varchar2, obj.SETID.ToUpper(System.Globalization.CultureInfo.CurrentCulture), ParameterDirection.Input);
                parameters[1] = new OracleParameter(":1", OracleDbType.Int32, obj.FISCAL_YEAR, ParameterDirection.Input);
                parameters[2] = new OracleParameter(":2", OracleDbType.Varchar2, obj.LABOR_RATE_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture), ParameterDirection.Input);
                parameters[3] = new OracleParameter(":3", OracleDbType.Varchar2, obj.PROJ_TRANS_CODE.ToUpper(System.Globalization.CultureInfo.CurrentCulture), ParameterDirection.Input);
               var  v_count = entities.Database.SqlQuery<int>(sql.ToString(), parameters).SingleOrDefault();

                obj.lbrCount.Add("add", v_count);
                if (v_count == 0)
                {
                    OracleParameter[] parameter1 = new OracleParameter[5];
                    string query = "insert into MCTR_LBR_RATE (SETID,FISCAL_YEAR,LABOR_RATE_CD7,PROJ_TRANS_CODE,RATE) VALUES (:0,:1,:2,:3,:4);";
                    parameter1[0] = new OracleParameter(":0", OracleDbType.Varchar2, obj.SETID.ToUpper(System.Globalization.CultureInfo.CurrentCulture), ParameterDirection.Input);
                    parameter1[1] = new OracleParameter(":1", OracleDbType.Int32, obj.FISCAL_YEAR, ParameterDirection.Input);
                    parameter1[2] = new OracleParameter(":2", OracleDbType.Varchar2, obj.LABOR_RATE_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture), ParameterDirection.Input);
                    parameter1[3] = new OracleParameter(":3", OracleDbType.Varchar2, obj.PROJ_TRANS_CODE.ToUpper(System.Globalization.CultureInfo.CurrentCulture), ParameterDirection.Input);
                    parameter1[4] = new OracleParameter(":4", OracleDbType.Double, obj.RATE, ParameterDirection.Input);
                    entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter1);
                }
                return lbrRate;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LbrRateRepository.Create():" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : Delete
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<LbrRate> </returns>
        //Method to create a data in DB
        public IEnumerable<LbrRate> Delete(IEnumerable<LbrRate> lbrRate)
        {
            logger.Debug("Executing MCTR.DataAccess.LbrRateRepository.Delete() with input : " + lbrRate);
                  try
            {
                obj = lbrRate.First<LbrRate>();
                OracleParameter[] parameter1 = new OracleParameter[4];
                string query = "delete from MCTR_LBR_RATE where (SETID=:0 or SETID is null) and (FISCAL_YEAR=:1 or FISCAL_YEAR is null) and (LABOR_RATE_CD7=:2 or LABOR_RATE_CD7 is null) and (PROJ_TRANS_CODE=:3 or PROJ_TRANS_CODE is null);";
                parameter1[0] = new OracleParameter(":0", OracleDbType.Varchar2, obj.SETID.ToUpper(System.Globalization.CultureInfo.CurrentCulture), ParameterDirection.Input);
                parameter1[1] = new OracleParameter(":1", OracleDbType.Varchar2, obj.FISCAL_YEAR, ParameterDirection.Input);
                parameter1[2] = new OracleParameter(":2", OracleDbType.Varchar2, obj.LABOR_RATE_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture), ParameterDirection.Input);
                parameter1[3] = new OracleParameter(":3", OracleDbType.Varchar2, obj.PROJ_TRANS_CODE.ToUpper(System.Globalization.CultureInfo.CurrentCulture), ParameterDirection.Input);
               
                int result = entities.Database.ExecuteSqlCommand("BEGIN " + query + " END;", parameter1);

            }
            catch (Exception exp)
            {
                string ExceptionMessage = exp.Message;
                throw exp;
            }

            return lbrRate;
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : lbrRatesetidPostChange
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<LbrRate> </returns>
        //Method to create a data in DB

        public IEnumerable<LbrRate> lbrRatesetidPostChange(IEnumerable<LbrRate> lbrRate)
        {
            logger.Debug("Executing MCTR.DataAccess.LbrRateRepository.lbrRatesetidPostChange() with input : " + lbrRate);
            try
            {
                obj = lbrRate.First<LbrRate>();

                    logger.Debug("Executing MCTR.DataAccess.LbrRateRepository.lbrRatesetidPostChange() with input : " + lbrRate);

                    OracleParameter[] parameter1 = new OracleParameter[2];

                    string sqlstmt = "select count(*) from mctr_role_bu lu where lu . bems = :0 and ( lu . business_unit =:1 or ( lu . business_unit = '**' and exists ( select bu . business_unit from MCTR_PS_BUS_UNIT_TBL7_MV bu where bu . business_unit =:1 and bu . group_cd7 = lu . group_cd7 ) ) )";

                    parameter1[0] = new OracleParameter(":lu.bems", OracleDbType.Varchar2, obj.session_bems, ParameterDirection.Input);

                    parameter1[1] = new OracleParameter(":lu.business_unit", OracleDbType.Varchar2, obj.SETID, ParameterDirection.Input);

                    obj.v_count = entities.Database.SqlQuery<int>(sqlstmt, parameter1).Single<int>();
                List<LbrRate> lbrpy = new List<LbrRate>();
                lbrpy.Add(obj);
                return lbrpy;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LbrRateRepository.lbrRatesetidPostChange():" + e.Message);

                throw e;
            }
        }
    



        ///*************************************************************
        ///<summary>
        ///Method Name : LbrRateOnLoad
        ///</summary>
        ///<param name = "lbrRate"></param>
        ///<returns>IEnumerable<LbrRateCy> </returns>

        public IEnumerable<LbrRate> LbrRateOnLoad(IEnumerable<LbrRate> lbrRate)
        {
            logger.Debug("Executing LbrRateOnLoad with input :" + lbrRate);
            try
            {
                OracleParameter[] parameter1 = new OracleParameter[1];
              
                obj = lbrRate.First();
                string sqlstmt = "select * from mctr_owner.MCTR_LBR_RATE where exists ( (select lu.business_unit from mctr_role_bu lu where lu.bems =:0 and (lu.business_unit = setid or (lu.business_unit = '**' and exists (select bu.business_unit from mctr_bus_unit_v bu where bu.business_unit =setid and bu.group_cd7 = lu.group_cd7 ))))) order by setid, fiscal_year, labor_rate_cd7";//
                parameter1[0] = new OracleParameter(":lu.bems", OracleDbType.Varchar2, obj.session_bems, ParameterDirection.Input);
                var rlist = entities.MCTR_LBR_RATE.SqlQuery(sqlstmt, parameter1).ToList<MCTR_LBR_RATE>();
                var response = AutoMapper.Mapper.DynamicMap<IEnumerable<MCTR_LBR_RATE>, IEnumerable<LbrRate>>(rlist);

                return response;
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LbrRateRepository.LbrRateOnLoad():" + e.Message);
                throw;
            }
        }


    }

}

