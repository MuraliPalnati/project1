///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MCTR.DataEntity;
using System.Threading.Tasks;
using AutoMapper;
using System.Data;
using log4net;
using Oracle.ManagedDataAccess.Client;
using MCTR.DomainEntity;
//using MCTR.DataEntity;
using MCTR.DataAccessInterface;


namespace MCTR.DataAccess
{
    ///*********************************************************************
    ///<summary>
    ///LineItemRepository is a data access implementation which holds all 
    ///the data access logic in it.
    ///</summary>
    public class LineItemRepository : BaseRepository, ILineItemRepository //BaseRepository, 
    {

        private readonly ILog logger = null;
        private LineItem obj;

        public LineItemRepository()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItembutOpenMctrWhenButtonPressed
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        public IEnumerable<LineItem> mctrLineItembutOpenMctrWhenButtonPressed(IEnumerable<LineItem> lineItem)
        {
            logger.Debug("Executing MCTR.DataAccess.LineItemRepository.mctrLineItembutOpenMctrWhenButtonPressed() : " + lineItem);
            try
            {
                OracleParameter[] parameters = new OracleParameter[10];
                //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.mctrLineItembutOpenMctrWhenButtonPressed" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItemPostQuery
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItemDomainAdded> </returns>

        public IEnumerable<LineItemDomainAdded> mctrLineItemPostQuery(IEnumerable<LineItem> lineItem)
        {
            logger.Debug("Executing MCTR.DataAccess.LineItem.mctrLineItemPostQuery with input : " + lineItem);
            try
            {

                List<LineItemDomainAdded> added = new List<LineItemDomainAdded>();


                LineItemDomainAdded lineitem = new LineItemDomainAdded();

                OracleParameter[] parameter1 = new OracleParameter[1];




                obj = lineItem.First<LineItem>();

                string sqlstmt1 = "select last_name || ', ' || first_name  from  MCTR_EMPLOYEE_V where bems_id = :0";



                parameter1[0] = new OracleParameter(":bems_id", OracleDbType.Varchar2, obj.BEMS_1, ParameterDirection.Input);


                try
                {
                    var name_1 = entities.Database.SqlQuery<string>(sqlstmt1, parameter1).Single<string>();
                    lineitem.name_1 = name_1;
                }

                catch (Exception e)
                {
                    lineitem.name_1 = null;
                    logger.Error("Error from MCTR.DataAccess.LineItemRepository.mctrLineItemPostQuery" + e.Message);


                }
                try
                {
                    parameter1[0] = new OracleParameter(":bems_id", OracleDbType.Varchar2, obj.BEMS_2, ParameterDirection.Input);

                    var name_2 = entities.Database.SqlQuery<string>(sqlstmt1, parameter1).Single<string>();

                    lineitem.name_2 = name_2;
                }

                catch (Exception e)
                {
                    lineitem.name_2 = null;
                    logger.Error("Error from MCTR.DataAccess.LineItemRepository.mctrLineItemPostQuery" + e.Message);


                }
                try
                {
                    parameter1[0] = new OracleParameter(":bems_id", OracleDbType.Varchar2, obj.BEMS_3, ParameterDirection.Input);

                    var name_3 = entities.Database.SqlQuery<string>(sqlstmt1, parameter1).Single<string>();
                    lineitem.name_3 = name_3;
                }

                catch (Exception e)
                {
                    lineitem.name_3 = null;
                    logger.Error("Error from MCTR.DataAccess.LineItemRepository.mctrLineItemPostQuery" + e.Message);


                }

                OracleParameter[] parameter2 = new OracleParameter[2];


                string sqlstmt2 = " select sum(amount_from)  from mctr_ovrhd where mctr_no = :0 and line_no = :1 and from_to = 'F'";

                parameter2[0] = new OracleParameter(":mctr_no", OracleDbType.Int32, obj.MCTR_NO, ParameterDirection.Input);

                parameter2[1] = new OracleParameter(":line_no", OracleDbType.Int32, obj.LINE_NO, ParameterDirection.Input);

                try
                {
                    Double? oh_amt_from = entities.Database.SqlQuery<Double>(sqlstmt2, parameter2).Single<Double>();
                    lineitem.oh_amt_from = oh_amt_from;

                }
                catch (Exception e)
                {

                    lineitem.oh_amt_from = null;
                    logger.Error("Error from MCTR.DataAccess.LineItemRepository.mctrLineItemPostQuery" + e.Message);

                }

                string sqlstmt3 = " select sum(amount_from)  from mctr_ovrhd where mctr_no = :0 and line_no = :1 and from_to = 'T'";

                parameter2[0] = new OracleParameter(":mctr_no", OracleDbType.Int32, obj.MCTR_NO, ParameterDirection.Input);

                parameter2[1] = new OracleParameter(":line_no", OracleDbType.Int32, obj.LINE_NO, ParameterDirection.Input);

                try
                {
                    Double? oh_amt_to = entities.Database.SqlQuery<Double>(sqlstmt3, parameter2).Single<Double>();
                    lineitem.oh_amt_to = oh_amt_to;
                }

                catch (Exception e)
                {
                    lineitem.oh_amt_to = null;
                    logger.Error("Error from MCTR.DataAccess.LineItemRepository.mctrLineItemPostQuery" + e.Message);

                }


                added.Add(lineitem);

                logger.Debug("Executed MCTR.DataAccess.LineItem.mctrLineItemPostQuery with output : " + added);

                return added;
            }
            catch (OracleException e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.mctrLineItemPostQuery" + e.Message);
                throw;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.mctrLineItemPostQuery" + e.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : lineItemOnError
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        public IEnumerable<LineItem> lineItemOnError(IEnumerable<LineItem> lineItem)
        {
            logger.Debug("Executing  MCTR.DataAccess.LineItemRepository.lineItemOnError(): " + lineItem);
            try
            {
                OracleParameter[] parameters = new OracleParameter[10];

                //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.lineItemOnError()" + e.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : lineItemWhenWindowClosed
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        public IEnumerable<LineItem> lineItemWhenWindowClosed(IEnumerable<LineItem> lineItem)
        {
            logger.Debug("Executing MCTR.DataAccess.LineItemRepository.lineItemWhenWindowClosed()" + lineItem);
            try
            {
                OracleParameter[] parameters = new OracleParameter[10];

                //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.lineItemWhenWindowClosed()" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItemMctrLineItemOnLoad
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>


        public IEnumerable<LineItem> mctrLineItemMctrLineItemOnLoad(IEnumerable<LineItem> lineItem)
        {
            logger.Debug("Executing MCTR.DataAccess.LineItem.mctrLineItemMctrLineItemOnLoad with input : " + lineItem);
            try
            {
                obj = lineItem.First<LineItem>();



                OracleParameter[] parameter1 = new OracleParameter[1];
                //                string sqlstmt = @" SELECT o.AMOUNT_FROM as OVH_AMOUNT_FROM, l.MCTR_NO,l.LINE_NO,l.PERIOD_FROM,l.PERIOD_TO,l.TTD_FLAG,l.PER_FLAG,l.ACTIVITY_ID_FROM,l.PROJECT_ID_FROM,
                //l.ACCOUNT_FROM,l.BUM_CD7_FROM,l.HOME_DEPT_FROM,l.HOME_LOC_FROM,l.HOME_BUGL_FROM,l.HOME_POOL_FROM,l.LABOR_RATE_CD7_FROM,
                //l.CLASS_CD_FROM,l.CUST_TYPE_CD7_FROM,l.WORK_DEPT_FROM,l.WORK_LOC_FROM,l.WORK_BUGL_FROM,l.WORK_POOL_FROM,l.RSC_FROM,
                //l.PROJ_TRANS_TYPE_FROM,l.PROJ_TRANS_CODE_FROM,l.STAT_CODE_FROM,l.UOM_FROM,l.OH_BASE_YR_FROM,l.QUANTITY_FROM,l.AMOUNT_FROM,
                //l.ADJUSTMENT_FROM,l.ACTIVITY_ID_TO,l.PROJECT_ID_TO,l.ACCOUNT_TO,l.BUM_CD7_TO,l.HOME_DEPT_TO,l.HOME_LOC_TO,l.HOME_BUGL_TO,
                //l.HOME_POOL_TO,l.LABOR_RATE_CD7_TO,l.CLASS_CD_TO,l.CUST_TYPE_CD7_TO,l.WORK_DEPT_TO,l.WORK_LOC_TO,l.WORK_BUGL_TO,l.WORK_POOL_TO,
                //l.RSC_TO,l.PROJ_TRANS_TYPE_TO,l.PROJ_TRANS_CODE_TO,l.STAT_CODE_TO,l.UOM_TO,l.OH_BASE_YR_TO,l.QUANTITY_TO,l.AMOUNT_TO,l.ADJUSTMENT_TO,
                //l.MTL_JRNL,l.CONTRACT_NUM_FROM,l.CONTRACT_NUM_TO,l.BUM_CD7_TO_ORIG,l.WPD_FROM,l.WPD_TO,l.BULK_FROM,l.BULK_TO,l.CAUSAL_ID_FROM,l.CAUSAL_ID_TO,
                //l.ESTMTG_PRICG_CD_FROM,l.ESTMTG_PRICG_CD_TO,l.PO_ID_FROM,l.PO_ID_TO,l.PART_NO_FROM,l.PART_NO_TO,l.EPACS_CTT_FROM,l.EPACS_CTT_TO,
                //l.SHOP_ORDER_FROM,l.SHOP_ORDER_TO,l.PO_LINE_FROM,l.PO_LINE_TO,l.ACTY_RED_FLG_FROM,l.ACTY_RED_FLG_TO,l.DEPT_RED_FLG_FROM,l.DEPT_RED_FLG_TO,
                //l.WORK_DEPT_RED_FLG_FROM,l.WORK_DEPT_RED_FLG_TO,l.MATERIAL_QUANTITY_FROM,l.MATERIAL_QUANTITY_TO,l.AFFILIATE_FROM,l.AFFILIATE_TO,l.BEMS_1, l.APPR_CD_1, l.DATE_APPR_1, l.BEMS_2, l.APPR_CD_2, l.DATE_APPR_2, l.BEMS_3, l.APPR_CD_3,l.DATE_APPR_3 FROM MCTR_LINE_ITEM  l LEFT OUTER JOIN MCTR_OVRHD  o
                //ON l.LINE_NO=o.LINE_NO where (exists
                //  (select lu.business_unit from mctr_role_bu lu
                //   where lu.bems = :session_bems
                //    and (lu.business_unit = l.home_bugl_from or
                //        (lu.business_unit = '**' and exists
                //        (select bu.business_unit from mctr_bus_unit_v bu
                //          where bu.business_unit = l.home_bugl_from and bu.group_cd7 = lu.group_cd7))))
                //  or exists
                //  (select op_segment_7 from mctr_bus_unit_v buv
                //    where business_unit = l.home_bugl_from and exists
                //  (select group_cd7 from mctr_role_bu rbu
                //    where bems = :session_bems
                //      and exists (select group_cd7 from mctr_bus_unit_v
                //                   where op_segment_7 = buv.op_segment_7 and group_cd7 = rbu.group_cd7))))
                //    and 
                //GROUP BY o.AMOUNT_FROM, l.MCTR_NO,l.LINE_NO,l.PERIOD_FROM,l.PERIOD_TO,l.TTD_FLAG,l.PER_FLAG,l.ACTIVITY_ID_FROM,l.PROJECT_ID_FROM,
                //l.ACCOUNT_FROM,l.BUM_CD7_FROM,l.HOME_DEPT_FROM,l.HOME_LOC_FROM,l.HOME_BUGL_FROM,l.HOME_POOL_FROM,l.LABOR_RATE_CD7_FROM,
                //l.CLASS_CD_FROM,l.CUST_TYPE_CD7_FROM,l.WORK_DEPT_FROM,l.WORK_LOC_FROM,l.WORK_BUGL_FROM,l.WORK_POOL_FROM,l.RSC_FROM,
                //l.PROJ_TRANS_TYPE_FROM,l.PROJ_TRANS_CODE_FROM,l.STAT_CODE_FROM,l.UOM_FROM,l.OH_BASE_YR_FROM,l.QUANTITY_FROM,l.AMOUNT_FROM,
                //l.ADJUSTMENT_FROM,l.ACTIVITY_ID_TO,l.PROJECT_ID_TO,l.ACCOUNT_TO,l.BUM_CD7_TO,l.HOME_DEPT_TO,l.HOME_LOC_TO,l.HOME_BUGL_TO,
                //l.HOME_POOL_TO,l.LABOR_RATE_CD7_TO,l.CLASS_CD_TO,l.CUST_TYPE_CD7_TO,l.WORK_DEPT_TO,l.WORK_LOC_TO,l.WORK_BUGL_TO,l.WORK_POOL_TO,
                //l.RSC_TO,l.PROJ_TRANS_TYPE_TO,l.PROJ_TRANS_CODE_TO,l.STAT_CODE_TO,l.UOM_TO,l.OH_BASE_YR_TO,l.QUANTITY_TO,l.AMOUNT_TO,l.ADJUSTMENT_TO,
                //l.MTL_JRNL,l.CONTRACT_NUM_FROM,l.CONTRACT_NUM_TO,l.BUM_CD7_TO_ORIG,l.WPD_FROM,l.WPD_TO,l.BULK_FROM,l.BULK_TO,l.CAUSAL_ID_FROM,l.CAUSAL_ID_TO,
                //l.ESTMTG_PRICG_CD_FROM,l.ESTMTG_PRICG_CD_TO,l.PO_ID_FROM,l.PO_ID_TO,l.PART_NO_FROM,l.PART_NO_TO,l.EPACS_CTT_FROM,l.EPACS_CTT_TO,
                //l.SHOP_ORDER_FROM,l.SHOP_ORDER_TO,l.PO_LINE_FROM,l.PO_LINE_TO,l.ACTY_RED_FLG_FROM,l.ACTY_RED_FLG_TO,l.DEPT_RED_FLG_FROM,l.DEPT_RED_FLG_TO,
                //l.WORK_DEPT_RED_FLG_FROM,l.WORK_DEPT_RED_FLG_TO,l.MATERIAL_QUANTITY_FROM,l.MATERIAL_QUANTITY_TO,l.AFFILIATE_FROM,l.AFFILIATE_TO,l.BEMS_1, l.APPR_CD_1, l.DATE_APPR_1, l.BEMS_2, l.APPR_CD_2, l.DATE_APPR_2, l.BEMS_3, l.APPR_CD_3,l.DATE_APPR_3
                //ORDER BY  l.MCTR_NO";



                string sqlstmt = @"select * from mctr_owner.mctr_line_item where (exists
 (select lu.business_unit from mctr_role_bu lu
   where lu.bems = :session_bems
   and (lu.business_unit = home_bugl_from or
       (lu.business_unit = '**' and exists
       (select bu.business_unit from mctr_bus_unit_v bu
          where bu.business_unit = home_bugl_from and bu.group_cd7 = lu.group_cd7))))
  or exists
  (select op_segment_7 from mctr_bus_unit_v buv
    where business_unit = home_bugl_from and exists
  (select group_cd7 from mctr_role_bu rbu
    where bems = :session_bems
      and exists(select group_cd7 from mctr_bus_unit_v
                   where op_segment_7 = buv.op_segment_7 and group_cd7 = rbu.group_cd7)))) 
  order by mctr_no, line_no";

                parameter1[0] = new OracleParameter(":session_bems", OracleDbType.Varchar2,lineItem.First().session_bems, ParameterDirection.Input);
                List<LineItem> rset = new List<LineItem>();
                var resultlist = entities.Database.SqlQuery<LineItem>(sqlstmt, parameter1).ToList<LineItem>();

foreach(var item in resultlist)
                {

                    OracleParameter[] parameter2 = new OracleParameter[2];


                    string sqlstmt2 = " select sum(amount_from)  from mctr_ovrhd where mctr_no = :0 and line_no = :1 and from_to = 'F'";

                    parameter2[0] = new OracleParameter(":mctr_no", OracleDbType.Int32, item.MCTR_NO, ParameterDirection.Input);

                    parameter2[1] = new OracleParameter(":line_no", OracleDbType.Int32, item.LINE_NO, ParameterDirection.Input);

                    try
                    {
                        Double? oh_amt_from = entities.Database.SqlQuery<Double>(sqlstmt2, parameter2).Single<Double>();
                        item.OVH_AMOUNT_TO = Convert.ToDecimal(oh_amt_from);

                    }
                    catch (Exception e)
                    {

                        item.OVH_AMOUNT_FROM = 0;
                       

                    }

                    string sqlstmt3 = " select sum(amount_from)  from mctr_ovrhd where mctr_no = :0 and line_no = :1 and from_to = 'T'";

                    parameter2[0] = new OracleParameter(":mctr_no", OracleDbType.Int32, item.MCTR_NO, ParameterDirection.Input);

                    parameter2[1] = new OracleParameter(":line_no", OracleDbType.Int32, item.LINE_NO, ParameterDirection.Input);

                    try
                    {
                        Double? oh_amt_to = entities.Database.SqlQuery<Double>(sqlstmt3, parameter2).Single<Double>();
                        item.OVH_AMOUNT_TO = Convert.ToDecimal(oh_amt_to);
                    }

                    catch (Exception e)
                    {
                        item.OVH_AMOUNT_TO = 0;
                        logger.Error("Error from MCTR.DataAccess.LineItemRepository.mctrLineItemPostQuery" + e.Message);

                    }

                   var ef= rset.FindIndex(f=>f.MCTR_NO==item.MCTR_NO && f.LINE_NO==item.LINE_NO);
                    if (ef == -1)
                    {
                        rset.Add(item);
                    }

                }

                //var list = AutoMapper.Mapper.DynamicMap<IEnumerable<MCTR_LINE_ITEM>, IEnumerable<LineItem>>(resultlist);

                logger.Debug("Response received from  MCTR.DataAccess.LineItem.mctrLineItemMctrLineItemOnLoad with response : " + resultlist);
                return rset;
            }
            catch (OracleException e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.mctrLineItem.MctrLineItemOnLoad" + e.Message);
                throw;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }


        }
        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBems1LOV
        ///</summary>
        ///<returns>IEnumerable<LineItem> </returns>
        public IEnumerable<MCTREmployeev> getRgBems1LOV()
        {
            logger.Debug("Executing MCTR.DataAccess.LineItem.getRgBems1LOV");
            try
            {


                string sqlstmt = "select e.last_name,e.first_name,e.bems_id,e.component,e.acctg_loc_cdm,e.deptno,e.mail_code,e.work_phone from mctr_employee_v e, mctr_role r where e.bems_id = r.bems and e.emp_status = 'A'  order by e.last_name, e.first_name";

                var resultlist = entities.Database.SqlQuery<MCTREmployeev>(sqlstmt).ToList<MCTREmployeev>();

                logger.Debug("Response received from MCTR.DataAccess.LineItem.getRgBems1LOV ");

                return resultlist;
            }
            catch (OracleException e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.getRgBems1LOV" + e.Message);

                throw;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.getRgBems1LOV" + e.Message);

                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBems2LOV
        ///</summary>
        ///<returns>IEnumerable<LineItem> </returns>

        public IEnumerable<MCTREmployeev> getRgBems2LOV()
        {
            logger.Debug("Executing MCTR.DataAccess.LineItem.getRgBems2LOV");
            try
            {


                string sqlstmt = "select e.last_name,e.first_name,e.bems_id,e.component,e.acctg_loc_cdm,e.deptno,e.mail_code,e.work_phone from mctr_employee_v e, mctr_role r where e.bems_id = r.bems and e.emp_status = 'A'  order by e.last_name, e.first_name";

                var resultlist = entities.Database.SqlQuery<MCTREmployeev>(sqlstmt).ToList<MCTREmployeev>();

                logger.Debug("Response received from MCTR.DataAccess.LineItemRepository.getRgBems2LOV ");


                return resultlist;
            }
            catch (OracleException e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.getRgBems2LOV" + e.Message);

                throw;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.getRgBems2LOV" + e.Message);

                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBems3LOV
        ///</summary>
        ///<returns>IEnumerable<LineItem> </returns>
        public IEnumerable<MCTREmployeev> getRgBems3LOV()
        {
            logger.Debug("Executing MCTR.DataAccess.LineItemRepository.getRgBems3LOV");
            try
            {


                string sqlstmt = "select e.last_name,e.first_name,e.bems_id,e.component,e.acctg_loc_cdm,e.deptno,e.mail_code,e.work_phone from mctr_employee_v e, mctr_role r where e.bems_id = r.bems and e.emp_status = 'A'  order by e.last_name, e.first_name";

                var resultlist = entities.Database.SqlQuery<MCTREmployeev>(sqlstmt).ToList<MCTREmployeev>();

                logger.Debug("Response received from MCTR.DataAccess.LineItemRepository.getRgBems3LOV ");

                return resultlist;
            }
            catch (OracleException e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.getRgBems3LOV" + e.Message);

                throw;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.getRgBems3LOV" + e.Message);

                throw;
            }
        }



        ///*************************************************************
        ///<summary>
        ///Method Name : Get
        ///</summary>
        ///<returns>IEnumerable<LineItem> </returns>
        public IEnumerable<LineItem> Get()
        {
            logger.Debug("Executing MCTR.DataAccess.LineItem.Get");

            try
            {

                var list = entities.MCTR_LINE_ITEM.SqlQuery("select * from MCTR_LINE_ITEM").ToList();

                var relist = AutoMapper.Mapper.DynamicMap<IEnumerable<MCTR_LINE_ITEM>, List<LineItem>>(list);

                logger.Debug("Response received from MCTR.DataAccess.LineItem.Get ");
                return relist;
            }
            catch (OracleException e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.Get" + e.Message);

                throw;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LineItemRepository.Get" + e.Message);

                throw;
            }


        }
    }

}

