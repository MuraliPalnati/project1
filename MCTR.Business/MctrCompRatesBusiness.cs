///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccessInterface;
using MCTR.DataAccess;

namespace MCTR.Business
{

    ///*********************************************************************
    ///<summary>
    ///mctrcomprates_business is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>
    public class MctrCompRatesBusiness : BaseBusiness, IMctrCompRatesBusiness
    {
         private readonly ILog logger;

        IMctrCompRatesRepository repository = new MctrCompRatesRepository();

        public MctrCompRatesBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : crtetbl
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> crtetbl(IEnumerable<MctrCompRates> mctrCompRates)
        {
            try
            {
                logger.Info("MCTR.Business.MctrCompRatesBusiness.crtetbl() with request : " + mctrCompRates);
                var resultlist = repository.crtetbl(mctrCompRates);
                logger.Info("Response received from MCTR.Business.MctrCompRatesBusiness.crtetbl() : " + mctrCompRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCompRatesBusiness.crtetblss" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : genericLovCall
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> genericLovCall(IEnumerable<MctrCompRates> mctrCompRates)
        {
            try
            {
                logger.Info("MCTR.Business.MctrCompRatesBusiness.genericLovCall() with request : " + mctrCompRates);
                var resultlist = repository.genericLovCall(mctrCompRates);
                logger.Info("Response received from MCTR.Business.MctrCompRatesBusiness.genericLovCall() : " + mctrCompRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCompRatesBusiness.genericLovCall" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : getrgrateclov
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> getrgrateclov(IEnumerable<MctrCompRates> mctrCompRates)
        {
            try
            {
                logger.Info("MCTR.Business.MctrCompRatesBusiness.getrgrateclov() with request : " + mctrCompRates);
                var resultlist = repository.getrgrateclov(mctrCompRates);
                logger.Info("Response received from MCTR.Business.MctrCompRatesBusiness.getrgrateclov() : " + mctrCompRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCompRatesBusiness.getrgrateclov" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : getrgrateilov
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> getrgrateilov(IEnumerable<MctrCompRates> mctrCompRates)
        {
            try
            {
                logger.Info("MCTR.Business.MctrCompRatesBusiness.getrgrateilov() with request : " + mctrCompRates);
                var resultlist = repository.getrgrateilov(mctrCompRates);
                logger.Info("Response received from MCTR.Business.MctrCompRatesBusiness.getrgrateilov() : " + mctrCompRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCompRatesBusiness.getrgrateilov" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatescascadeFlgWhenMouseClick
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> mctrCompRatescascadeFlgWhenMouseClick(IEnumerable<MctrCompRates> mctrCompRates)
        {
            try
            {
                logger.Info("MCTR.Business.MctrCompRatesBusiness.mctrCompRatescascadeFlgWhenMouseClick() with request : " + mctrCompRates);
                var resultlist = repository.mctrCompRatescascadeFlgWhenMouseClick(mctrCompRates);
                logger.Info("Response received from MCTR.Business.MctrCompRatesBusiness.mctrCompRatescascadeFlgWhenMouseClick() : " + mctrCompRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCompRatesBusiness.mctrCompRatescascadeFlgWhenMouseClick" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatescmponCdPostTextItem
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> mctrCompRatescmponCdPostTextItem(IEnumerable<MctrCompRates> mctrCompRates)
        {
            try
            {
                logger.Info("MCTR.Business.MctrCompRatesBusiness.mctrCompRatescmponCdPostTextItem() with request : " + mctrCompRates);
                var resultlist = repository.mctrCompRatescmponCdPostTextItem(mctrCompRates);
                logger.Info("Response received from MCTR.Business.MctrCompRatesBusiness.mctrCompRatescmponCdPostTextItem() : " + mctrCompRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCompRatesBusiness.mctrCompRatescmponCdPostTextItem" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesKeyDelrec
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> mctrCompRatesKeyDelrec(IEnumerable<MctrCompRates> mctrCompRates)
        {
            try
            {
                logger.Info("MCTR.Business.MctrCompRatesBusiness.mctrCompRatesKeyDelrec() with request : " + mctrCompRates);
                var resultlist = repository.mctrCompRatesKeyDelrec(mctrCompRates);
                logger.Info("Response received from MCTR.Business.MctrCompRatesBusiness.mctrCompRatesKeyDelrec() : " + mctrCompRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCompRatesBusiness.mctrCompRatesKeyDelrec" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrcompratesonload
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> mctrcompratesonload(IEnumerable<MctrCompRates> mctrCompRates)
        {
            try
            {
                logger.Info("MCTR.Business.MctrCompRatesBusiness.mctrcompratesonload() with request : " + mctrCompRates);
                var resultlist = repository.mctrcompratesonload(mctrCompRates);
                logger.Info("Response received from MCTR.Business.MctrCompRatesBusiness.mctrcompratesonload() : " + mctrCompRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCompRatesBusiness.mctrcompratesonload" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatespoolOutputPostChange
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> mctrCompRatespoolOutputPostChange(IEnumerable<MctrCompRates> mctrCompRates)
        {
            try
            {
                logger.Info("MCTR.Business.MctrCompRatesBusiness.mctrCompRatespoolOutputPostChange() with request : " + mctrCompRates);
                var resultlist = repository.mctrCompRatespoolOutputPostChange(mctrCompRates);
                logger.Info("Response received from MCTR.Business.MctrCompRatesBusiness.mctrCompRatespoolOutputPostChange() : " + mctrCompRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCompRatesBusiness.mctrCompRatespoolOutputPostChange" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesrscOutputPostChange
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> mctrCompRatesrscOutputPostChange(IEnumerable<MctrCompRates> mctrCompRates)
        {
            try
            {
                logger.Info("MCTR.Business.MctrCompRatesBusiness.mctrCompRatesrscOutputPostChange() with request : " + mctrCompRates);
                var resultlist = repository.mctrCompRatesrscOutputPostChange(mctrCompRates);
                logger.Info("Response received from MCTR.Business.MctrCompRatesBusiness.mctrCompRatesrscOutputPostChange() : " + mctrCompRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCompRatesBusiness.mctrCompRatesrscOutputPostChange" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesWhenNewFormInstance
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> mctrCompRatesWhenNewFormInstance(IEnumerable<MctrCompRates> mctrCompRates)
        {
            try
            {
                logger.Info("MCTR.Business.MctrCompRatesBusiness.mctrCompRatesWhenNewFormInstance() with request : " + mctrCompRates);
                var resultlist = repository.mctrCompRatesWhenNewFormInstance(mctrCompRates);
                logger.Info("Response received from MCTR.Business.MctrCompRatesBusiness.mctrCompRatesWhenNewFormInstance() : " + mctrCompRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCompRatesBusiness.mctrCompRatesWhenNewFormInstance" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : selectBlockbutCopyWhenButtonPressed
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> selectBlockbutCopyWhenButtonPressed(IEnumerable<MctrCompRates> mctrCompRates)
        {
            try
            {
                logger.Info("MCTR.Business.MctrCompRatesBusiness.selectBlockbutCopyWhenButtonPressed() with request : " + mctrCompRates);
                var resultlist = repository.selectBlockbutCopyWhenButtonPressed(mctrCompRates);
                logger.Info("Response received from MCTR.Business.MctrCompRatesBusiness.selectBlockbutCopyWhenButtonPressed() : " + mctrCompRates);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrCompRatesBusiness.selectBlockbutCopyWhenButtonPressed" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : crtetbl
        ///</summary>
        ///<param name = "compositeDelete"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> compositeDelete(IEnumerable<MctrCompRates> mctrCompRates)
        {
            var response = repository.compositeDelete(mctrCompRates);
            return mctrCompRates;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : crtetbl
        ///</summary>
        ///<param name = "compositeInsert"></param>
        ///<returns>IEnumerable<mctrCompRates> </returns>
        public IEnumerable<MctrCompRates> compositeInsert(IEnumerable<MctrCompRates> mctrCompRates)
        {
            var response = repository.compositeInsert(mctrCompRates);
            return mctrCompRates;
        }

    }
}