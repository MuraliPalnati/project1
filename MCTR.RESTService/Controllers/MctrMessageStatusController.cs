///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using log4net;
using MCTR.DomainEntities;
using MCTR.BusinessInterface;
using MCTR.Business;
using System;

namespace MCTR.Rest.Controllers
{
    public class MctrMessageStatusController : ApiController
    {
         private readonly ILog logger;
        public MctrMessageStatusController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrMessageStatusOnInsert
        ///</summary>
        ///<param name = "mctrMessageStatus"></param>
        ///<returns>IEnumerable<mctrMessageStatus> </returns>
        [HttpPost]
        [ActionName("mctrMessageStatusOnInsert")]
        public HttpResponseMessage mctrMessageStatusOnInsert(IEnumerable<MctrMessageStatus> mctrMessageStatus)
        {
            try {
                logger.Info("Executing Rest API : mctrMessageStatusOnInsert() with request : " + mctrMessageStatus);
                if (mctrMessageStatus != null)
                {
                    IMctrMessageStatusBusiness mctrMessageStatusBusiness = new MctrMessageStatusBusiness();
                    var response = mctrMessageStatusBusiness.mctrMessageStatusOnInsert(mctrMessageStatus);
                    logger.Info("Response received from mctrMessageStatusBusiness.mctrMessageStatusOnInsert() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch(Exception e)
            {
                throw e;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : GetMessageStatus
        ///</summary>
       
        [HttpGet]
        [ActionName("GetMessageStatus")]

        public IEnumerable<MctrMessageStatus> GetMessageStatus()
        {
            try
            {
                IMctrMessageStatusBusiness mctrMessageStatus = new MctrMessageStatusBusiness();
                var response = mctrMessageStatus.GetMessage();
                return response;
            }
            catch(Exception e)
            {
                logger.Error("Error from  Mctr.DataAccess.GetMessageStatus():" + e.Message);
                throw;
            }
        }


    }
}