///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History : 
using MCTR.Web.Handlers;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using System.Text;
using log4net;
using MCTR.DomainEntity;
using MCTR.Web.Security;
using System.Net.Mail;
using MCTR.Web.Util;
using System.Data;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Diagnostics;
using System.Web;
using System.Xml;
using OfficeOpenXml;
using AutoMapper;

namespace MCTR.Web.Controllers
{
    [CustomAuthorize]
    public class MctrCreateFormController : Controller
    {
        private readonly ILog logger;
        public MctrCreateFormController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }

        [HttpPost]
        public ActionResult mctrHeaderPreInsert(MctrCreateForm mctrCreateForm)
        {
            mctrCreateForm.title = (Convert.ToString(mctrCreateForm.title).ToUpper());
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.mctrHeaderPreInsert().");
            var mctrCreateFormResp = mctrCreateFormHandler.mctrHeaderPreInsert(mctrCreateForm);
            logger.Info("Response Received : " + mctrCreateFormResp);
            Session.Add("Mctr", mctrCreateFormResp.Any() ? mctrCreateFormResp.First() : mctrCreateForm);
            return RedirectToAction("MctrOnLoad");
        }

        public ActionResult ProjectFromPromptWindow(string rowId)
        {
            ViewData["rowId"] = rowId;
            return PartialView();
        }

        public ActionResult ProjectToPromptWindow(string rowId)
        {
            ViewData["rowId"] = rowId;
            return PartialView();
        }
        public ActionResult MctrOnLoad()
        {
            return View("MctrCreateFormView", (MctrCreateForm)Session["Mctr"]);
        }


        public ActionResult MctrLoad(int mctrNo)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();

            logger.Debug("Executing mctrCreateFormHandler.mctrHeaderPreInsert().");

            try
            {
                var mctrCreateForm = new MctrCreateForm();
                mctrCreateForm.MctrNo = mctrNo;
                mctrCreateForm.SessionBems = SessionPerister.BEMSID;
                var mctrCreateFormResp = mctrCreateFormHandler.MctrHeaderOnLoad(mctrCreateForm);
                mctrCreateFormResp.First().DateApprSuper = mctrCreateFormResp.First().DateApprSuper == DateTime.MinValue.ToString() ? null : mctrCreateFormResp.First().DateApprSuper;
                mctrCreateFormResp.First().DateApprFinCtl = DateFormatConverter(mctrCreateFormResp.First().DateApprFinCtl);
                mctrCreateFormResp.First().DateApprAcct = DateFormatConverter(mctrCreateFormResp.First().DateApprAcct);
                mctrCreateFormResp.First().DateApprLbrAcct = DateFormatConverter(mctrCreateFormResp.First().DateApprLbrAcct);
                mctrCreateFormResp.First().DateApprMatlAcct = DateFormatConverter(mctrCreateFormResp.First().DateApprMatlAcct);
                mctrCreateFormResp.First().DateApprCostAcct = DateFormatConverter(mctrCreateFormResp.First().DateApprCostAcct);
                mctrCreateFormResp.First().DateApprSrAcct = DateFormatConverter(mctrCreateFormResp.First().DateApprSrAcct);
                mctrCreateFormResp.First().DateApprCostAcct = DateFormatConverter(mctrCreateFormResp.First().DateApprCostAcct);
                mctrCreateFormResp.First().DateApprSuper = DateFormatConverter(mctrCreateFormResp.First().DateApprSuper);

                logger.Info("Response Received : " + mctrCreateFormResp);
                ModelState.Clear();
                return View("MctrCreateFormView", mctrCreateFormResp.Any() ? mctrCreateFormResp.First() : mctrCreateForm);
            }

            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.selectionfYearOnError() " + e.Message);
                throw;
            }
        }

        public static string DateFormatConverter(string value)
        {         
            if(value!="" && value!=null && value!= "1/1/0001 12:00:00 AM")
            {
                DateTime obj = Convert.ToDateTime(value);
                value=obj.ToString("dd-MMM-yy");
            }
            else
            {
                value = "";
            }
            return value;
        }



        public ActionResult MctrQmode(int mctrNo)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();

            logger.Debug("Executing mctrCreateFormHandler.mctrHeaderPreInsert().");

            try
            {
                var mctrCreateForm = new MctrCreateForm();
                mctrCreateForm.MctrNo = mctrNo;
                mctrCreateForm.SessionBems = SessionPerister.BEMSID;
                var mctrCreateFormResp = mctrCreateFormHandler.MctrHeaderOnLoad(mctrCreateForm);
                mctrCreateFormResp.First().DateApprSuper = mctrCreateFormResp.First().DateApprSuper == DateTime.MinValue.ToString() ? null : mctrCreateFormResp.First().DateApprSuper;
                logger.Info("Response Received : " + mctrCreateFormResp);
                mctrCreateFormResp.First().queryFlag = true;
                ModelState.Clear();
                return View("MctrCreateFormView", mctrCreateFormResp.Any() ? mctrCreateFormResp.First() : mctrCreateForm);
            }

            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.selectionfYearOnError() " + e.Message);
                throw;
            }
        }

        public ActionResult MctrCreateFormView()
        {

            var mctrCreateForm = new MctrCreateForm();
            mctrCreateForm.BemsOrig = SessionPerister.BEMSID;
            Session["BEMSID"] = SessionPerister.BEMSID;
            ViewBag.BEMSID = SessionPerister.BEMSID;
            mctrCreateForm.StatusId = "OA";
            mctrCreateForm.SessionBems = SessionPerister.BEMSID;
            mctrCreateForm.batchload_flag = 'n';
            mctrCreateForm.g_inq_mctrno = null;
            mctrCreateForm.py_frg_lbr = 'n';
            mctrCreateForm.totalOffset = 0;
            mctrCreateForm.CalAmount = 0;
            mctrCreateForm.totalOh = 0;
            mctrCreateForm.totalOhTo = 0;
            mctrCreateForm.TotalAmtTo = 0;
            mctrCreateForm.TotalQtyTo = 0;
            mctrCreateForm.totalOhFrom = 0;
            mctrCreateForm.TotalAmtFrom = 0;
            mctrCreateForm.TotalQtyFrom = 0;
            ModelState.Clear();
            return View(mctrCreateForm);

        }

        //************************************************************
        ///<summary>
        ///Method Name : mctrLineItembutCopyWhenButtonPressed
        ///</summary>
        ///<param name = "MctrCreateForm"></param>
        ///<returns>IEnumerable<MctrCreateForm> </returns>

        public JsonResult mctrLineItembutCopyWhenButtonPressed(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing mctrLineItembutCopyWhenButtonPressed() : " + mctrCreateForm);

            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.mctrLineItembutCopyWhenButtonPressed().");
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItembutCopyWhenButtonPressed(mctrCreateForm);
            logger.Info("Response Received : " + mctrCreateFormResp);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);

        }

        [HttpPost]
        public ActionResult mctrHeaderbutSubmitWhenButtonPressed(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();

            logger.Debug("Executing mctrCreateFormHandler.mctrHeaderPreInsert().");
            try
            {
                mctrCreateForm.SessionBems = SessionPerister.BEMSID;
                var mctrCreateFormResp = mctrCreateFormHandler.mctrHeaderbutSubmitWhenButtonPressed(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                ModelState.Clear();
                return View("MctrCreateFormView", mctrCreateFormResp.Any() ? mctrCreateFormResp.First() : mctrCreateForm);
            }

            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrIncrRates.selectionfYearOnError() " + e.Message);
                throw;
            }
        }





        [HttpPost]
        public JsonResult mctrHeaderPreUpdate(MctrCreateForm mctrcreateform)
        {
            logger.Info("Executing mctrLineItembutCopyWhenButtonPressed() : " + mctrcreateform);
            EmailNotification mail = new EmailNotification();
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.mctrLineItembutCopyWhenButtonPressed().");
            var recievedValues = mctrcreateform;
            recievedValues.oldStatus = recievedValues.StatusId;

            if (recievedValues.processType == "rc")
            {

                if (recievedValues.StatusId == "SA")
                {
                    recievedValues.StatusId = "OR";
                    recievedValues.StatusDescription = "Originator Rejections";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);

                }

                else if (recievedValues.StatusId == "LA" || recievedValues.StatusId == "FA")
                {
                    recievedValues.StatusId = "OR";
                    recievedValues.StatusDescription = "Originator Rejections";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);

                }

                else if (recievedValues.StatusId == "LM" || recievedValues.StatusId == "LB" || recievedValues.StatusId == "MA" || recievedValues.StatusId == "CA" || recievedValues.StatusId == "SR" || recievedValues.StatusId == "JA")
                {
                    recievedValues.StatusId = "AA";
                    recievedValues.StatusDescription = "Accounting Actions";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                }
            }
            //check for status_id of originator actions
            else if (recievedValues.StatusId == "OA" && recievedValues.BemsOrig == recievedValues.SessionBems)
            {
                //check for cancellation
                if (recievedValues.processType == "c")
                {
                    recievedValues.StatusId = "XX";
                    recievedValues.StatusDescription = "Cancelled MCTR";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                }
                //check for submit mctr
                else if (recievedValues.processType == "s" && (!IsNullOrDefault(recievedValues.BemsSuper)) && (!IsNullOrDefault(recievedValues.BemsFinCtl)))
                {

                    if (IsNullOrDefault(recievedValues.ApprCdSuper))
                    {
                        recievedValues.StatusId = "SA";
                        recievedValues.StatusDescription = "Supervisor Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsSuper, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    else
                    {
                        //check if financial control needs approval
                        recievedValues.oldStatus = "OA";
                        if (IsNullOrDefault(recievedValues.ApprCdFinCtl))
                        {
                            recievedValues.StatusDescription = "Financial Control Approval";
                            recievedValues.StatusId = "FA";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        }
                        //check if accountant needs approval
                        else if (IsNullOrDefault(recievedValues.ApprCdAcct))
                        {
                            recievedValues.StatusId = "AA";
                            recievedValues.StatusDescription = "Accounting Actions";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        }
                        else if (((!IsNullOrDefault(recievedValues.BemsLbrAcct) || IsNullOrDefault(recievedValues.BemsLbrAcct) || IsNullOrDefault(recievedValues.ApprCdAcct)) && (IsNullOrDefault(recievedValues.ApprCdLbrAcct) || IsNullOrDefault(recievedValues.ApprCdAcct))) && ((!IsNullOrDefault(recievedValues.BemsMatlAcct) || IsNullOrDefault(recievedValues.ApprCdAcct)) && (IsNullOrDefault(recievedValues.ApprCdMatlAcct) || IsNullOrDefault(recievedValues.ApprCdAcct))))
                        {
                            recievedValues.StatusId = "LM";
                            recievedValues.StatusDescription = "Labor Matl Acctg Approval";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            //allow labor accountant approver role to be routed simultaneously with material accountant approver.
                            if (recievedValues.BemsLbrAcct == recievedValues.BemsMatlAcct)
                            {
                                mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                            }
                            else
                            {
                                mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                                mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsMatlAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                            }
                        }
                        //check if labor accounting needs approval
                        else if (!IsNullOrDefault(recievedValues.BemsLbrAcct) && IsNullOrDefault(recievedValues.ApprCdLbrAcct))
                        {
                            recievedValues.StatusId = "LB";
                            recievedValues.StatusDescription = "Labor Accounting Approval";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }
                        //check if material accounting needs approval
                        else if (!IsNullOrDefault(recievedValues.BemsMatlAcct) && IsNullOrDefault(recievedValues.ApprCdMatlAcct))
                        {
                            recievedValues.StatusId = "MA";
                            recievedValues.StatusDescription = "Material Accounting Approval";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsMatlAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);

                        }
                        //check if cost accounting needs approval
                        else if (!IsNullOrDefault(recievedValues.BemsCostAcct) && IsNullOrDefault(recievedValues.ApprCdCostAcct))
                        {
                            recievedValues.StatusId = "CA";
                            recievedValues.StatusDescription = "Cost Accounting Approval";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsCostAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);

                        }
                        //check if sr mgr of accounting needs approval
                        else if (!IsNullOrDefault(recievedValues.BemsSrAcct) && IsNullOrDefault(recievedValues.ApprCdSrAcct) && !IsNullOrDefault(recievedValues.BemsCostAcct))
                        {
                            recievedValues.StatusId = "SR";
                            recievedValues.StatusDescription = "Journal Accounting Approval";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsSrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }
                    }
                }
            }

            else if (recievedValues.StatusId == "OR" && recievedValues.BemsOrig == recievedValues.SessionBems)
            {
                if (recievedValues.processType == "c")
                {
                    recievedValues.StatusId = "XX";
                    recievedValues.StatusDescription = "Cancelled MCTR";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                }
                //check for reset approvals
                else if (recievedValues.processType == "r")
                {
                    recievedValues.StatusId = "OA";
                    recievedValues.StatusDescription = "Originator Actions";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                }
                //check for submit mctr
                else if (recievedValues.processType == "s" && !IsNullOrDefault(recievedValues.BemsSuper) && !IsNullOrDefault(recievedValues.BemsFinCtl))
                {
                    //check if supervisor needs approval
                    if (IsNullOrDefault(recievedValues.ApprCdSuper)|| recievedValues.ApprCdSuper=="N")
                    {
                        if(recievedValues.ApprCdSuper == "N")
                        {
                            recievedValues.ApprCdSuper = "";
                            recievedValues.DateApprSuper = "";
                        }
                        recievedValues.StatusId = "SA";
                        recievedValues.StatusDescription = "Supervisor Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsSuper, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    else
                    {
                        //check if financial control needs approval
                        if (IsNullOrDefault(recievedValues.ApprCdFinCtl)|| recievedValues.ApprCdFinCtl=="N")
                        {
                            if (recievedValues.ApprCdFinCtl == "N")
                            {
                                recievedValues.ApprCdFinCtl = "";
                                recievedValues.DateApprFinCtl = "";
                            }
                            recievedValues.StatusId = "FA";
                            recievedValues.StatusDescription = "Financial Control Approval";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsFinCtl, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);


                        }
                        //check if accountant needs approval
                        else if (IsNullOrDefault(recievedValues.ApprCdAcct)|| recievedValues.ApprCdAcct=="N")
                        {
                            if (recievedValues.ApprCdAcct == "N")
                            {
                                recievedValues.ApprCdAcct = "";
                                recievedValues.DateApprAcct = "";
                            }
                            recievedValues.StatusId = "AA";
                            recievedValues.StatusDescription = "Accounting Actions";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }

                        //check if labor accounting needs approval and material accounting needs approval
                        else if ((!IsNullOrDefault(recievedValues.BemsLbrAcct) && IsNullOrDefault(recievedValues.ApprCdLbrAcct))|| recievedValues.ApprCdLbrAcct=="N")
                        {
                            if (recievedValues.ApprCdLbrAcct == "N")
                            {
                                recievedValues.ApprCdLbrAcct = "";
                                recievedValues.DateApprLbrAcct = "";
                            }
                            recievedValues.StatusId = "LM";
                            recievedValues.StatusDescription = "Labor Matl Acctg Approval";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                            if (recievedValues.BemsLbrAcct == recievedValues.BemsMatlAcct)
                            {
                                mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                            }
                            else
                            {
                                mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                                mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsMatlAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                            }
                        }
                        //check if labor accounting needs approval
                        else if (!IsNullOrDefault(recievedValues.BemsLbrAcct) && IsNullOrDefault(recievedValues.ApprCdLbrAcct)|| recievedValues.ApprCdLbrAcct == "N")
                        {
                            if (recievedValues.ApprCdLbrAcct == "N")
                            {
                                recievedValues.ApprCdLbrAcct = "";
                                recievedValues.DateApprLbrAcct = "";
                            }
                            recievedValues.StatusId = "LB";
                            recievedValues.StatusDescription = "Labor Accounting Approval";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }
                        //check if material accounting needs approval
                        else if (!IsNullOrDefault(recievedValues.BemsMatlAcct) && IsNullOrDefault(recievedValues.ApprCdMatlAcct)|| recievedValues.ApprCdMatlAcct=="N")
                        {
                            if (recievedValues.ApprCdMatlAcct == "N")
                            {
                                recievedValues.ApprCdMatlAcct = "";
                                recievedValues.DateApprMatlAcct = "";
                            }
                            recievedValues.StatusId = "MA";
                            recievedValues.StatusDescription = "Material Accounting Approval";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsMatlAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }
                        //check if cost accounting needs approval
                        else if ((!IsNullOrDefault(recievedValues.BemsCostAcct) && IsNullOrDefault(recievedValues.ApprCdCostAcct)) || recievedValues.ApprCdCostAcct == "N")
                        {
                            if (recievedValues.ApprCdCostAcct == "N")
                            {
                                recievedValues.ApprCdCostAcct = "";
                                recievedValues.DateApprCostAcct = "";
                            }
                            recievedValues.StatusId = "CA";
                            recievedValues.StatusDescription = "Cost Accounting Approval";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsCostAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }
                        // check if sr mgr of accounting needs approval
                        else if ((!IsNullOrDefault(recievedValues.BemsSrAcct) && IsNullOrDefault(recievedValues.ApprCdSrAcct) && !IsNullOrDefault(recievedValues.BemsCostAcct)) || recievedValues.ApprCdSrAcct == "N")
                        {
                            if (recievedValues.ApprCdSrAcct == "N")
                            {
                                recievedValues.ApprCdSrAcct = "";
                                recievedValues.DateApprSrAcct = "";
                            }
                            recievedValues.StatusId = "SR";
                            recievedValues.StatusDescription = "Journal Accounting Approval";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsSrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }

                    }
                }
            }
            //check for status_id change from sa, fa, aa, lb, ma, ca, sr
            else if (recievedValues.StatusId == "SA")
            {
                // check for y or n approval
                if (recievedValues.ApprCdSuper == "Y")
                {
                    // check for next status area that needs processing la, fa, aa, lb, ma, ca, sr
                    if (IsNullOrDefault(recievedValues.ApprCdFinCtl))
                    {
                        recievedValues.StatusId = "FA";
                        recievedValues.StatusDescription = "Financial Control Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsFinCtl, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);

                    }
                    else if (IsNullOrDefault(recievedValues.ApprCdAcct))
                    {
                        recievedValues.StatusId = "AA";
                        recievedValues.StatusDescription = "Accounting Actions";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    //check if labor accounting needs approval and material accounting needs approval
                    else if (((!IsNullOrDefault(recievedValues.BemsLbrAcct) || IsNullOrDefault(recievedValues.BemsLbrAcct)) && (IsNullOrDefault(recievedValues.ApprCdLbrAcct))) && (!IsNullOrDefault(recievedValues.BemsMatlAcct) && (IsNullOrDefault(recievedValues.ApprCdMatlAcct))))
                    {
                        recievedValues.StatusId = "LM";
                        recievedValues.StatusDescription = "Labor Matl Acctg Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        //allow labor accountant approver role to be routed simultaneously with material accountant approver.
                        if (recievedValues.BemsLbrAcct == recievedValues.BemsMatlAcct)
                        {
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }
                        else
                        {
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsMatlAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }
                    }
                    //check if labor accounting needs approval
                    else if (!IsNullOrDefault(recievedValues.BemsLbrAcct) && IsNullOrDefault(recievedValues.ApprCdLbrAcct))
                    {
                        recievedValues.StatusId = "LB";
                        recievedValues.StatusDescription = "Labor Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);

                    }
                    //check if material accounting needs approval
                    else if (!IsNullOrDefault(recievedValues.BemsMatlAcct) && IsNullOrDefault(recievedValues.ApprCdMatlAcct))
                    {
                        recievedValues.StatusId = "MA";
                        recievedValues.StatusDescription = "Material Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsMatlAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);

                    }
                    //check if cost accounting needs approval
                    else if (!IsNullOrDefault(recievedValues.BemsCostAcct) && IsNullOrDefault(recievedValues.ApprCdCostAcct))
                    {
                        recievedValues.StatusId = "CA";
                        recievedValues.StatusDescription = "Cost Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsCostAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    //check if sr mgr of accounting needs approval
                    else if (!IsNullOrDefault(recievedValues.BemsSrAcct) && IsNullOrDefault(recievedValues.ApprCdSrAcct) && !IsNullOrDefault(recievedValues.BemsCostAcct))
                    {
                        recievedValues.StatusId = "SR";
                        recievedValues.StatusDescription = "Journal Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsSrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }

                }
                else if (recievedValues.ApprCdSuper == "N")
                {
                    recievedValues.oldStatus = "SA";
                    recievedValues.StatusId = "OR";
                    recievedValues.StatusDescription = "Originator Rejections";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                    mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsOrig, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                }
            }
            if (recievedValues.StatusId == "FA")
            {
                //check for y or n approval
                if (recievedValues.ApprCdFinCtl == "Y")
                {
                    if (!IsNullOrDefault(recievedValues.ApprCdAcct) || IsNullOrDefault(recievedValues.ApprCdAcct))
                    {
                        recievedValues.StatusId = "AA";
                        recievedValues.StatusDescription = "Accounting Actions";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        if (!IsNullOrDefault(recievedValues.ApprCdAcct))
                        {
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }
                    }
                    //check if labor accounting needs approval and material accounting needs approval
                    else if ((!IsNullOrDefault(recievedValues.BemsLbrAcct) && IsNullOrDefault(recievedValues.ApprCdLbrAcct)) && (!IsNullOrDefault(recievedValues.BemsMatlAcct) && IsNullOrDefault(recievedValues.ApprCdMatlAcct)))
                    {
                        recievedValues.oldStatus = "LM";
                        recievedValues.StatusDescription = "Labor Matl Acctg Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        //allow labor accountant approver role to be routed simultaneously with material accountant approver.
                        if (recievedValues.BemsLbrAcct == recievedValues.BemsMatlAcct)
                        {
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }
                        else
                        {
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsMatlAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }
                    }
                    //check if labor accounting needs approval
                    else if (!IsNullOrDefault(recievedValues.BemsLbrAcct) && IsNullOrDefault(recievedValues.ApprCdLbrAcct))
                    {
                        recievedValues.StatusId = "LB";
                        recievedValues.StatusDescription = "Labor Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);

                    }
                    //--check if material accounting needs approval
                    else if (!IsNullOrDefault(recievedValues.BemsMatlAcct) && IsNullOrDefault(recievedValues.ApprCdMatlAcct))
                    {
                        recievedValues.StatusId = "MA";
                        recievedValues.StatusDescription = "Material Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsMatlAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);

                    }
                    //check if cost accounting needs approval
                    else if (!IsNullOrDefault(recievedValues.BemsCostAcct) && IsNullOrDefault(recievedValues.ApprCdCostAcct))
                    {
                        recievedValues.StatusId = "CA";
                        recievedValues.StatusDescription = "Cost Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsCostAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);

                    }
                    //check if sr mgr of accounting needs approval
                    else if (!IsNullOrDefault(recievedValues.BemsSrAcct) && IsNullOrDefault(recievedValues.ApprCdSrAcct) && !IsNullOrDefault(recievedValues.BemsCostAcct))
                    {
                        recievedValues.StatusId = "SR";
                        recievedValues.StatusDescription = "Journal Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsSrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                }
                else if (recievedValues.ApprCdFinCtl == "N")
                {
                    recievedValues.StatusId = "OR";
                    recievedValues.StatusDescription = "Originator Rejections";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                    mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsOrig, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                }
            }

            else if (recievedValues.StatusId == "AA")
            {
                //check for y or n approval

                if ((recievedValues.ApprCdAcct == "Y") && (!IsNullOrDefault(recievedValues.BemsCostAcct) || IsNullOrDefault(recievedValues.BemsSrAcct)))
                {
                    // check for next status area that needs processing lb, lm, ma, ca, sr
                    //check if labor accounting needs approval and material accounting needs approval
                    // check if labor accounting needs approval
                    if ((!IsNullOrDefault(recievedValues.BemsLbrAcct) && IsNullOrDefault(recievedValues.ApprCdLbrAcct)) && (!IsNullOrDefault(recievedValues.BemsMatlAcct) && IsNullOrDefault(recievedValues.ApprCdMatlAcct)))
                    {
                        recievedValues.StatusId = "LM";
                        recievedValues.StatusDescription = "Labor Matl Acctg Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        if (recievedValues.BemsLbrAcct == recievedValues.BemsMatlAcct)
                        {
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }
                        else
                        {
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                            if (recievedValues.BemsMatlAcct != "")
                            {
                                mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsMatlAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                            }
                        }

                    }
                    else if (!IsNullOrDefault(recievedValues.BemsLbrAcct) && IsNullOrDefault(recievedValues.ApprCdLbrAcct))
                    {
                        recievedValues.StatusId = "LB";
                        recievedValues.StatusDescription = "Labor Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsLbrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    //check if material accounting needs approval
                    else if (!IsNullOrDefault(recievedValues.BemsMatlAcct) && IsNullOrDefault(recievedValues.ApprCdMatlAcct))
                    {
                        recievedValues.StatusId = "MA";
                        recievedValues.StatusDescription = "Material Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsMatlAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    //check if cost accounting needs approval
                    else if (!IsNullOrDefault(recievedValues.BemsCostAcct) && IsNullOrDefault(recievedValues.ApprCdCostAcct))
                    {
                        recievedValues.StatusId = "CA";
                        recievedValues.StatusDescription = "Cost Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsCostAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    //check if sr mgr of accounting needs approval
                    else if ((!IsNullOrDefault(recievedValues.BemsSrAcct) && IsNullOrDefault(recievedValues.ApprCdSrAcct)) && !IsNullOrDefault(recievedValues.BemsCostAcct))
                    {
                        recievedValues.StatusId = "SR";
                        recievedValues.StatusDescription = "Journal Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsSrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    else
                    {
                        //ensure accountant can only create journals when combined with appropriate approvals.
                        if (((!IsNullOrDefault(recievedValues.BemsMatlAcct) && !IsNullOrDefault(recievedValues.ApprCdMatlAcct)) || !IsNullOrDefault(recievedValues.BemsMatlAcct)) || ((!IsNullOrDefault(recievedValues.BemsSrAcct) && !IsNullOrDefault(recievedValues.ApprCdSrAcct)) || IsNullOrDefault(recievedValues.BemsSrAcct)) && (!IsNullOrDefault(recievedValues.BemsCostAcct) && !IsNullOrDefault(recievedValues.ApprCdCostAcct)))
                        {
                            recievedValues.StatusId = "JA";
                            recievedValues.StatusDescription = "Journal Actions";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        }
                    }
                }

                else if (recievedValues.ApprCdAcct == "N")
                {
                    recievedValues.StatusId = "OR";
                    recievedValues.StatusDescription = "Originator Rejections";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                    mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsOrig, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                }

            }


            else if (recievedValues.StatusId == "LM")
            {
                // check for y or n approval for both labor && material accounting approvers.

                if (recievedValues.ApprCdLbrAcct == "Y")
                {
                    // check for next status area that needs processing ca, sr, ja
                    if (!IsNullOrDefault(recievedValues.BemsMatlAcct) && IsNullOrDefault(recievedValues.ApprCdMatlAcct))
                    {
                        recievedValues.StatusId = "MA";
                        recievedValues.StatusDescription = "Material Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsMatlAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }

                    else if (!IsNullOrDefault(recievedValues.BemsCostAcct) && IsNullOrDefault(recievedValues.ApprCdCostAcct))
                    {

                        recievedValues.StatusId = "CA";
                        recievedValues.StatusDescription = "Cost Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsCostAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    else if (!IsNullOrDefault(recievedValues.BemsSrAcct) && IsNullOrDefault(recievedValues.ApprCdSrAcct))
                    {
                        recievedValues.StatusId = "SR";
                        recievedValues.StatusDescription = "Journal Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsSrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }

                    else
                    {
                        recievedValues.StatusId = "JA";
                        recievedValues.StatusDescription = "Journal Actions";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);

                    }
                }
                else if (recievedValues.ApprCdLbrAcct == "N" || recievedValues.ApprCdMatlAcct == "N")
                {
                    recievedValues.StatusId = "OR";
                    recievedValues.StatusDescription = "Originator Rejections";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                    mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsOrig, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);

                }
            }
            else if (recievedValues.StatusId == "LB")
            {
                // check for y or n approval

                if (recievedValues.ApprCdLbrAcct == "Y")
                {
                    // check for next status area that needs processing ma, ca, sr, ja

                    if (!IsNullOrDefault(recievedValues.BemsMatlAcct) && IsNullOrDefault(recievedValues.ApprCdMatlAcct))
                    {

                        recievedValues.StatusId = "MA";
                        recievedValues.StatusDescription = "Material Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsMatlAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    else if (!IsNullOrDefault(recievedValues.BemsCostAcct) && IsNullOrDefault(recievedValues.ApprCdCostAcct))
                    {

                        recievedValues.StatusId = "CA";
                        recievedValues.StatusDescription = "Cost Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsCostAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    else if (!IsNullOrDefault(recievedValues.BemsSrAcct) && IsNullOrDefault(recievedValues.ApprCdSrAcct) && !IsNullOrDefault(recievedValues.BemsCostAcct))
                    {

                        recievedValues.StatusId = "SR";
                        recievedValues.StatusDescription = "Journal Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsSrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }

                    else
                    {
                        recievedValues.StatusId = "JA";
                        recievedValues.StatusDescription = "Journal Actions";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);

                    }
                }

                else if (recievedValues.ApprCdLbrAcct == "N")
                {
                    recievedValues.StatusId = "OR";
                    recievedValues.StatusDescription = "Originator Rejections";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                    mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsOrig, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                }
            }
            else if (recievedValues.StatusId == "MA")
            {
                // check for y or n approval
                if (recievedValues.ApprCdMatlAcct == "Y")
                {
                    // check for next status area that needs processing ca, sr, ja
                    if (!IsNullOrDefault(recievedValues.BemsCostAcct) && (IsNullOrDefault(recievedValues.ApprCdCostAcct)))
                    {

                        recievedValues.StatusId = "CA";
                        recievedValues.StatusDescription = "Cost Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsCostAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    else if (!IsNullOrDefault(recievedValues.BemsSrAcct) && IsNullOrDefault(recievedValues.ApprCdSrAcct))
                    {
                        recievedValues.StatusId = "SR";
                        recievedValues.StatusDescription = "Journal Accounting Approval";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsSrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    else
                    {
                        recievedValues.StatusId = "JA";
                        recievedValues.StatusDescription = "Journal Actions";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);

                    }
                }
                else if (recievedValues.ApprCdMatlAcct == "N")
                {
                    recievedValues.StatusId = "OR";
                    recievedValues.StatusDescription = "Originator Rejections";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                    mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsOrig, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                }
            }
            else if (recievedValues.StatusId == "CA")
            {
                // check for y or n approval
                {
                    if (recievedValues.ApprCdCostAcct == "Y")
                    {
                        // check for next status area that needs processing sr

                        if (!IsNullOrDefault(recievedValues.BemsSrAcct) && (!IsNullOrDefault(recievedValues.ApprCdSrAcct) || IsNullOrDefault(recievedValues.ApprCdSrAcct)))
                        {

                            recievedValues.StatusId = "SR";
                            recievedValues.StatusDescription = "Journal Accounting Approval";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                            mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsSrAcct, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                        }
                        else
                        {

                            recievedValues.StatusId = "JA";
                            recievedValues.StatusDescription = "Journal Actions";
                            mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);

                        }
                    }


                    else if (recievedValues.ApprCdCostAcct == "N")
                    {
                        recievedValues.StatusId = "OR";
                        recievedValues.StatusDescription = "Originator Actions";
                        mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsOrig, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                }
            }
            else if (recievedValues.StatusId == "SR")
            {
                // check for y or n approval

                if (recievedValues.ApprCdSrAcct == "Y")
                {
                    // set to ja status for processing by one of the accountants.

                    recievedValues.StatusId = "JA";
                    recievedValues.StatusDescription = "Journal Actions";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                    // sending e-mail notification is not done when status set to ja.
                }

                else if (recievedValues.ApprCdSrAcct == "N")
                {
                    recievedValues.StatusId = "OR";
                    recievedValues.StatusDescription = "Originator Rejections";
                    mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
                    mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.BemsOrig, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                }

            }
            else if (recievedValues.StatusId == "XX" && recievedValues.processType == "o")
            {
                // check for reopen
                recievedValues.StatusId = "OR";
                recievedValues.StatusDescription = "Originator Rejections";
                mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
            }
            else if (recievedValues.StatusId == "XS" && recievedValues.processType == "o")
            {
                // check for reopen
                recievedValues.StatusId = "OR";
                recievedValues.StatusDescription = "Originator Rejections";
                mctrCreateFormHandler.mctrHeaderPreUpdate(recievedValues);
            }
            // display status description
            logger.Info("Response Received : " + recievedValues);
            return Json(recievedValues, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult mctrLineItemamountToPostTextItem(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing mctrLineItemamountToPostTextItem() : " + mctrCreateForm);
            try
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.mctrLineItemamountToPostTextItem().");
                var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemamountToPostTextItem(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var resp = mctrCreateFormResp.First<MctrCreateForm>();
                return Json(resp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                throw e;
            }
        }



        public ActionResult mctrheaderbuttoxlswhenbuttonpressed(int MctrNo, short appyear)
        {

            logger.Info("Executing mctrheaderbuttoxlswhenbuttonpressed()");
            try
            {

                HeaderExcel mctrCreateForm = new HeaderExcel();
                mctrCreateForm.MCTR_NO = MctrNo;



                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.mctrheaderbuttoxlswhenbuttonpressed().");
                var mctrCreateFormResp = mctrCreateFormHandler.mctrheaderbuttoxlswhenbuttonpressed(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);

                HeaderExcel headerExcel = mctrCreateFormResp.FirstOrDefault();
                DateTime date = DateTime.Now;
                var year = date.Year;
                List<HeaderExcel> headerExcelList = new List<HeaderExcel>();
                headerExcelList.Add(headerExcel);
                var responseexcel = Mapper.DynamicMap<IEnumerable<HeaderExcel>, IEnumerable<HeaderExcels>>(mctrCreateFormResp).ToList<HeaderExcels>();

                Download obj = new Download();
                if (year > appyear)
                {
                    DataTable[] dt = new DataTable[7];


                    DataTable d1 = new DataTable();
                    string msg = @"MCTR-HEADER for " + MctrNo;


                    d1.Columns.Add(msg);
                    dt[0] = d1;
                    dt[1] = obj.ToDataTable<HeaderExcels>(responseexcel);
                    dt[1].Columns["MCTR_NO"].ColumnName = "MCTR No";
                    dt[1].Columns["TITLE"].ColumnName = "Title";
                    dt[1].Columns["ORIG_BU"].ColumnName = "BU";
                    dt[1].Columns["ORIG_GROUP"].ColumnName = "Grp";
                    dt[1].Columns["FISCAL_YEAR"].ColumnName = "OH Base Year";
                    dt[1].Columns["REASON_CODE"].ColumnName = "Rs Cd";
                    dt[1].Columns["REASON_DESCR"].ColumnName = "Rs Desc";
                    dt[1].Columns["STATUS_ID"].ColumnName = "Current Status";
                    dt[1].Columns["STATUS_DESCR"].ColumnName = "Current Status Desc";
                    dt[1].Columns["DATE_ENTER"].ColumnName = "Date Enter";
                    dt[1].Columns["DATE_JOURNAL"].ColumnName = "Date Journal";
                    dt[1].Columns["APPL_JRNL_ID"].ColumnName = "Appl Jrnl Id";
                    dt[1].Columns["JV_ITEM_CD"].ColumnName = "JV Item Cd";
                    dt[1].Columns["BEMS_ORIG"].ColumnName = "Originator Bems";
                    dt[1].Columns["bems_orig_name"].ColumnName = "Originator Name";
                    dt[1].Columns["Lines_Fr"].ColumnName = "Lines Fr";
                    dt[1].Columns["Lines_Hours_Fr"].ColumnName = "Lines Hours Fr";
                    dt[1].Columns["Lines_Amount_Fr"].ColumnName = "Lines Amount Fr";
                    dt[1].Columns["Lines_To"].ColumnName = "Lines To";
                    dt[1].Columns["Lines_Hours_To"].ColumnName = "Lines Hours To";
                    dt[1].Columns["Lines_Amount_To"].ColumnName = "Lines Amount To";
                    dt[1].Columns["Lines_Total_Amount"].ColumnName = "Lines Total Amount";
                    dt[1].Columns["offset_smry_amt"].ColumnName = "Offset Smry Amt";
                    dt[1].Columns["Overhead_Smry_Amt"].ColumnName = "Overhead Smry Amt";
                    dt[1].Columns["Overhead_Lines_Fr"].ColumnName = "Overhead Lines (Fr)";
                    dt[1].Columns["Overhead_Lines_To"].ColumnName = "Overhead Lines (To)";
                    dt[1].Columns["Overhead_Amount_Fr"].ColumnName = "Overhead Amount (Fr)";
                    dt[1].Columns["Overhead_Amount_To"].ColumnName = "Overhead Amount (To)";
                    dt[1].Columns["BU_NAME"].ColumnName = "BU Name";


                    DataTable d2 = new DataTable();
                    string DetailMessage = @"MCTR-DETAIL for " + MctrNo;
                    d2.Columns.Add(DetailMessage);
                    dt[2] = d2;
                    dt[3] = obj.ToDataTable<MctrLineItemASIS>(headerExcel.mctrLineItemList);
                    dt[3].Columns["LINE_NO"].ColumnName = "Line No";
                    dt[3].Columns["ALT_JRNL"].ColumnName = "Alt Jrnl";
                    dt[3].Columns["FROM_TO"].ColumnName = "Fr/To";
                    dt[3].Columns["ACTIVITY_ID"].ColumnName = "Activity ID";
                    dt[3].Columns["WORK_BUGL"].ColumnName = "BUGL";
                    dt[3].Columns["PROJECT_ID"].ColumnName = "Project ID";
                    dt[3].Columns["CONTRACT_NUM"].ColumnName = "Contract Number";
                    dt[3].Columns["ACCOUNT"].ColumnName = "Account";
                    dt[3].Columns["BUM_CD"].ColumnName = "BUM CD";
                    dt[3].Columns["CUST_TYPE_CD"].ColumnName = "CT CD";
                    dt[3].Columns["BUM_CD7_TO_ORIG"].ColumnName = "BUM Orig";
                    dt[3].Columns["PTT"].ColumnName = "Trn Typ";
                    dt[3].Columns["PTC"].ColumnName = "Trn Cd";
                    dt[3].Columns["STAT_CODE"].ColumnName = "Stat Cd";
                    dt[3].Columns["UOM"].ColumnName = "UOM";
                    dt[3].Columns["AFFILIATE"].ColumnName = "AFF";
                    dt[3].Columns["HOME_DEPT"].ColumnName = "Home Dept";
                    dt[3].Columns["HOME_LOC"].ColumnName = "Hm Loc";
                    dt[3].Columns["HOME_BUGL"].ColumnName = "BU Fr";
                    dt[3].Columns["HOME_POOL"].ColumnName = "Hm OH";
                    dt[3].Columns["LABOR_RATE_CD"].ColumnName = "Lbr Cd";
                    dt[3].Columns["CLASS_CD"].ColumnName = "Cls Cd";
                    dt[3].Columns["WORK_DEPT"].ColumnName = "Work Dept";
                    dt[3].Columns["WORK_LOC"].ColumnName = "Wrk Loc";
                    dt[3].Columns["WORK_POOL"].ColumnName = "Wrk OH";
                    dt[3].Columns["RSC"].ColumnName = "RSC Cd";
                    dt[3].Columns["WPD"].ColumnName = "WPD (BTU)";
                    dt[3].Columns["BULK_ALCTN_CD"].ColumnName = "Bulk Alctn";
                    dt[3].Columns["OH_BASE_YR"].ColumnName = "Base Year";
                    dt[3].Columns["CAUSAL_ID"].ColumnName = "Causl Cd";
                    dt[3].Columns["ESTMTG_PRICG_CD"].ColumnName = "CEC Cd";
                    dt[3].Columns["PO_ID"].ColumnName = "PO Num";
                    dt[3].Columns["PO_LINE"].ColumnName = "PO Line";
                    dt[3].Columns["PART_NO"].ColumnName = "Part Num";
                    dt[3].Columns["EPACS_CTT"].ColumnName = "Epacs CTT";
                    dt[3].Columns["SHOP_ORDER"].ColumnName = "Shop Order";
                    dt[3].Columns["mtl_qty"].ColumnName = "Mat Qty";
                    dt[3].Columns["QUANTITY"].ColumnName = "Hrs";
                    dt[3].Columns["AMOUNT"].ColumnName = "Amount";
                    dt[3].Columns["ADJUSTMENT"].ColumnName = "Adj";
                    dt[3].Columns["GLPC_Backup_TTD"].ColumnName = "GLPC Backup (TTD)";
                    dt[3].Columns["GLPC_Backup_Year"].ColumnName = "GLPC Backup (Year)";


                    DataTable d3 = new DataTable();
                    string OvrhdOffsetMessage1 = @"MCTR-DETAIL for '" + MctrNo;
                    string OvrhdOffsetMessage2 = " Including Overhead/Offset entries";
                    string OvrhdOffsetMessage = string.Concat(OvrhdOffsetMessage1, OvrhdOffsetMessage2);
                    d3.Columns.Add(OvrhdOffsetMessage);
                    dt[4] = d3;
                    dt[5] = obj.ToDataTable<OvrhdOffsetExcel>(headerExcel.ovrhdOffsetExcelList);

                    dt[5].Columns["LINE_NO"].ColumnName = "Ln Itm No";
                    dt[5].Columns["FROM_TO"].ColumnName = "Fr/To";
                    dt[5].Columns["LINE_NO_OH"].ColumnName = "Ln No (OHD/OFS)";
                    dt[5].Columns["ACTIVITY_ID"].ColumnName = "Activity ID";
                    dt[5].Columns["WORK_BUGL"].ColumnName = "BUGL";
                    dt[5].Columns["PROJECT_ID"].ColumnName = "Project ID";
                    dt[5].Columns["ACCOUNT"].ColumnName = "Account";
                    dt[5].Columns["BUM_CD"].ColumnName = "BUM";
                    dt[5].Columns["CUST_TYPE_CD"].ColumnName = "Cust Type";
                    dt[5].Columns["PTT"].ColumnName = "PTT";
                    dt[5].Columns["PTC"].ColumnName = "PTC";
                    dt[5].Columns["STAT_CODE"].ColumnName = "STAT";
                    dt[5].Columns["UOM"].ColumnName = "UOM";
                    dt[5].Columns["AFFILIATE"].ColumnName = "AFF";
                    dt[5].Columns["HOME_DEPT"].ColumnName = "Hm Dept";
                    dt[5].Columns["HOME_LOC"].ColumnName = "Hm Loc";
                    dt[5].Columns["HOME_BUGL"].ColumnName = "Hm BU";
                    dt[5].Columns["HOME_POOL"].ColumnName = "Hm OH";
                    dt[5].Columns["LABOR_RATE_CD"].ColumnName = "Lbr Cd";
                    dt[5].Columns["CLASS_CD"].ColumnName = "Cls Cd";
                    dt[5].Columns["WORK_DEPT"].ColumnName = "Wrk Dept";
                    dt[5].Columns["WORK_LOC"].ColumnName = "Wrk Loc";
                    dt[5].Columns["WORK_POOL"].ColumnName = "Wrk OH";
                    dt[5].Columns["RSC"].ColumnName = "RSC";
                    dt[5].Columns["WPD"].ColumnName = "WPD";
                    dt[5].Columns["BULK_ALCTN_CD"].ColumnName = "BULK";
                    dt[5].Columns["OH_BASE_YR"].ColumnName = "Base Year";
                    dt[5].Columns["QUANTITY"].ColumnName = "Hours";
                    dt[5].Columns["AMOUNT"].ColumnName = "Amount";



                    DataTable d4 = new DataTable();
                    d4.Columns.Add("End of Data Export Listing");

                    dt[6] = d4;
                    d1.Dispose();
                    d2.Dispose();
                    d3.Dispose();
                    d4.Dispose();
                    string filename = "xtrt-MCTR-" + MctrNo + DateTime.Now.ToString("yyyyMMddTHHmmss");

                    var result = obj.ExportExcelData(dt, filename);
                    byte[] fileBytes = Encoding.ASCII.GetBytes(result);

                    var cd = new System.Net.Mime.ContentDisposition
                    {
                        FileName = filename + ".xls",
                        Inline = false,
                    };
                    Response.ContentType = "application/vnd.ms-excel";
                    Response.AppendHeader("Content-Disposition", cd.ToString());

                    return File(fileBytes, filename);

                }
                else
                {
                    DataTable[] dt = new DataTable[5];


                    DataTable d1 = new DataTable();
                    string msg = @"MCTR-HEADER for " + MctrNo;


                    d1.Columns.Add(msg);
                    dt[0] = d1;
                    dt[1] = obj.ToDataTable<HeaderExcels>(responseexcel);
                    dt[1].Columns["MCTR_NO"].ColumnName = "MCTR No";
                    dt[1].Columns["TITLE"].ColumnName = "Title";
                    dt[1].Columns["ORIG_BU"].ColumnName = "BU";
                    dt[1].Columns["ORIG_GROUP"].ColumnName = "Grp";
                    dt[1].Columns["FISCAL_YEAR"].ColumnName = "OH Base Year";
                    dt[1].Columns["REASON_CODE"].ColumnName = "Rs Cd";
                    dt[1].Columns["REASON_DESCR"].ColumnName = "Rs Desc";
                    dt[1].Columns["STATUS_ID"].ColumnName = "Current Status";
                    dt[1].Columns["STATUS_DESCR"].ColumnName = "Current Status Desc";
                    dt[1].Columns["DATE_ENTER"].ColumnName = "Date Enter";
                    dt[1].Columns["DATE_JOURNAL"].ColumnName = "Date Journal";
                    dt[1].Columns["APPL_JRNL_ID"].ColumnName = "Appl Jrnl Id";
                    dt[1].Columns["JV_ITEM_CD"].ColumnName = "JV Item Cd";
                    dt[1].Columns["BEMS_ORIG"].ColumnName = "Originator Bems";
                    dt[1].Columns["bems_orig_name"].ColumnName = "Originator Name";
                    dt[1].Columns["Lines_Fr"].ColumnName = "Lines Fr";
                    dt[1].Columns["Lines_Hours_Fr"].ColumnName = "Lines Hours Fr";
                    dt[1].Columns["Lines_Amount_Fr"].ColumnName = "Lines Amount Fr";
                    dt[1].Columns["Lines_To"].ColumnName = "Lines To";
                    dt[1].Columns["Lines_Hours_To"].ColumnName = "Lines Hours To";
                    dt[1].Columns["Lines_Amount_To"].ColumnName = "Lines Amount To";
                    dt[1].Columns["Lines_Total_Amount"].ColumnName = "Lines Total Amount";
                    dt[1].Columns["offset_smry_amt"].ColumnName = "Offset Smry Amt";
                    dt[1].Columns["Overhead_Smry_Amt"].ColumnName = "Overhead Smry Amt";
                    dt[1].Columns["Overhead_Lines_Fr"].ColumnName = "Overhead Lines (Fr)";
                    dt[1].Columns["Overhead_Lines_To"].ColumnName = "Overhead Lines (To)";
                    dt[1].Columns["Overhead_Amount_Fr"].ColumnName = "Overhead Amount (Fr)";
                    dt[1].Columns["Overhead_Amount_To"].ColumnName = "Overhead Amount (To)";
                    dt[1].Columns["BU_NAME"].ColumnName = "BU Name";


                    DataTable d2 = new DataTable();
                    string DetailMessage = @"MCTR-DETAIL for " + MctrNo;
                    d2.Columns.Add(DetailMessage);
                    dt[2] = d2;
                    dt[3] = obj.ToDataTable<MctrLineItemASIS>(headerExcel.mctrLineItemList);
                    dt[3].Columns["LINE_NO"].ColumnName = "Line No";
                    dt[3].Columns["ALT_JRNL"].ColumnName = "Alt Jrnl";
                    dt[3].Columns["FROM_TO"].ColumnName = "Fr/To";
                    dt[3].Columns["ACTIVITY_ID"].ColumnName = "Activity ID";
                    dt[3].Columns["WORK_BUGL"].ColumnName = "BUGL";
                    dt[3].Columns["PROJECT_ID"].ColumnName = "Project ID";
                    dt[3].Columns["CONTRACT_NUM"].ColumnName = "Contract Number";
                    dt[3].Columns["ACCOUNT"].ColumnName = "Account";
                    dt[3].Columns["BUM_CD"].ColumnName = "BUM CD";
                    dt[3].Columns["CUST_TYPE_CD"].ColumnName = "CT CD";
                    dt[3].Columns["BUM_CD7_TO_ORIG"].ColumnName = "BUM Orig";
                    dt[3].Columns["PTT"].ColumnName = "Trn Typ";
                    dt[3].Columns["PTC"].ColumnName = "Trn Cd";
                    dt[3].Columns["STAT_CODE"].ColumnName = "Stat Cd";
                    dt[3].Columns["UOM"].ColumnName = "UOM";
                    dt[3].Columns["AFFILIATE"].ColumnName = "AFF";
                    dt[3].Columns["HOME_DEPT"].ColumnName = "Home Dept";
                    dt[3].Columns["HOME_LOC"].ColumnName = "Hm Loc";
                    dt[3].Columns["HOME_BUGL"].ColumnName = "BU Fr";
                    dt[3].Columns["HOME_POOL"].ColumnName = "Hm OH";
                    dt[3].Columns["LABOR_RATE_CD"].ColumnName = "Lbr Cd";
                    dt[3].Columns["CLASS_CD"].ColumnName = "Cls Cd";
                    dt[3].Columns["WORK_DEPT"].ColumnName = "Work Dept";
                    dt[3].Columns["WORK_LOC"].ColumnName = "Wrk Loc";
                    dt[3].Columns["WORK_POOL"].ColumnName = "Wrk OH";
                    dt[3].Columns["RSC"].ColumnName = "RSC Cd";
                    dt[3].Columns["WPD"].ColumnName = "WPD (BTU)";
                    dt[3].Columns["BULK_ALCTN_CD"].ColumnName = "Bulk Alctn";
                    dt[3].Columns["OH_BASE_YR"].ColumnName = "Base Year";
                    dt[3].Columns["CAUSAL_ID"].ColumnName = "Causl Cd";
                    dt[3].Columns["ESTMTG_PRICG_CD"].ColumnName = "CEC Cd";
                    dt[3].Columns["PO_ID"].ColumnName = "PO Num";
                    dt[3].Columns["PO_LINE"].ColumnName = "PO Line";
                    dt[3].Columns["PART_NO"].ColumnName = "Part Num";
                    dt[3].Columns["EPACS_CTT"].ColumnName = "Epacs CTT";
                    dt[3].Columns["SHOP_ORDER"].ColumnName = "Shop Order";
                    dt[3].Columns["mtl_qty"].ColumnName = "Mat Qty";
                    dt[3].Columns["QUANTITY"].ColumnName = "Hrs";
                    dt[3].Columns["AMOUNT"].ColumnName = "Amount";
                    dt[3].Columns["ADJUSTMENT"].ColumnName = "Adj";
                    dt[3].Columns["GLPC_Backup_TTD"].ColumnName = "GLPC Backup (TTD)";
                    dt[3].Columns["GLPC_Backup_Year"].ColumnName = "GLPC Backup (Year)";

                    DataTable d3 = new DataTable();
                    d3.Columns.Add("End of Data Export Listing");
                    dt[4] = d3;
                    d1.Dispose();
                    d2.Dispose();
                    d3.Dispose();

                    string filename = "xtrt-MCTR-" + MctrNo + DateTime.Now.ToString("yyyyMMddTHHmmss");

                    var result = obj.ExportExcelData(dt, filename);
                    byte[] fileBytes = Encoding.ASCII.GetBytes(result);

                    var cd = new System.Net.Mime.ContentDisposition
                    {
                        FileName = filename + ".xls",
                        Inline = false,
                    };
                    Response.ContentType = "application/vnd.ms-excel";
                    Response.AppendHeader("Content-Disposition", cd.ToString());

                    return File(fileBytes, filename);
                }



            }
            catch (Exception e)
            {
                throw e;
            }
        }


        public ActionResult MctrOHForm()
        {
            return PartialView("MctrOHForm");
        }

        public JsonResult mctrLineItembutOhAmtFromWhenButtonPressed(MctrOhFormBl mctrOhFormBl)
        {
            try
            {
                mctrOhFormBl.MCTR_NO = 55916;
                mctrOhFormBl.LINE_NO = 1;
                mctrOhFormBl.FROM_TO = "F";

                MctrOhFormBlHandler mctrOhFormBlHandler = new MctrOhFormBlHandler();
                logger.Debug("Executing mctrOffsetFormBlHandler.mctrOffsetMctrOffsetOnLoad().");
                var mctrOhFormBlResp = mctrOhFormBlHandler.mctrOhMctrOhOnLoad(mctrOhFormBl);
                logger.Info("Response Received : " + mctrOhFormBlResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrOhFormBlResp.Count(),
                    rows = mctrOhFormBlResp,
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.DataAccess.mctrLineItembutOhAmtFromWhenButtonPressed():" + e.Message);
                throw;
            }

        }



        [HttpPost]
        public ActionResult mctrLineItembutOhAmtToWhenButtonPressed(MctrOhFormBl mctrOhFormBl)
        {
            try
            {
                mctrOhFormBl.MCTR_NO = 55916;
                mctrOhFormBl.LINE_NO = 1;
                mctrOhFormBl.FROM_TO = "T";

                MctrOhFormBlHandler mctrOhFormBlHandler = new MctrOhFormBlHandler();
                logger.Debug("Executing mctrOffsetFormBlHandler.mctrOffsetMctrOffsetOnLoad().");
                var mctrOhFormBlResp = mctrOhFormBlHandler.mctrOhMctrOhOnLoad(mctrOhFormBl);
                logger.Info("Response Received : " + mctrOhFormBlResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrOhFormBlResp.Count(),
                    rows = mctrOhFormBlResp,
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.Controller.mctrLineItembutOhAmtToWhenButtonPressed():" + e.Message);
                throw;
            }
        }

        [HttpPost]
        public ActionResult mctrHeaderbutMctrOverheadWhenButtonPressed(MctrOhFormBl mctrOhFormBl)
        {
            try
            {
                mctrOhFormBl.MCTR_NO = 55916;
                mctrOhFormBl.LINE_NO = 1;
                mctrOhFormBl.FROM_TO = "B";

                MctrOhFormBlHandler mctrOhFormBlHandler = new MctrOhFormBlHandler();
                logger.Debug("Executing mctrOffsetFormBlHandler.mctrOffsetMctrOffsetOnLoad().");
                var mctrOhFormBlResp = mctrOhFormBlHandler.mctrOhMctrOhOnLoad(mctrOhFormBl);
                logger.Info("Response Received : " + mctrOhFormBlResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrOhFormBlResp.Count(),
                    rows = mctrOhFormBlResp,
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.mctrHeaderbutMctrOverheadWhenButtonPressed.mctrHeaderbutMctrOverheadWhenButtonPressed():" + e.Message);
                throw;
            }
        }

        public ActionResult TTDFlagLegend()
        {
            return PartialView();
        }

        public ActionResult PERFlagLegend()
        {
            return PartialView();
        }

        public ActionResult BUGroupPopUp()
        {
            return PartialView();
        }

        [HttpPost]
        public JsonResult mctrLineItemOnLoad(int mctrNo)
        {
            logger.Info("Executing mctrLineItemMctrLineItemOnLoad() : " + mctrNo);
            var mctrLineItem = new MctrLineItem();
            mctrLineItem.MCTR_NO = mctrNo;
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.mctrLineItemMctrLineItemOnLoad().");
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemOnload(mctrLineItem);
            logger.Info("Response Received : " + mctrCreateFormResp);
            var jsonData = new
            {
                total = 1,
                page = 1,
                records = mctrCreateFormResp.Count(),
                rows = mctrCreateFormResp,
                userdata = mctrCreateFormResp
            };
            return Json(jsonData, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public JsonResult mctrHeaderbutAcctWhenButtonPressedOpenLOV(string SessionBems)
        {
            logger.Info("Executing mctrHeaderbutAcctWhenButtonPressedOpenLOV() : " + SessionBems);
            if (SessionPerister.ACCOUNTANTROLE == "Y")
            {
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult getRgProjFromPromptLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView();
        }

        [HttpGet]
        ///*************************************************************
        ///<summary>
        ///Method Name : ttdCheckTtdCheckOnLoad
        ///</summary>
        ///<param name = "TtdCheckBl"></param>
        ///<returns>IEnumerable<TtdCheckBl> </returns>
        public JsonResult getRgProjFromPromptLOV(CreateMctrLov createmctrlov)
        {
            try
            {
                MctrCreateFormHandler mctrcreateformhandler = new MctrCreateFormHandler();
                logger.Debug("Executing statusHandler.statusWhenNewFormInstance().");
                var returnedPrj = mctrcreateformhandler.getRgProjFromPromptLOV(createmctrlov);
                if (returnedPrj.First().getRgProj.Any())
                {
                    logger.Info("Response Received : " + returnedPrj);
                    var jsonData = new
                    {
                        total = 1,
                        page = 1,
                        records = returnedPrj.First().getRgProj.Count(),
                        rows = returnedPrj.First().getRgProj,
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return null;
                }

            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }

        }
        public ActionResult getRgProjToPromptLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView();
        }
        public ActionResult ProjToPromptLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView();
        }
        public ActionResult ProjFromPromptLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView();
        }
        [HttpGet]
        ///*************************************************************
        ///<summary>
        ///Method Name : ttdCheckTtdCheckOnLoad
        ///</summary>
        ///<param name = "TtdCheckBl"></param>
        ///<returns>IEnumerable<TtdCheckBl> </returns>
        public JsonResult getRgProjToPromptLOV(CreateMctrLov createmctrlov)
        {
            try
            {
                MctrCreateFormHandler mctrcreateformhandler = new MctrCreateFormHandler();
                logger.Debug("Executing statusHandler.statusWhenNewFormInstance().");
                var returnedPrj = mctrcreateformhandler.getRgProjToPromptLOV(createmctrlov);
                logger.Info("Response Received : " + returnedPrj);
                if (returnedPrj.First().getRgProj.Any())
                {

                    var jsonData = new
                    {
                        total = 1,
                        page = 1,
                        records = returnedPrj.First().getRgProj.Count(),
                        rows = returnedPrj.First().getRgProj,
                        userdata = returnedPrj.First().getRgProj
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return null;
                }
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }

        }



        [HttpGet]
        public ActionResult mctrHeaderbutJustificationWhenButtonPressed(string origBu, int MctrNo)
        {
            var mctrCreateForm = new MctrCreateForm();
            mctrCreateForm.OrigBu = origBu;
            mctrCreateForm.MctrNo = MctrNo;

            logger.Info("Executing mctrHeaderbutJustificationWhenButtonPressed() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.mctrHeaderbutJustificationWhenButtonPressed().");
                var mctrCreateFormResp = mctrCreateFormHandler.mctrHeaderbutJustificationWhenButtonPressed(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                ModelState.Clear();
                return PartialView("JustificationWindow", mctrCreateFormResp.First());
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        [HttpPost]
        public JsonResult justificationsave(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.justificationsave().");
            var mctrCreateFormResp = mctrCreateFormHandler.justificationsave(mctrCreateForm);
            return Json(mctrCreateFormResp, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult mctrHeaderbutJrnlWhenButtonPressed(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing mctrHeaderbutJrnlWhenButtonPressed() : " + mctrCreateForm);
            if (SessionPerister.ACCOUNTANTROLE == "Y")
            {
                mctrCreateForm.session_bems = SessionPerister.BEMSID;
                if (mctrCreateForm != null)
                {
                    MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                    logger.Debug("Executing mctrCreateFormHandler.mctrHeaderbutJrnlWhenButtonPressed().");
                    var mctrCreateFormResp = mctrCreateFormHandler.mctrHeaderbutJrnlWhenButtonPressed(mctrCreateForm);
                    var mctrCreateFormResp2 = mctrCreateFormHandler.mctrHeaderPreInsert(mctrCreateFormResp.First());
                    EmailNotification mail = new EmailNotification();
                    MctrCreateForm recievedValues = mctrCreateFormResp.First();
                    if (recievedValues.StatusId == "IP")
                    {
                        mail.SendEmail(recievedValues.MctrNo, recievedValues.BemsOrig, recievedValues.session_bems, recievedValues.StatusId, recievedValues.StatusDescription, recievedValues.title);
                    }
                    logger.Info("Response Received : " + mctrCreateFormResp);
                    return Json(mctrCreateFormResp2, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return Json(" ", JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                throw new Exception("'accountant role access is required to perform this function.'");
            }
        }

        [HttpPost]
        public JsonResult mctrHeaderbutUnjrnlWhenButtonPressed(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing mctrHeaderbutUnjrnlWhenButtonPressed() : " + mctrCreateForm);
            if (SessionPerister.ACCOUNTANTROLE == "Y")
            {
                if (mctrCreateForm != null)
                {
                    MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                    logger.Debug("Executing mctrCreateFormHandler.mctrHeaderbutUnjrnlWhenButtonPressed().");
                    var mctrCreateFormResp = mctrCreateFormHandler.mctrHeaderbutUnjrnlWhenButtonPressed(mctrCreateForm);
                    var mctrCreateFormResp2 = mctrCreateFormHandler.mctrHeaderPreInsert(mctrCreateFormResp.First());
                    logger.Info("Response Received : " + mctrCreateFormResp);

                    return Json(mctrCreateFormResp2, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return Json("", JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                throw new Exception("you must have accounting role to unjournal.");
            }
        }

        public ActionResult TTDInquiryOnLoad(string rowId)
        {
            return PartialView("TTDInquire", rowId);
        }


        public JsonResult ttdInqCyrTtdInqCyrOnLoad(MctrLineiteminquiry mctrlineitem)
        {
            logger.Info("Executing ttdInqCyrTtdInqCyrOnLoad() : " + mctrlineitem);

            mctrlineitem.ACTIVITY_ID = mctrlineitem.ACTIVITY_ID_FROM;
            mctrlineitem.PROJECT_ID = mctrlineitem.PROJECT_ID_FROM;
            mctrlineitem.ACCOUNT = mctrlineitem.ACCOUNT_FROM;
            mctrlineitem.BUSINESS_UNIT_GL = mctrlineitem.WORK_BUGL_FROM;
            mctrlineitem.BUS_UNIT_GL_FROM = mctrlineitem.HOME_BUGL_FROM;
            mctrlineitem.HOME_LOCATION_CD7 = mctrlineitem.HOME_LOCATION_CD7 == null ? "" : mctrlineitem.HOME_LOCATION_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.DEPTID_FROM = mctrlineitem.DEPTID_FROM == null ? "" : mctrlineitem.DEPTID_FROM.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.WORK_LOCATION_CD7 = mctrlineitem.WORK_LOCATION_CD7 == null ? "" : mctrlineitem.WORK_LOCATION_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.DEPTID = mctrlineitem.DEPTID == null ? "" : mctrlineitem.DEPTID.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.RESOURCE_SUB_CAT = mctrlineitem.RESOURCE_SUB_CAT == null ? "" : mctrlineitem.RESOURCE_SUB_CAT.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.PROJ_TRANS_TYPE = mctrlineitem.PROJ_TRANS_TYPE_FROM == null ? "" : mctrlineitem.PROJ_TRANS_TYPE_FROM.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.PROJ_TRANS_CODE = mctrlineitem.PROJ_TRANS_CODE_FROM == null ? "" : mctrlineitem.PROJ_TRANS_CODE_FROM.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.CLASS_CD7 = mctrlineitem.CLASS_CD7 == null ? "" : mctrlineitem.CLASS_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.WPD_ID7 = mctrlineitem.WPD_ID7 == null ? "" : mctrlineitem.WPD_ID7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.BULK_ALCTN_CD7 = mctrlineitem.BULK_ALCTN_CD7 == null ? "" : mctrlineitem.BULK_ALCTN_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);

            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.ttdInqCyrTtdInqCyrOnLoad().");
            var mctrCreateFormResp = mctrCreateFormHandler.ttdInqCyrTtdInqCyrOnLoad(mctrlineitem);
            logger.Info("Response Received : " + mctrCreateFormResp);
            var jsonData = new
            {
                total = 1,
                page = 1,
                records = mctrCreateFormResp.Count(),
                rows = mctrCreateFormResp.First().MctrRpMasterV,
            };
            return Json(jsonData, JsonRequestBehavior.AllowGet);

        }

        public JsonResult ttdInqPyrTtdInqPyrOnLoad(MctrLineiteminquiry mctrlineitem)
        {
            logger.Info("Executing ttdInqCyrTtdInqCyrOnLoad() : " + mctrlineitem);

            mctrlineitem.ACTIVITY_ID = mctrlineitem.ACTIVITY_ID_FROM;
            mctrlineitem.PROJECT_ID = mctrlineitem.PROJECT_ID_FROM;
            mctrlineitem.ACCOUNT = mctrlineitem.ACCOUNT_FROM;
            mctrlineitem.BUSINESS_UNIT_GL = mctrlineitem.WORK_BUGL_FROM;
            mctrlineitem.BUS_UNIT_GL_FROM = mctrlineitem.HOME_BUGL_FROM;
            mctrlineitem.HOME_LOCATION_CD7 = mctrlineitem.HOME_LOCATION_CD7 == null ? "" : mctrlineitem.HOME_LOCATION_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.DEPTID_FROM = mctrlineitem.DEPTID_FROM == null ? "" : mctrlineitem.DEPTID_FROM.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.WORK_LOCATION_CD7 = mctrlineitem.WORK_LOCATION_CD7 == null ? "" : mctrlineitem.WORK_LOCATION_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.DEPTID = mctrlineitem.DEPTID == null ? "" : mctrlineitem.DEPTID.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.RESOURCE_SUB_CAT = mctrlineitem.RESOURCE_SUB_CAT == null ? "" : mctrlineitem.RESOURCE_SUB_CAT.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.PROJ_TRANS_TYPE = mctrlineitem.PROJ_TRANS_TYPE_FROM == null ? "" : mctrlineitem.PROJ_TRANS_TYPE_FROM.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.PROJ_TRANS_CODE = mctrlineitem.PROJ_TRANS_CODE_FROM == null ? "" : mctrlineitem.PROJ_TRANS_CODE_FROM.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.CLASS_CD7 = mctrlineitem.CLASS_CD7 == null ? "" : mctrlineitem.CLASS_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.WPD_ID7 = mctrlineitem.WPD_ID7 == null ? "" : mctrlineitem.WPD_ID7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.BULK_ALCTN_CD7 = mctrlineitem.BULK_ALCTN_CD7 == null ? "" : mctrlineitem.BULK_ALCTN_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);


            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.ttdInqPyrTtdInqPyrOnLoad().");
            var mctrCreateFormResp = mctrCreateFormHandler.ttdInqPyrTtdInqPyrOnLoad(mctrlineitem);
            logger.Info("Response Received : " + mctrCreateFormResp);
            var jsonData = new
            {
                total = 1,
                page = 1,
                records = mctrCreateFormResp.Count(),
                rows = mctrCreateFormResp.First().MctrRpMasterV,
            };
            return Json(jsonData, JsonRequestBehavior.AllowGet);

        }


        public JsonResult ttdInqFilter(MctrLineiteminquiry mctrlineitem)
        {
            logger.Info("Executing ttdInqCyrTtdInqCyrOnLoad() : " + mctrlineitem);

            mctrlineitem.ACTIVITY_ID = mctrlineitem.ACTIVITY_ID_FROM;
            mctrlineitem.PROJECT_ID = mctrlineitem.PROJECT_ID_FROM;
            mctrlineitem.ACCOUNT = mctrlineitem.ACCOUNT_FROM;
            mctrlineitem.BUSINESS_UNIT_GL = mctrlineitem.WORK_BUGL_FROM;
            mctrlineitem.BUS_UNIT_GL_FROM = mctrlineitem.HOME_BUGL_FROM;
            mctrlineitem.HOME_LOCATION_CD7 = mctrlineitem.HOME_LOCATION_CD7 == null ? "" : mctrlineitem.HOME_LOCATION_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.DEPTID_FROM = mctrlineitem.DEPTID_FROM == null ? "" : mctrlineitem.DEPTID_FROM.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.WORK_LOCATION_CD7 = mctrlineitem.WORK_LOCATION_CD7 == null ? "" : mctrlineitem.WORK_LOCATION_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.DEPTID = mctrlineitem.DEPTID == "" ? "" : mctrlineitem.DEPTID.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.RESOURCE_SUB_CAT = mctrlineitem.RESOURCE_SUB_CAT == null ? "" : mctrlineitem.RESOURCE_SUB_CAT.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.PROJ_TRANS_TYPE = mctrlineitem.PROJ_TRANS_TYPE_FROM == null ? "" : mctrlineitem.PROJ_TRANS_TYPE_FROM.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.PROJ_TRANS_CODE = mctrlineitem.PROJ_TRANS_CODE_FROM == null ? "" : mctrlineitem.PROJ_TRANS_CODE_FROM.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.CLASS_CD7 = mctrlineitem.CLASS_CD7 == null ? "" : mctrlineitem.CLASS_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.WPD_ID7 = mctrlineitem.WPD_ID7 == null ? "" : mctrlineitem.WPD_ID7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrlineitem.BULK_ALCTN_CD7 = mctrlineitem.BULK_ALCTN_CD7 == null ? "" : mctrlineitem.BULK_ALCTN_CD7.ToUpper(System.Globalization.CultureInfo.CurrentCulture);

            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.ttdInqPyrTtdInqPyrOnLoad().");
            var mctrCreateFormResp = mctrCreateFormHandler.ttdInqFilter(mctrlineitem);
            logger.Info("Response Received : " + mctrCreateFormResp);
            var jsonData = new
            {
                total = 1,
                page = 1,
                records = mctrCreateFormResp.Count(),
                rows = mctrCreateFormResp.First().MctrRpMasterV,
            };
            return Json(jsonData, JsonRequestBehavior.AllowGet);

        }

        public JsonResult getRgBuGrpLOV(string OrigBu)
        {
            var mctrCreateForm = new MctrCreateForm();
            mctrCreateForm.OrigBu = OrigBu;
            mctrCreateForm.SessionBems = SessionPerister.BEMSID;
            logger.Info("Executing getRgBuGrpLOV() : " + mctrCreateForm);
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.getRgBuGrpLOV().");
            var mctrCreateFormResp = mctrCreateFormHandler.getRgBuGrpLOV(mctrCreateForm);
            logger.Info("Response Received : " + mctrCreateFormResp);
            var jsonData = new
            {
                total = 1,
                page = 1,
                records = mctrCreateFormResp.Count(),
                rows = mctrCreateFormResp,
                userdata = mctrCreateFormResp
            };
            return Json(jsonData, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrHeaderjvItemCdPostTextItem(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing getRgReasonLOV() : " + mctrCreateForm);
            try
            {
                if ((mctrCreateForm.StatusId == "OA" || mctrCreateForm.StatusId == "AA" || mctrCreateForm.StatusId == "CA" || mctrCreateForm.StatusId == "JA") || (mctrCreateForm.StatusId == null))
                {
                    if (SessionPerister.ACCOUNTANTROLE == "Y")
                    {
                        if (mctrCreateForm.StatusId == "JA" && mctrCreateForm.JvItemCd == null)
                        {
                            throw new Exception("warning - jv item is a required field in order to create the journals.");
                        }
                        return Json(mctrCreateForm, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        throw new Exception("you must have the accountant role to enter this value.");
                    }
                }
                else
                {
                    throw new Exception("status must be set to oa, aa, ca or ja to change this field.");
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        public ActionResult getRgReasonLOV()
        {
            return PartialView();
        }

        public ActionResult getRgReasonLOVJson(string origBu)
        {
            var mctrLOV = new CreateMctrLov();
            mctrLOV.Orig_Bu = origBu;

            logger.Info("Executing getRgReasonLOV() : " + mctrLOV);
            if (mctrLOV != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgYearLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgReasonLOV(mctrLOV);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.Count(),
                    rows = mctrCreateFormResp,
                    userdata = mctrCreateFormResp
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgApplLOV()
        {
            return PartialView();
        }

        public JsonResult getRgApplJson(string pycystatus)
        {
            var mctrLOV = new CreateMctrLov();
            mctrLOV.py_cy_status = pycystatus;
            logger.Info("Executing getRgYearLOV() : " + mctrLOV);

            if (SessionPerister.ACCOUNTANTROLE == "Y")
            {

                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgYearLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgApplLOV(mctrLOV);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.First().MctrApplIdV.Count(),
                    rows = mctrCreateFormResp.First().MctrApplIdV,
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult getRgSuperLOV()
        {
            return PartialView("ApproverLOV", "Supervisor");
        }

        public ActionResult getRgSuperJson(string origBu, string origGrp)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.Orig_Bu = origBu;
            mctrCreateForm.orig_group = origGrp;
            mctrCreateForm.bems = SessionPerister.BEMSID;
            logger.Info("Executing getRgSuperLOV() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgSuperLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgSuperLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.Count(),
                    rows = mctrCreateFormResp,
                    userdata = mctrCreateFormResp
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgFinCtlLOV()
        {
            return PartialView("ApproverLOV", "FinControl");
        }

        public ActionResult getRgFinCtlJson(string origBu, string origGrp)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.Orig_Bu = origBu;
            mctrCreateForm.orig_group = origGrp;
            mctrCreateForm.bems = SessionPerister.BEMSID;
            logger.Info("Executing getRgFinCtlLOV() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgFinCtlLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgFinCtlLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.Count(),
                    rows = mctrCreateFormResp,
                    userdata = mctrCreateFormResp
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgAcctLOV()
        {
            return PartialView("ApproverLOV", "Accountant");
        }

        public ActionResult getRgAcctLOVJson(string origBu, string origGrp)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.Orig_Bu = origBu;
            mctrCreateForm.orig_group = origGrp;
            mctrCreateForm.bems = SessionPerister.BEMSID;
            mctrCreateForm.status_id = "AA";
            logger.Info("Executing getRgAcctLOV() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgAcctLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgAcctLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.Count(),
                    rows = mctrCreateFormResp,
                    userdata = mctrCreateFormResp
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgLbrAcctLOV()
        {
            return PartialView("ApproverLOV", "LaborAcctg");
        }
        public ActionResult getRgLbrAcctLOVJson(string origBu, string origGrp)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.Orig_Bu = origBu;
            mctrCreateForm.orig_group = origGrp;
            mctrCreateForm.bems = SessionPerister.BEMSID;
            mctrCreateForm.status_id = "AA";
            logger.Info("Executing getRgLbrAcctLOV() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgLbrAcctLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgLbrAcctLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.Count(),
                    rows = mctrCreateFormResp,
                    userdata = mctrCreateFormResp
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }
        public ActionResult getRgMatlAcctLOV()
        {
            return PartialView("ApproverLOV", "MatlAcctg");
        }
        public ActionResult getRgMatlAcctLOVJson(string origBu, string origGrp)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.Orig_Bu = origBu;
            mctrCreateForm.orig_group = origGrp;
            mctrCreateForm.bems = SessionPerister.BEMSID;
            mctrCreateForm.status_id = "AA";
            logger.Info("Executing getRgMatlAcctLOV() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgMatlAcctLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgMatlAcctLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.Count(),
                    rows = mctrCreateFormResp,
                    userdata = mctrCreateFormResp
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }
        public ActionResult getRgCostAcctLOV()
        {
            return PartialView("ApproverLOV", "CostAcctg");
        }

        public ActionResult getRgCostAcctLOVJson(string origBu, string origGrp)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.Orig_Bu = origBu;
            mctrCreateForm.orig_group = origGrp;
            mctrCreateForm.bems = SessionPerister.BEMSID;
            mctrCreateForm.status_id = "AA";
            logger.Info("Executing getRgCostAcctLOV() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgCostAcctLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgCostAcctLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.Count(),
                    rows = mctrCreateFormResp,
                    userdata = mctrCreateFormResp
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgSrAcctLOV()
        {
            return PartialView("ApproverLOV", "SrAcctg");
        }

        public ActionResult getRgSrAcctLOVJson(string origBu, string origGrp)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.Orig_Bu = origBu;
            mctrCreateForm.orig_group = origGrp;
            mctrCreateForm.bems = SessionPerister.BEMSID;
            mctrCreateForm.status_id = "AA";
            logger.Info("Executing getRgSrAcctLOV() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgSrAcctLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgSrAcctLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.Count(),
                    rows = mctrCreateFormResp,
                    userdata = mctrCreateFormResp
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgYearLOV()
        {
            return PartialView("getRgYearLOV");
        }

        public ActionResult getRgYearJson(int? fiscalYear, string origBu)
        {
            var mctrLOV = new CreateMctrLov();
            mctrLOV.Orig_Bu = origBu;
            mctrLOV.fiscal_year = fiscalYear;
            logger.Info("Executing getRgYearLOV() : " + mctrLOV);
            if (mctrLOV != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgYearLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgYearLOV(mctrLOV);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.Count(),
                    rows = mctrCreateFormResp,
                    userdata = mctrCreateFormResp
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgProjFromLOV(string rowId)
        {
            ViewData["rowId"] = rowId;
            return PartialView("ActiveProjects", rowId);
        }

        public ActionResult getRgProjFromJson(string activityIdFrom, string pycystatus, DateTime periodTo, DateTime cow)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.py_cy_status = pycystatus.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrCreateForm.activity_id_from = activityIdFrom == "" ? activityIdFrom : activityIdFrom.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrCreateForm.cow = cow;
            mctrCreateForm.period_to = periodTo.Date;

            logger.Info("Executing getRgProjFromJson() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgProjFromLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgProjFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.Count(),
                    rows = mctrCreateFormResp.First().getRgProj,
                    userdata = mctrCreateFormResp.First().getRgProj
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgProjToLOV(string rowId)
        {
            ViewData["rowId"] = rowId;
            return PartialView("ActiveProjectsTo", rowId);
        }

        public ActionResult getRgProjToLOVJson(string activityIdTo, DateTime periodTo, DateTime cow)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.py_cy_status = "PY";
            mctrCreateForm.activity_id_to = activityIdTo == "" ? activityIdTo : activityIdTo.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            mctrCreateForm.cow = cow;
            mctrCreateForm.period_to = periodTo;

            logger.Info("Executing getRgProjToLOV() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgProjToLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgProjToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.Count(),
                    rows = mctrCreateFormResp.First().getRgProj,
                    userdata = mctrCreateFormResp.First().getRgProj
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgTransFromLOV(string rowId)
        {
            return PartialView("getRgTransFromLOV", rowId);
        }

        public ActionResult getRgTransFromJson(string origBu)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.Orig_Bu = origBu;

            logger.Info("Executing getRgProjFromJson() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgProjFromLOV().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgTransFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.First().transtype.Count(),
                    rows = mctrCreateFormResp.First().transtype,
                    userdata = mctrCreateFormResp.First().transtype
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgListHomeDeptFromLOV(string rowId)
        {

            ViewData["rowID"] = rowId;
            return PartialView("getRgListHomeDeptFromLOV");
        }

        public ActionResult getRgListHomeDeptFromJSON(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrCreateForm.setid ?? mctrLineItem.SETID;
            mctrCreateForm.period_to = Convert.ToDateTime(mctrLineItem.PERIOD_TO);
            mctrCreateForm.cow = mctrLineItem.COW;

            logger.Info("Executing getRgListHomeDeptFromJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListHomeDeptFromJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListHomeDeptFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.HOME_DEPT_FROM == string.Empty ? mctrCreateFormResp.First().mctrlocndeptmv : mctrCreateFormResp.First().mctrlocndeptmv.Where(x => x.DEPTID == mctrLineItem.HOME_DEPT_FROM);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocndeptmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocndeptmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }


        public ActionResult HomeDeptLocFromLOV(string rowId)
        {

            ViewData["rowID"] = rowId;
            return PartialView("HomeDeptLocFromLOV");
        }

        public ActionResult HomeDeptLocFromJSON(MctrLineItem mctrLineItem)
        {

            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            //mctrCreateForm.setid = mctrLineItem.SETID;
            //mctrCreateForm.home_dept_from = mctrLineItem.HOME_DEPT_FROM;
            // mctrCreateForm.home_loc_from = mctrLineItem.HOME_LOC_FROM;
            mctrCreateForm.period_to = Convert.ToDateTime(mctrLineItem.PERIOD_TO);
            mctrCreateForm.cow = mctrLineItem.COW;

            logger.Info("Executing getRgListHomeDeptFromJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListHomeDeptFromJSON().");
                //var mctrCreateFormResp = mctrCreateFormHandler.getRgHomeDeptLocFromLOV(mctrCreateForm);
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListHomeDeptFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.HOME_DEPT_FROM == string.Empty ? mctrCreateFormResp.First().mctrlocndeptmv : mctrCreateFormResp.First().mctrlocndeptmv.Where(x => x.DEPTID == mctrLineItem.HOME_DEPT_FROM);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocndeptmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocndeptmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }


        public ActionResult HomeDeptLocToLov(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("HomeDeptLocToLOV");
        }

        public ActionResult HomeDeptLocToJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            //mctrCreateForm.home_bugl_from = mctrLineItem.HOME_BUGL_FROM;
            //mctrCreateForm.period_to = Convert.ToDateTime(mctrLineItem.PERIOD_TO);
            //mctrCreateForm.cow = mctrLineItem.COW;

            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.EFFDT = mctrLineItem.PERIOD_TO ?? DateTime.Now;
            mctrCreateForm.cow = mctrLineItem.COW;

            logger.Info("Executing getRgListHomeDeptFromJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListHomeDeptFromJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListHomeDeptToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.HOME_DEPT_FROM == string.Empty ? mctrCreateFormResp.First().mctrlocndeptmv : mctrCreateFormResp.First().mctrlocndeptmv.Where(x => x.DEPTID == mctrLineItem.HOME_DEPT_FROM);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocndeptmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocndeptmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgListHomeDeptToLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("getRgListHomeDeptToLOV");
        }

        public ActionResult getRgListHomeDeptToJSON(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.EFFDT = mctrLineItem.PERIOD_TO ?? DateTime.Now;
            mctrCreateForm.cow = mctrLineItem.COW;

            logger.Info("Executing getRgListHomeDeptToJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListHomeDeptToJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListHomeDeptToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.HOME_DEPT_TO == string.Empty ? mctrCreateFormResp.First().mctrlocndeptmv : mctrCreateFormResp.First().mctrlocndeptmv.Where(x => x.DEPTID == mctrLineItem.HOME_DEPT_TO).ToList<mctrlocndeptmv>();
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocndeptmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocndeptmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }
        [HttpPost]
        public JsonResult mInsert(IEnumerable<MctrLineItem> mctrLineItem)
        {

            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            foreach (MctrLineItem item in mctrLineItem) 
                {
                    if (item.MTL_JRNL == "true")
                    {
                        item.MTL_JRNL = "Y";
                    }
                    else if (item.MTL_JRNL == "false")
                    {
                        item.MTL_JRNL = "N";
                    }
                }
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemInsert(mctrLineItem);
            return Json(mctrCreateFormResp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemDelete(int mctrNo, short lineNo)
        {
            var mctrCreateForm = new MctrLineItem();
            mctrCreateForm.MCTR_NO = mctrNo;
            mctrCreateForm.LINE_NO = lineNo;
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemDelete(mctrCreateForm);
            return Json(mctrCreateFormResp, JsonRequestBehavior.AllowGet);
        }

        public ActionResult getRgLOVReject(string approverId)
        {
            ViewData["ApproverId"] = approverId;
            return PartialView();
        }

        public JsonResult getRgLOVRejectJSON(string origBu)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.getRgLOVRejectJSON().");
            MctrRejectCode mctrRejectCode = new MctrRejectCode();
            mctrRejectCode.origBu = origBu;
            var mctrCreateFormResp = mctrCreateFormHandler.getRgLOVRejectJSON(mctrRejectCode);
            logger.Info("Response Received : " + mctrCreateFormResp);
            if (mctrCreateFormResp != null)
            {
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.Count(),
                    rows = mctrCreateFormResp,
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var jsonData1 = new
                {
                    total = 1,
                    page = 1,
                    records = 0,
                    rows =0,
                };
                return Json(jsonData1, JsonRequestBehavior.AllowGet);
            }
          
        }
        public ActionResult getRgWpdToLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("WpdTo");
        }

        public ActionResult getRgWpdToJSON(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.ACCTG_LOC_CD7 = mctrLineItem.WORK_LOC_TO;
            mctrCreateForm.DEPTID = mctrLineItem.WORK_DEPT_TO;
            mctrCreateForm.WPD_ID7 = mctrLineItem.WPD_TO;
            mctrCreateForm.PROJ_TRANS_TYPE = mctrLineItem.PROJ_TRANS_TYPE_TO;
            mctrCreateForm.fiscal_year = Convert.ToInt32(mctrLineItem.FYEAR);

            logger.Info("Executing getRgWpdToJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgWpdToJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgWpdToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrCreateFormResp.First().mctrwplocdeptv;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrwplocdeptv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }
        public ActionResult getRgWorkLocToLOV(string rowId, string deptID)
        {
            ViewData["deptID"] = deptID;
            ViewData["rowID"] = rowId;
            return PartialView("WorkLocTo");
        }

        public ActionResult getRgWorkLocToLOVJson(string deptID)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = "9T";
            mctrCreateForm.ACCTG_LOC_CD7 = deptID;
            mctrCreateForm.EFFDT = DateTime.Now;

            logger.Info("Executing getRgWorkLocToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgWorkLocToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgWorkLocToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = deptID == string.Empty ? mctrCreateFormResp.First().mctrlocnmv : mctrCreateFormResp.First().mctrlocnmv.Where(x => x.ACCTG_LOC_CD7 == deptID);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocnmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgListWorkLocToLOV(string rowId)
        {

            ViewData["rowID"] = rowId;
            return PartialView("ListWorkLocTo");
        }

        public ActionResult getRgListWorkLocToLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.EFFDT = mctrLineItem.COW;
            logger.Info("Executing getRgListWorkLocToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListWorkLocToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListWorkLocToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.WORK_LOC_TO == string.Empty ? mctrCreateFormResp.First().mctrlocnmv : mctrCreateFormResp.First().mctrlocnmv.Where(x => x.ACCTG_LOC_CD7 == mctrLineItem.WORK_LOC_TO);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocnmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrwplocdeptv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgRscToLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("RscTo");
        }

        public ActionResult getRgRscToLOVJSON(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.RESOURCE_SUB_CAT = mctrLineItem.RSC_TO;
            mctrCreateForm.EFFDT = mctrLineItem.PERIOD_TO;
            mctrCreateForm.ACTIVITY_ID = mctrLineItem.ACTIVITY_ID_TO;


            logger.Info("Executing getRgRscToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgRscToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgRscToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                //var records = mctrLineItem.RSC_TO == string.Empty ? mctrCreateFormResp.First().mctrrscmv : mctrCreateFormResp.First().mctrrscmv.Where(x => x.RESOURCE_SUB_CAT == mctrLineItem.RSC_TO);
                //records = (!records.Any())? mctrCreateFormResp.First().mctrrscmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.First().mctrrscmv.Count(),
                    rows = mctrCreateFormResp.First().mctrrscmv,
                    userdata = mctrCreateFormResp.First().mctrrscmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }
        public ActionResult getRgAffiliateFromLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("AffiliateFrom");
        }

        [HttpPost]
        public ActionResult getRgAffiliateFromLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.ACTIVITY_ID = mctrLineItem.ACTIVITY_ID_FROM;
            mctrCreateForm.PROJECT_ID = mctrLineItem.PROJECT_ID_FROM;
            mctrCreateForm.ACCOUNT = mctrLineItem.ACCOUNT_FROM;
            mctrCreateForm.BUS_UNIT_GL_FROM = mctrLineItem.HOME_BUGL_FROM;
            mctrCreateForm.BUSINESS_UNIT_GL = mctrLineItem.WORK_BUGL_FROM;
            mctrCreateForm.PROJ_TRANS_TYPE = mctrLineItem.PROJ_TRANS_TYPE_FROM;
            logger.Info("Executing getRgAffiliateFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgAffiliateFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgAffiliateFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.AFFILIATE_FROM == string.Empty ? mctrCreateFormResp.First().mctrrpmastervw : mctrCreateFormResp.First().mctrrpmastervw.Where(x => x.DEPTID == mctrLineItem.AFFILIATE_FROM);

                records = (!records.Any()) ? mctrCreateFormResp.First().mctrrpmastervw : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrrpmastervw
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgHomeLocFromLOV(string rowId, string deptID)
        {
            ViewData["deptID"] = deptID;
            ViewData["rowID"] = rowId;
            return PartialView();
        }

        public ActionResult getRgHomeLocFromLOVJson(string deptID)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = "9T";
            mctrCreateForm.home_loc_from = "01";



            logger.Info("Executing getRgHomeLocFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgHomeLocFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgHomeLocFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = deptID == string.Empty ? mctrCreateFormResp.First().mctrlocnmv : mctrCreateFormResp.First().mctrlocnmv.Where(x => x.ACCTG_LOC_CD7 == deptID);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocnmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgListHomeLocFromLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("ListHomeLocFrom");
        }
        [HttpPost]
        public ActionResult getRgListHomeLocFromLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.EFFDT = mctrLineItem.PERIOD_TO;

            logger.Info("Executing getRgListHomeLocFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListHomeLocFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListHomeLocFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.HOME_LOC_FROM == string.Empty ? mctrCreateFormResp.First().mctrlocnmv : mctrCreateFormResp.First().mctrlocnmv.Where(x => x.ACCTG_LOC_CD7 == mctrLineItem.HOME_LOC_FROM);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocnmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocnmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgClassCodeFromLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("ClassCodeFrom");
        }

        public ActionResult getRgClassCodeFromLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            logger.Info("Executing getRgClassCodeFromLOVJSON() : " + mctrLineItem);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListHomeLocFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgClassCodeFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrCreateFormResp.First().mctrclasscodev.Where(x => x.CLASS_CD7 == mctrLineItem.CLASS_CD_FROM);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrclasscodev
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgListClassCodeFromLOV(string rowId)
        {

            ViewData["rowID"] = rowId;
            return PartialView("ListClassCodeFrom");
        }

        [HttpPost]
        public JsonResult getRgListClassCodeFromLOVJson(MctrCreateForm mctrCreateForm)
        {
            var mctrCreateFormLov = new CreateMctrLov();
            var lineItem = mctrCreateForm.mctrLineItem.First();
            mctrCreateFormLov.proj_trans_type_from = lineItem.PROJ_TRANS_TYPE_FROM;
            mctrCreateFormLov.setid = lineItem.SETID;
            // var fiscalyear = Convert.ToInt32(mctrCreateForm.fyear);
            //if ((mctrCreateFormLov.py_cy_status == "PY") && (fiscalyear > 2007) && lineItem.AFFILIATE_FROM != "")
            //{
            //    mctrCreateFormLov.setid = lineItem.AFFILIATE_FROM;
            //}
            //else
            //{
            //    mctrCreateFormLov.setid = lineItem.HOME_BUGL_FROM;
            //}
            logger.Info("Executing getRgListClassCodeFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListClassCodeFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListClassCodeFromLOV(mctrCreateFormLov);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = lineItem.CLASS_CD_FROM == string.Empty ? mctrCreateFormResp.First().mctrclasscodev : mctrCreateFormResp.First().mctrclasscodev.Where(x => x.CLASS_CD7 == lineItem.CLASS_CD_FROM);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrclasscodev : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrclasscodev
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult getRgListClassCodeToLOV(string rowId)
        {

            ViewData["rowID"] = rowId;
            return PartialView("Listclasscodeto");
        }

        public ActionResult getRgListClassCodeToLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.proj_trans_type_to = mctrLineItem.PROJ_TRANS_TYPE_TO;
            mctrCreateForm.setid = mctrLineItem.SETID;

            logger.Info("Executing getRgListClassCodeToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListClassCodeToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListClassCodeToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.CLASS_CD_TO == string.Empty ? mctrCreateFormResp.First().mctrclasscodev : mctrCreateFormResp.First().mctrclasscodev.Where(x => x.CLASS_CD7 == mctrLineItem.CLASS_CD_TO);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrclasscodev : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrclasscodev
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgWorkDeptFromLOV(string rowId, string deptID)
        {
            ViewData["deptID"] = deptID;
            ViewData["rowID"] = rowId;
            return PartialView();
        }

        public ActionResult getRgWorkDeptFromLOVJson(string deptID)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = "9T";
            mctrCreateForm.work_dept_from = "GAGI";
            mctrCreateForm.period_to = DateTime.Now;
            mctrCreateForm.home_bugl_from = "9T";
            mctrCreateForm.work_dept_from = "GAGI";
            mctrCreateForm.cow = DateTime.Now;



            logger.Info("Executing getRgWorkDeptFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgWorkDeptFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgWorkDeptFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = deptID == string.Empty ? mctrCreateFormResp.First().mctrlocndeptmv : mctrCreateFormResp.First().mctrlocndeptmv.Where(x => x.DEPTID == deptID);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocndeptmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgWorkDeptLocFromLOV(string rowId, string deptID)
        {
            ViewData["deptID"] = deptID;
            ViewData["rowID"] = rowId;
            return PartialView();
        }

        public ActionResult getRgWorkDeptLocFromLOVJson(string deptID)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = "9T";
            mctrCreateForm.work_dept_from = "GAGI";
            mctrCreateForm.period_to = DateTime.Now;
            mctrCreateForm.home_bugl_from = "9T";
            mctrCreateForm.work_dept_from = "GAGI";
            mctrCreateForm.cow = DateTime.Now;
            logger.Info("Executing getRgWorkDeptLocFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgWorkDeptLocFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgWorkDeptLocFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = deptID == string.Empty ? mctrCreateFormResp.First().mctrlocndeptmv : mctrCreateFormResp.First().mctrlocndeptmv.Where(x => x.DEPTID == deptID);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocndeptmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgListWorkDeptFromLOV(string rowId)
        {

            ViewData["rowID"] = rowId;
            return PartialView("ListWorkDeptFrom");
        }

        public ActionResult getRgListWorkDeptFromLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.period_to = Convert.ToDateTime(mctrLineItem.PERIOD_TO);
            mctrCreateForm.cow = mctrLineItem.COW;
            logger.Info("Executing getRgListWorkDeptFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListWorkDeptFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListWorkDeptFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.WORK_DEPT_FROM == string.Empty ? mctrCreateFormResp.First().mctrlocndeptmv : mctrCreateFormResp.First().mctrlocndeptmv.Where(x => x.DEPTID == mctrLineItem.WORK_DEPT_FROM);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocndeptmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocndeptmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult WorkDeptLocFromLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("WorkDeptLocFromLOV");
        }

        public ActionResult WorkDeptLocFromLOVJSON(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.period_to = Convert.ToDateTime(mctrLineItem.PERIOD_TO);
            mctrCreateForm.cow = mctrLineItem.COW;
            logger.Info("Executing WorkDeptLocFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.WorkDeptLocFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListWorkDeptFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.WORK_DEPT_FROM == string.Empty ? mctrCreateFormResp.First().mctrlocndeptmv : mctrCreateFormResp.First().mctrlocndeptmv.Where(x => x.DEPTID == mctrLineItem.WORK_DEPT_FROM);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocndeptmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocndeptmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }
        public ActionResult getRgWorkLocFromLOV(string rowId, string deptID)
        {
            ViewData["deptID"] = deptID;
            ViewData["rowID"] = rowId;
            return PartialView();
        }

        public ActionResult getRgWorkLocFromLOVJson(string deptID)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = "9T";
            mctrCreateForm.work_loc_from = "01";
            mctrCreateForm.period_to = DateTime.Now;
            logger.Info("Executing getRgListWorkDeptFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListWorkDeptFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgWorkLocFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = deptID == string.Empty ? mctrCreateFormResp.First().mctrlocnmv : mctrCreateFormResp.First().mctrlocnmv.Where(x => x.ACCTG_LOC_CD7 == deptID);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocnmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgListWorkLocFromLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("ListWorkLocFrom");
        }

        public ActionResult getRgListWorkLocFromLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.period_to = mctrLineItem.PERIOD_TO ?? DateTime.Now;
            logger.Info("Executing getRgListWorkLocFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListWorkLocFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListWorkLocFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.WORK_LOC_FROM == string.Empty ? mctrCreateFormResp.First().mctrlocnmv : mctrCreateFormResp.First().mctrlocnmv.Where(x => x.ACCTG_LOC_CD7 == mctrLineItem.WORK_LOC_FROM);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocnmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocnmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgRscFromLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("RscFrom");
        }

        [HttpPost]
        public ActionResult getRgRscFromLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.RESOURCE_SUB_CAT = mctrLineItem.RSC_FROM;
            mctrCreateForm.period_to = mctrLineItem.PERIOD_TO ?? DateTime.Now;

            logger.Info("Executing getRgListWorkLocFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgRscFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgRscFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                //var records = mctrLineItem.RSC_FROM == string.Empty ? mctrCreateFormResp.First().mctrrscmv : mctrCreateFormResp.First().mctrrscmv.Where(x => x.DESCR == mctrLineItem.RSC_FROM);
                //records = (!records.Any())? mctrCreateFormResp.First().mctrrscmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.First().mctrrscmv.Count(),
                    rows = mctrCreateFormResp.First().mctrrscmv,
                    userdata = mctrCreateFormResp.First().mctrrscmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgWpdFromLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("WpdFrom");
        }

        public ActionResult getRgWpdFromLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.WPD_ID7 = mctrLineItem.WPD_FROM;

            logger.Info("Executing getRgWpdFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgWpdFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgWpdFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);

                var records = mctrLineItem.WPD_FROM == string.Empty ? mctrCreateFormResp.First().mctrwpmasterv : mctrCreateFormResp.First().mctrwpmasterv.Where(x => x.WPD_ID7 == mctrLineItem.WPD_FROM);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrwpmasterv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrwpmasterv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgBulkFromLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("BulkFrom");
        }

        public ActionResult getRgBulkFromLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.proj_trans_type_from = mctrLineItem.PROJ_TRANS_TYPE_FROM;
            mctrCreateForm.BULK_ALCTN_CD7 = mctrLineItem.BULK_FROM;

            logger.Info("Executing getRgBulkFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgBulkFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgBulkFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.BULK_FROM == string.Empty ? mctrCreateFormResp.First().mctrbulkalctnv : mctrCreateFormResp.First().mctrbulkalctnv.Where(x => x.BULK_ALCTN_CD7 == mctrLineItem.BULK_FROM);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrbulkalctnv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrbulkalctnv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgCecEpFromLOV(string rowId, string deptID)
        {
            ViewData["deptID"] = deptID;
            ViewData["rowID"] = rowId;
            return PartialView();
        }

        public ActionResult getRgCecEpFromLOVJson(string deptID)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.ESTMTG_PRICG_CD7 = "";
            mctrCreateForm.setid = "";


            logger.Info("Executing getRgCecEpFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgCecEpFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgCecEpFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = deptID == string.Empty ? mctrCreateFormResp.First().mctrestmtgpricgv : mctrCreateFormResp.First().mctrestmtgpricgv.Where(x => x.DESCR == deptID);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrestmtgpricgv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgListCecEpFromLOV(string rowId)
        {

            ViewData["rowID"] = rowId;
            return PartialView("ListCecEpFrom");
        }

        public ActionResult getRgListCecEpFromLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            logger.Info("Executing getRgListCecEpFromLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListCecEpFromLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListCecEpFromLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.ESTMTG_PRICG_CD_FROM == string.Empty ? mctrCreateFormResp.First().mctrestmtgpricgv : mctrCreateFormResp.First().mctrestmtgpricgv.Where(x => x.ESTMTG_PRICG_CD7 == mctrLineItem.ESTMTG_PRICG_CD_FROM);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrestmtgpricgv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrestmtgpricgv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgHomeLocToLOV(string rowId, string deptID)
        {
            ViewData["deptID"] = deptID;
            ViewData["rowID"] = rowId;
            return PartialView();
        }

        public ActionResult getRgHomeLocToLOVJson(string deptID)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = "9T";
            mctrCreateForm.ACCTG_LOC_CD7 = "01";
            mctrCreateForm.EFFDT = DateTime.Now;


            logger.Info("Executing getRgHomeLocToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgHomeLocToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgHomeLocToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = deptID == string.Empty ? mctrCreateFormResp.First().mctrlocnmv : mctrCreateFormResp.First().mctrlocnmv.Where(x => x.ACCTG_LOC_CD7 == deptID);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocnmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgListHomeLocToLOV(string rowId)
        {

            ViewData["rowID"] = rowId;
            return PartialView("ListHomeLocTo");
        }

        public ActionResult getRgListHomeLocToLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.EFFDT = DateTime.Now;
            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.EFFDT = mctrLineItem.PERIOD_TO;

            logger.Info("Executing getRgListHomeLocToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListHomeLocToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListHomeLocToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.HOME_LOC_TO == string.Empty ? mctrCreateFormResp.First().mctrlocnmv : mctrCreateFormResp.First().mctrlocnmv.Where(x => x.ACCTG_LOC_CD7 == mctrLineItem.HOME_LOC_TO);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocnmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocnmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgClassCodeToLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView();
        }

        public ActionResult getRgClassCodeToLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.CLASS_CD7 = mctrLineItem.CLASS_CD_TO;
            mctrCreateForm.PROJ_TRANS_TYPE = mctrLineItem.PROJ_TRANS_TYPE_TO;
            mctrCreateForm.setid = mctrLineItem.SETID;
            logger.Info("Executing getRgClassCodeToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgClassCodeToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgClassCodeToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.CLASS_CD_TO == string.Empty ? mctrCreateFormResp.First().mctrclasscodev : mctrCreateFormResp.First().mctrclasscodev.Where(x => x.CLASS_CD7 == mctrLineItem.CLASS_CD_TO);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrclasscodev
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }


        public ActionResult getRgWorkDeptToLOV(string rowId)
        {

            ViewData["rowID"] = rowId;
            return PartialView();
        }

        public ActionResult getRgWorkDeptToLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.DEPTID = mctrLineItem.WORK_DEPT_TO;
            mctrCreateForm.EFFDT = mctrLineItem.PERIOD_TO;
            mctrCreateForm.home_bugl_to = mctrLineItem.HOME_BUGL_TO;
            mctrCreateForm.work_dept_to = mctrLineItem.WORK_DEPT_TO;
            mctrCreateForm.cow = DateTime.Now;
            logger.Info("Executing getRgWorkDeptToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgWorkDeptToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgWorkDeptToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.WORK_DEPT_TO == string.Empty ? mctrCreateFormResp.First().mctrlocndeptmv : mctrCreateFormResp.First().mctrlocndeptmv.Where(x => x.DEPTID == mctrLineItem.WORK_DEPT_TO);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocndeptmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocndeptmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgWorkDeptLocToLOV(string rowId, string deptID)
        {
            ViewData["deptID"] = deptID;
            ViewData["rowID"] = rowId;
            return PartialView();
        }

        public ActionResult getRgWorkDeptLocToLOVJson(string deptID)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = "9T";
            mctrCreateForm.DEPTID = "GAGI";
            mctrCreateForm.ACCTG_LOC_CD7 = "IT";
            mctrCreateForm.EFFDT = DateTime.Now;
            mctrCreateForm.setid = "9T";
            mctrCreateForm.DEPTID = "GAGI";
            mctrCreateForm.cow = DateTime.Now;

            logger.Info("Executing getRgWorkDeptLocToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgWorkDeptLocToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgWorkDeptLocToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = deptID == string.Empty ? mctrCreateFormResp.First().mctrlocndeptmv : mctrCreateFormResp.First().mctrlocndeptmv.Where(x => x.DEPTID == deptID);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocndeptmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgListWorkDeptToLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("ListWorkDeptTo");
        }

        public ActionResult getRgListWorkDeptToLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;

            mctrCreateForm.EFFDT = Convert.ToDateTime(mctrLineItem.PERIOD_TO);

            mctrCreateForm.cow = mctrLineItem.COW;


            logger.Info("Executing getRgListWorkDeptToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListWorkDeptToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListWorkDeptToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.WORK_DEPT_TO == string.Empty ? mctrCreateFormResp.First().mctrlocndeptmv : mctrCreateFormResp.First().mctrlocndeptmv.Where(x => x.DEPTID == mctrLineItem.WORK_DEPT_TO);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocndeptmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocndeptmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult WorkDeptLocToLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("WorkDeptLocToLOV");
        }

        public ActionResult WorkDeptLocToLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.EFFDT = Convert.ToDateTime(mctrLineItem.PERIOD_TO);
            mctrCreateForm.cow = mctrLineItem.COW;
            logger.Info("Executing getRgListWorkDeptToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListWorkDeptToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListWorkDeptToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.WORK_DEPT_TO == string.Empty ? mctrCreateFormResp.First().mctrlocndeptmv : mctrCreateFormResp.First().mctrlocndeptmv.Where(x => x.DEPTID == mctrLineItem.WORK_DEPT_TO);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrlocndeptmv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrlocndeptmv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgBulkToLOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("BulkTo");
        }

        public ActionResult getRgBulkToLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.setid = mctrLineItem.SETID;
            mctrCreateForm.PROJ_TRANS_TYPE = mctrLineItem.PROJ_TRANS_TYPE_TO;
            mctrCreateForm.BULK_ALCTN_CD7 = mctrLineItem.BULK_TO;
            logger.Info("Executing getRgBulkToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgBulkToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgBulkToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.BULK_TO == string.Empty ? mctrCreateFormResp.First().mctrbulkalctnv : mctrCreateFormResp.First().mctrbulkalctnv.Where(x => x.BULK_ALCTN_CD7 == mctrLineItem.BULK_TO);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrbulkalctnv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCreateFormResp.First().mctrbulkalctnv.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrbulkalctnv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgCecEpToLOV(string rowId, string deptID)
        {
            ViewData["deptID"] = deptID;
            ViewData["rowID"] = rowId;
            return PartialView();
        }

        public ActionResult getRgCecEpToLOVJson(string deptID)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.ESTMTG_PRICG_CD7 = "";

            mctrCreateForm.setid = "";




            logger.Info("Executing getRgCecEpToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgCecEpToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgCecEpToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = deptID == string.Empty ? mctrCreateFormResp.First().mctrestmtgpricgv : mctrCreateFormResp.First().mctrestmtgpricgv.Where(x => x.DESCR == deptID);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrestmtgpricgv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgListCecEpToLOV(string rowId)
        {

            ViewData["rowID"] = rowId;
            return PartialView("ListCecEpTo");
        }

        public ActionResult getRgListCecEpToLOVJson(MctrLineItem mctrLineItem)
        {
            var mctrCreateForm = new CreateMctrLov();

            mctrCreateForm.setid = mctrLineItem.SETID == "" ? mctrLineItem.SETID : mctrLineItem.SETID.ToUpper(System.Globalization.CultureInfo.CurrentCulture);

            logger.Info("Executing getRgListCecEpToLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListCecEpToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgListCecEpToLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = mctrLineItem.ESTMTG_PRICG_CD_TO == string.Empty ? mctrCreateFormResp.First().mctrestmtgpricgv : mctrCreateFormResp.First().mctrestmtgpricgv.Where(x => x.ESTMTG_PRICG_CD7 == mctrLineItem.ESTMTG_PRICG_CD_TO);
                records = (!records.Any()) ? mctrCreateFormResp.First().mctrestmtgpricgv : records;
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().mctrestmtgpricgv
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        public ActionResult getRgLiBemsLOV(string rowId, string deptID)
        {
            ViewData["deptID"] = deptID;
            ViewData["rowID"] = rowId;
            return PartialView();
        }

        public ActionResult getRgLiBemsLOVJson(string deptID)
        {
            var mctrCreateForm = new CreateMctrLov();
            mctrCreateForm.Orig_Bu = "";
            mctrCreateForm.orig_group = "";
            mctrCreateForm.bems = "";

            logger.Info("Executing getRgLiBemsLOVJSON() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.getRgListCecEpToLOVJSON().");
                var mctrCreateFormResp = mctrCreateFormHandler.getRgLiBemsLOV(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                var records = deptID == string.Empty ? mctrCreateFormResp.First().getRgSuper : mctrCreateFormResp.First().getRgSuper.Where(x => x.ACCTG_LOC_CDM == deptID);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = records.Count(),
                    rows = records,
                    userdata = mctrCreateFormResp.First().getRgSuper
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCommentMctrCommentOnLoad
        ///</summary>
        ///<param name = "MctrCreateForm"></param>
        ///<returns>IEnumerable<MctrCreateForm> </returns>

        public ActionResult MctrCommentOnLoad(int mctrNo)
        {
            var mctrComment = new MCTRComments();
            mctrComment.MCTR_NO = mctrNo;
            logger.Info("Executing mctrCommentMctrCommentOnLoad() : " + mctrComment);

            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.mctrCommentMctrCommentOnLoad().");
            var mctrCommentsResp = mctrCreateFormHandler.mctrCommentMctrCommentOnLoad(mctrComment);
            logger.Info("Response Received : " + mctrCommentsResp);
            var commentString = new StringBuilder();
            for (var i = 0; i < mctrCommentsResp.Count(); i++)
            {
                if (i != 0)
                {
                    mctrComment.COMMENTS = commentString.AppendFormat("\n\n{0} - {1} {2} {3} - {4}", mctrCommentsResp.ElementAt(i).DATE_ENTERED.ToString(), mctrCommentsResp.ElementAt(i).BEMS, mctrCommentsResp.ElementAt(i).FIRST_NAME, mctrCommentsResp.ElementAt(i).LAST_NAME, mctrCommentsResp.ElementAt(i).COMMENTS).ToString();
                }
                else
                {
                    mctrComment.COMMENTS = commentString.AppendFormat("{0} - {1} {2} {3} - {4}", mctrCommentsResp.ElementAt(0).DATE_ENTERED.ToString(), mctrCommentsResp.ElementAt(i).BEMS, mctrCommentsResp.ElementAt(i).FIRST_NAME, mctrCommentsResp.ElementAt(i).LAST_NAME, mctrCommentsResp.ElementAt(i).COMMENTS).ToString();
                }
            }

            return PartialView("MctrComments", mctrComment);

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCommentcommentsWhenValidateItem
        ///</summary>
        ///<param name = "MctrCreateForm"></param>
        ///<returns>IEnumerable<MctrCreateForm> </returns>

        [HttpPost]
        public ActionResult mctrCommentcommentsWhenValidateItem(MCTRComments mctrCreateForm)
        {
            logger.Info("Executing mctrCommentcommentsWhenValidateItem() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MCTRComments mctrComments = new MCTRComments();
                if (Session["global_sessionBems"].ToString() != null)
                {
                    mctrComments.BEMS = Session["global_sessionBems"].ToString();
                }
                mctrComments.DATE_ENTERED = DateTime.Now;
                var response = new List<MCTRComments>();
                response.Add(mctrComments);
                logger.Info("Response Received : " + response);

                // Where does it return 
                return View("MctrCreateForm", response);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCommentviewStatementWhenButtonPressed
        ///</summary>
        ///<param name = "MctrCreateForm"></param>
        ///<returns>IEnumerable<MctrCreateForm> </returns>

        [HttpPost]
        public ActionResult mctrCommentviewStatementWhenButtonPressed(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing mctrCommentviewStatementWhenButtonPressed() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.mctrCommentviewStatementWhenButtonPressed().");
                var mctrCreateFormResp = mctrCreateFormHandler.mctrCommentviewStatementWhenButtonPressed(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                return View("MctrCreateForm", mctrCreateFormResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCommentnewStatementWhenButtonPressed
        ///</summary>
        ///<param name = "MctrCreateForm"></param>
        ///<returns>IEnumerable<MctrCreateForm> </returns>

        [HttpPost]
        public ActionResult mctrCommentnewStatementWhenButtonPressed(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing mctrCommentnewStatementWhenButtonPressed() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.mctrCommentnewStatementWhenButtonPressed().");
                var mctrCreateFormResp = mctrCreateFormHandler.mctrCommentnewStatementWhenButtonPressed(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                return View("MctrCreateForm", mctrCreateFormResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCommentbutSaveWhenButtonPressed
        ///</summary>
        ///<param name = "MctrCreateForm"></param>
        ///<returns>IEnumerable<MctrCreateForm> </returns>

        [HttpPost]
        public JsonResult mctrCommentbutSaveWhenButtonPressed(int mctrNo, string comments)
        {
            var mctrComment = new MCTRComments();
            mctrComment.BEMS = SessionPerister.BEMSID;
            mctrComment.MCTR_NO = mctrNo;
            mctrComment.COMMENTS = comments;
            mctrComment.DATE_ENTERED = DateTime.Now;
            logger.Info("Executing mctrCommentbutSaveWhenButtonPressed() : " + mctrComment);
            if (mctrComment != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.mctrCommentbutSaveWhenButtonPressed().");
                var mctrCommentsResp = mctrCreateFormHandler.mctrCommentbutSaveWhenButtonPressed(mctrComment);
                logger.Info("Response Received : " + mctrCommentsResp);
                var commentString = new StringBuilder();
                for (var i = 0; i < mctrCommentsResp.Count(); i++)
                {
                    if (i != 0)
                    {
                        mctrComment.COMMENTS = commentString.AppendFormat("\n\n{0} - {1} {2} {3} - {4}", mctrCommentsResp.ElementAt(i).DATE_ENTERED.ToString(), mctrCommentsResp.ElementAt(i).BEMS, mctrCommentsResp.ElementAt(i).FIRST_NAME, mctrCommentsResp.ElementAt(i).LAST_NAME, mctrCommentsResp.ElementAt(i).COMMENTS).ToString();
                    }
                    else
                    {
                        mctrComment.COMMENTS = commentString.AppendFormat("{0} - {1} {2} {3} - {4}", mctrCommentsResp.ElementAt(0).DATE_ENTERED.ToString(), mctrCommentsResp.ElementAt(i).BEMS, mctrCommentsResp.ElementAt(i).FIRST_NAME, mctrCommentsResp.ElementAt(i).LAST_NAME, mctrCommentsResp.ElementAt(i).COMMENTS).ToString();
                    }
                }

                return Json(mctrComment,JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return Json("", JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]

        public JsonResult mctrLineItemPreInsert(MctrCreateForm mctrCreateForm)
        {
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();

                logger.Debug("Executing mctrCreateFormHandler.mctrLineItemPreInsert().");
                var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemPreInsert(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                return Json(mctrCreateFormResp, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return Json("", JsonRequestBehavior.AllowGet);
            }
        }
        public ActionResult mctrLineItemPostInsert(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing mctrLineItemPostInsert() : " + mctrCreateForm);


            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.mctrLineItemPostInsert().");
                var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemPostInsert(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                return View("MctrCreateForm", mctrCreateFormResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        [HttpPost]
        public JsonResult mctrLineItemPreUpdate(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing mctrLineItemPreUpdate() : " + mctrCreateForm);


            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.mctrLineItemPreUpdate().");
                var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemPreUpdate(mctrCreateForm);
                return Json(mctrCreateFormResp, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult mctrLineItemPostUpdate(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing mctrLineItemPostUpdate() : " + mctrCreateForm);
            if (mctrCreateForm.mctrLineItem.First().MTL_JRNL == "true")
            {
                mctrCreateForm.mctrLineItem.First().MTL_JRNL = "Y";
            }
            else if (mctrCreateForm.mctrLineItem.First().MTL_JRNL == "false")
            {
                mctrCreateForm.mctrLineItem.First().MTL_JRNL = "N";
            }

            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.mctrLineItemPostUpdate().");
                var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemPostUpdate(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                return Json(mctrCreateFormResp, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return Json(false, JsonRequestBehavior.AllowGet);
            }
        }


        public JsonResult mctrLineItemPreDelete(int mctrNo, short lineNo)
        {

            var mctrCreateForm = new MctrLineItem();
            mctrCreateForm.MCTR_NO = mctrNo;
            mctrCreateForm.LINE_NO = lineNo;
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.mctrLineItemPreDelete().");
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemPreDelete(mctrCreateForm);
            logger.Info("Response Received : " + mctrCreateFormResp);
            return Json(mctrCreateFormResp, JsonRequestBehavior.AllowGet);


        }

        public JsonResult mctrLineItemPostDelete(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing mctrLineItemPostDelete() : " + mctrCreateForm);
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.mctrLineItemPostDelete().");
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemPostDelete(mctrCreateForm);
            logger.Info("Response Received : " + mctrCreateFormResp);
            return Json(mctrCreateFormResp, JsonRequestBehavior.AllowGet);

        }
        public ActionResult mctrLineItemPostQuery(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing mctrLineItemPostDelete() : " + mctrCreateForm);


            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.mctrLineItemPostQuery().");
                var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemPostQuery(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                return View("MctrCreateForm", mctrCreateFormResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }




        public ActionResult pycystatuscheckbubut(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.pycystatuscheckbubut(mctrCreateForm);
            return View("MctrCreateForm", mctrCreateFormResp);
        }



        public ActionResult fyearperiodvalidation(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.fyearperiodvalidation(mctrCreateForm);
            return View("MctrCreateForm", mctrCreateFormResp);

        }


        public string validApprover(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.validApprover(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return resp.approvalbems;
        }
        public JsonResult jrnlWeekJrnlWeekOnLoadJson(int mctrno)
        {
            MctrWkipJrnlsBl mctrWkipJrnlsBl = new MctrWkipJrnlsBl();
            try
            {
                mctrWkipJrnlsBl.MCTR_NO = mctrno;
                logger.Info("Executing jrnlWeekJrnlWeekOnLoad()");

                MctrWkipJrnlsBlHandler mctrWkipJrnlsBlHandler = new MctrWkipJrnlsBlHandler();
                logger.Debug("Executing jrnlWeekHandler.jrnlWeekJrnlWeekOnLoad().");
                var mctrWkipJrnlsBlResp = mctrWkipJrnlsBlHandler.jrnlWeekJrnlWeekOnLoad(mctrWkipJrnlsBl);
                logger.Info("Response Received : " + mctrWkipJrnlsBl);
                return Json(mctrWkipJrnlsBlResp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }


        public JsonResult mctrLineItemclassCdToPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemclassCdToPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemestmtgPricgCdToPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemestmtgPricgCdToPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemworkLocToPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemworkLocToPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemhomeDeptToPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemhomeDeptToPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemhomeLocToPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemhomeLocToPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemaccountFromPostTextItem(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemaccountFromPostTextItem(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemworkDeptToPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemworkDeptToPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemrscToPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemrscToPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemhomeBuglToPostTextItem(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            mctrCreateForm.session_bems = SessionPerister.BEMSID;
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemhomeBuglToPostTextItem(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemaccountToPostTextItem(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemaccountToPostTextItem(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemestmtgPricgCdFromPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemestmtgPricgCdFromPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemquantityFromPostTextItem(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemquantityFromPostTextItem(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }



        public JsonResult submitBtnmctrLineItemquantityFromPostTextItem(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.submitBtnmctrLineItemquantityFromPostTextItem(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItembulkFromPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItembulkFromPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public JsonResult batchModeCheck(IEnumerable<MctrLineItem> mctrlineItem)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            //  var mctrCreateFormResp = mctrCreateFormHandler.batchModeCheck(mctrCreateForm);
            //  var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(null, JsonRequestBehavior.AllowGet);

        }
        [HttpPost]
        public JsonResult batchModeCheck1(MctrCreateForm mctrCreateForm)
        {

            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.batchModeCheck(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);

        }
        [HttpPost]
        public JsonResult mctrLineItembutBulkWhenButtonPressedOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItembutBulkWhenButtonPressedOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItembutWpdWhenButtonPressedOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItembutWpdWhenButtonPressedOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemwpdFromPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemwpdFromPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public JsonResult mctrLineItemrscFromPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemrscFromPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemworkLocFromPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemworkLocFromPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemworkDeptFromPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemworkDeptFromPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemClassCditemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemClassCditemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }
        public JsonResult mctrLineItemhomeLocFromPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemhomeLocFromPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemhomeDeptFromPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemhomeDeptFromPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        public JsonResult mctrLineItemaffiliateFromPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemaffiliateFromPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]

        public JsonResult whenbuttonpressed()
        {
            var lineItemList = new List<MctrLineItem>();
            if (Request != null)
            {
                HttpPostedFileBase file = Request.Files[0];
                if ((file != null) && (file.ContentLength > 0) && !string.IsNullOrEmpty(file.FileName))
                {
                    DataTable table = new DataTable();
                    using (var package = new ExcelPackage(file.InputStream))
                    {
                        ExcelWorksheet workSheet = package.Workbook.Worksheets.First();

                        foreach (var firstRowCell in workSheet.Cells[2, 1, 2, workSheet.Dimension.End.Column])
                        {
                            table.Columns.Add(firstRowCell.Text);
                        }

                        for (var rowNumber = 5; rowNumber <= workSheet.Dimension.End.Row; rowNumber++)
                        {
                            var row = workSheet.Cells[rowNumber, 1, rowNumber, workSheet.Dimension.End.Column];
                            var newRow = table.NewRow();
                            foreach (var cell in row)
                            {
                                newRow[cell.Start.Column - 1] = cell.Text;
                            }
                            table.Rows.Add(newRow);
                        }
                    }
                    lineItemList = ConvertToTankReadings(table).ToList();
                    table.Dispose();
                }
            }




            var jsonData = new
            {
                total = lineItemList.Count(),
                page = 1,
                records = lineItemList,
                rows = lineItemList.Count(),
                userdata = lineItemList
            };
            return Json(jsonData, JsonRequestBehavior.AllowGet);
        }

        public IEnumerable<MctrLineItem> ConvertToTankReadings(DataTable dataTable)
        {
            var mctrLineItemList = new List<MctrLineItem>();
            var mctrLineItem = new MctrLineItem();
            foreach (DataRow row in dataTable.Rows)
            {
                if (row["COLNAME"].ToString() == "FROM")
                {
                    mctrLineItem = new MctrLineItem();
                    mctrLineItem.QUANTITY_FROM = Convert.ToDecimal(row[dataTable.Columns[23].ColumnName]);
                    mctrLineItem.ACTIVITY_ID_FROM = Convert.ToString(row[dataTable.Columns[1].ColumnName]);
                    mctrLineItem.WORK_BUGL_FROM = Convert.ToString(row[dataTable.Columns[2].ColumnName]);
                    mctrLineItem.PROJECT_ID_FROM = Convert.ToString(row[dataTable.Columns[3].ColumnName]);
                    mctrLineItem.ACCOUNT_FROM = Convert.ToString(row[dataTable.Columns[4].ColumnName]);
                    mctrLineItem.PROJ_TRANS_TYPE_FROM = Convert.ToString(row[dataTable.Columns[5].ColumnName]);
                    mctrLineItem.PROJ_TRANS_CODE_FROM = Convert.ToString(row[dataTable.Columns[6].ColumnName]);
                    mctrLineItem.HOME_DEPT_FROM = Convert.ToString(row[dataTable.Columns[7].ColumnName]);
                    mctrLineItem.HOME_LOC_FROM = Convert.ToString(row[dataTable.Columns[8].ColumnName]);
                    mctrLineItem.CLASS_CD_FROM = Convert.ToString(row[dataTable.Columns[9].ColumnName]);
                    mctrLineItem.WORK_DEPT_FROM = Convert.ToString(row[dataTable.Columns[10].ColumnName]);
                    mctrLineItem.WORK_LOC_FROM = Convert.ToString(row[dataTable.Columns[11].ColumnName]);
                    mctrLineItem.RSC_FROM = Convert.ToString(row[dataTable.Columns[12].ColumnName]);
                    mctrLineItem.WPD_FROM = Convert.ToString(row[dataTable.Columns[13].ColumnName]);
                    mctrLineItem.BULK_ALCTN_CD7_FROM = Convert.ToString(row[dataTable.Columns[14].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[14].ColumnName]);
                    mctrLineItem.BULK_FROM = Convert.ToString(row[dataTable.Columns[14].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[14].ColumnName]);
                    mctrLineItem.CAUSAL_ID_FROM = Convert.ToString(row[dataTable.Columns[15].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[15].ColumnName]);
                    mctrLineItem.ESTMTG_PRICG_CD_FROM = Convert.ToString(row[dataTable.Columns[16].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[16].ColumnName]);
                    mctrLineItem.PO_ID_FROM = Convert.ToString(row[dataTable.Columns[17].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[17].ColumnName]);
                    mctrLineItem.PO_LINE_FROM = Convert.ToString(row[dataTable.Columns[18].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[18].ColumnName]);
                    mctrLineItem.PART_NO_FROM = Convert.ToString(row[dataTable.Columns[19].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[19].ColumnName]);
                    mctrLineItem.EPACS_CTT_FROM = Convert.ToString(row[dataTable.Columns[20].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[20].ColumnName]);
                    mctrLineItem.SHOP_ORDER_FROM = Convert.ToString(row[dataTable.Columns[21].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[21].ColumnName]);
                    mctrLineItem.AMOUNT_FROM = Convert.ToDecimal(row[dataTable.Columns[24].ColumnName] == DBNull.Value ? 0.0 : row[dataTable.Columns[24].ColumnName]);
                }
                if (row["COLNAME"].ToString() == "TO")
                {
                    mctrLineItem.QUANTITY_TO = Convert.ToDecimal(row[dataTable.Columns[23].ColumnName]);
                    mctrLineItem.ACTIVITY_ID_TO = Convert.ToString(row[dataTable.Columns[1].ColumnName]);
                    mctrLineItem.WORK_BUGL_TO = Convert.ToString(row[dataTable.Columns[2].ColumnName]);
                    mctrLineItem.PROJECT_ID_TO = Convert.ToString(row[dataTable.Columns[3].ColumnName]);
                    mctrLineItem.ACCOUNT_TO = Convert.ToString(row[dataTable.Columns[4].ColumnName]);
                    mctrLineItem.PROJ_TRANS_TYPE_TO = Convert.ToString(row[dataTable.Columns[5].ColumnName]);
                    mctrLineItem.PROJ_TRANS_CODE_TO = Convert.ToString(row[dataTable.Columns[6].ColumnName]);
                    mctrLineItem.HOME_DEPT_TO = Convert.ToString(row[dataTable.Columns[7].ColumnName]);
                    mctrLineItem.HOME_LOC_TO = Convert.ToString(row[dataTable.Columns[8].ColumnName]);
                    mctrLineItem.CLASS_CD_TO = Convert.ToString(row[dataTable.Columns[9].ColumnName]);
                    mctrLineItem.WORK_DEPT_TO = Convert.ToString(row[dataTable.Columns[10].ColumnName]);
                    mctrLineItem.WORK_LOC_TO = Convert.ToString(row[dataTable.Columns[11].ColumnName]);
                    mctrLineItem.RSC_TO = Convert.ToString(row[dataTable.Columns[12].ColumnName]);
                    mctrLineItem.WPD_TO = Convert.ToString(row[dataTable.Columns[13].ColumnName]);

                    mctrLineItem.BULK_ALCTN_CD7 = Convert.ToString(row[dataTable.Columns[14].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[14].ColumnName]);
                    mctrLineItem.BULK_TO = Convert.ToString(row[dataTable.Columns[14].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[14].ColumnName]);
                    mctrLineItem.CAUSAL_ID_TO = Convert.ToString(row[dataTable.Columns[15].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[15].ColumnName]);
                    mctrLineItem.ESTMTG_PRICG_CD_TO = Convert.ToString(row[dataTable.Columns[16].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[16].ColumnName]);
                    mctrLineItem.PO_ID_TO = Convert.ToString(row[dataTable.Columns[17].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[17].ColumnName]);
                    mctrLineItem.PO_LINE_TO = Convert.ToString(row[dataTable.Columns[18].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[18].ColumnName]);
                    mctrLineItem.PART_NO_TO = Convert.ToString(row[dataTable.Columns[19].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[19].ColumnName]);
                    mctrLineItem.EPACS_CTT_TO = Convert.ToString(row[dataTable.Columns[20].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[20].ColumnName]);
                    mctrLineItem.SHOP_ORDER_TO = Convert.ToString(row[dataTable.Columns[21].ColumnName] == DBNull.Value ? "" : row[dataTable.Columns[21].ColumnName]);
                    mctrLineItem.AMOUNT_TO = Convert.ToDecimal(row[dataTable.Columns[24].ColumnName] == DBNull.Value ? 0.0 : row[dataTable.Columns[24].ColumnName]);
                    mctrLineItemList.Add(mctrLineItem);
                }
            }
            return mctrLineItemList;
        }
        public static bool IsNullOrDefault<T>(T value)
        {
            return object.Equals(value, default(T));
        }

        public JsonResult mctrLineItemamountfromPostTextItemOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItemamountfromPostTextItemOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }
        public JsonResult mctrLineItembulkFromPostTextItemOpenLOVBulkFlag(BuProfile buprofile)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var resp = mctrCreateFormHandler.mctrLineItembulkFromPostTextItemOpenLOVBulkFlag(buprofile);
            var respBuProfile = resp.First<BuProfile>();
            return Json(respBuProfile, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public JsonResult mctrHeaderbutBuWhenButtonPressedOpenLOV(string OrigBu)
        {
            MctrCreateForm mctrCreateForm = new MctrCreateForm();
            mctrCreateForm.OrigBu = OrigBu;

            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrHeaderbutBuWhenButtonPressedOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public JsonResult buButPressPTTValidation(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.buButPressPTTValidation(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public JsonResult mctrHeaderbutFiscalYearWhenButtonPressedOpenLOV(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrHeaderbutFiscalYearWhenButtonPressedOpenLOV(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public JsonResult mctrLineItemcbMtlJrnlWhenCheckboxChanged(bool mtljrnl)
        {
            bool mtljrnlFlag = false;
            if (!(SessionPerister.ACCOUNTANTROLE == "Y" || SessionPerister.SRACCTROLE == "Y" || SessionPerister.COSTACCTROLE == "Y"))
            {
                mtljrnlFlag = mtljrnl ? false : true;
            }
            return Json(mtljrnlFlag, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public JsonResult manRatedFlag(MctrCreateForm mctrCreateForm)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var resp = mctrCreateFormHandler.manRatedFlag(mctrCreateForm);
            var respBuProfile = resp.First();
            return Json(respBuProfile, JsonRequestBehavior.AllowGet);
        }
        public JsonResult overheadOnLoad(MctrLineItem mctrlineitem)
        {

            logger.Info("Executing overheadOnLoad() : " + mctrlineitem);
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.overheadOnLoad().");
            var mctrCreateFormResp = mctrCreateFormHandler.overheadOnLoad(mctrlineitem);
            logger.Info("Response Received : " + mctrCreateFormResp);
            var jsonData = new
            {
                total = 1,
                page = 1,
                records = mctrCreateFormResp.Count(),
                rows = mctrCreateFormResp.First(),
            };
            return Json(jsonData, JsonRequestBehavior.AllowGet);

        }
        [HttpPost]
        public JsonResult mctrLineItembutTransFromWhenButtonPressedOpenLOV(string account_to, string ptt)
        {
            MctrLineItem mctrlineitem = new MctrLineItem();
            mctrlineitem.ACCOUNT_TO = account_to;
            mctrlineitem.PROJ_TRANS_TYPE_TO = ptt;
            logger.Info("Executing mctrLineItembutTransFromWhenButtonPressedOpenLOV() : " + mctrlineitem);
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.mctrLineItembutTransFromWhenButtonPressedOpenLOV().");
            var resp = mctrCreateFormHandler.mctrLineItembutTransFromWhenButtonPressedOpenLOV(mctrlineitem).First();
            logger.Info("Response Received : " + resp);
            return Json(resp, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult mctrHeaderbutRecallWhenButtonPressed(MctrCreateForm mctrCreateForm)
        {
            logger.Info("Executing mctrHeaderbutRecallWhenButtonPressed() : " + mctrCreateForm);
            if (mctrCreateForm != null)
            {
                MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
                logger.Debug("Executing mctrCreateFormHandler.mctrHeaderbutRecallWhenButtonPressed().");
                var mctrCreateFormResp = mctrCreateFormHandler.mctrHeaderbutRecallWhenButtonPressed(mctrCreateForm);
                logger.Info("Response Received : " + mctrCreateFormResp);
                return View("MctrCreateForm", mctrCreateFormResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }
        [HttpPost]
        public JsonResult ValidateActivityID(string activity_id)
        {
            MctrCreateForm mctrCreateForm = new MctrCreateForm();
            mctrCreateForm.ActivityId = activity_id == null ? activity_id : activity_id.ToUpper(System.Globalization.CultureInfo.CurrentCulture);
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.ValidateActivityID(mctrCreateForm);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);

        }
        [HttpPost]
        public JsonResult mctrLineItembutProjToWhenButtonPressedOpenLOV(MctrCreateForm mctrcreateform)
        {
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            var mctrCreateFormResp = mctrCreateFormHandler.mctrLineItembutProjToWhenButtonPressedOpenLOV(mctrcreateform);
            var resp = mctrCreateFormResp.First<MctrCreateForm>();
            return Json(resp, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public JsonResult querymodecheck(int mctrNo)
        {

            var mctrCreateForm = new MctrCreateForm();
            mctrCreateForm.MctrNo = mctrNo;
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            logger.Debug("Executing mctrCreateFormHandler.mctrLineItemPreDelete().");
            var mctrCreateFormResp = mctrCreateFormHandler.querymodecheck(mctrCreateForm);

            if (mctrCreateFormResp.Any())
            {
                logger.Info("Response Received : " + mctrCreateFormResp);
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            else
            {
                logger.Info("Response Received : " + mctrCreateFormResp);
                return Json(false, JsonRequestBehavior.AllowGet);
            }

        }

        [HttpPost]
        public JsonResult RejectCheck(string origBu)
        {
            bool rejectFlag = false;
            MctrCreateFormHandler mctrCreateFormHandler = new MctrCreateFormHandler();
            MctrRejectCode mctrRejectCode = new MctrRejectCode();
            mctrRejectCode.origBu = origBu;
            var mctrCreateFormResp = mctrCreateFormHandler.getRgLOVRejectJSON(mctrRejectCode);
            logger.Info("Response Received : " + mctrCreateFormResp);
            if (mctrCreateFormResp != null)
            {
                rejectFlag = true;
            }
            else
            {
                rejectFlag = false;
            }

                return Json(rejectFlag, JsonRequestBehavior.AllowGet);
        }

    }
}









