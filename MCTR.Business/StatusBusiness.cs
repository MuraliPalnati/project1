///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using log4net;
using MCTR.BusinessInterface;
using MCTR.DataAccess;
using MCTR.DataAccessInterface;
using MCTR.DomainEntity;
using System;
using System.Collections.Generic;

namespace MCTR.Business
{
    ///*********************************************************************
    ///<summary>
    ///StatusBusiness is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>
    public class StatusBusiness : BaseBusiness, IStatusBusiness
    {
         private readonly ILog logger;
        public StatusBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : statusWhenNewFormInstance
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status></returns>
        public IEnumerable<Status> statusWhenNewFormInstance()
        {
            try
            {
                logger.Info("Executing DataAccess : statusWhenNewFormInstance()");
                IStatusRepository statusRepository = new StatusRepository();
                var response = statusRepository.statusWhenNewFormInstance();
                logger.Info("Response received from StatusRepository.statusWhenNewFormInstance() : " + response);
                return response;
            }
            catch (Exception e)
            {

                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);


                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : CreateStatus
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status></returns>
        public IEnumerable<Status> CreateStatus(IEnumerable<Status> Status)
        {
            try
            {
                logger.Info("Executing DataAccess : statusWhenNewFormInstance() with input:" + Status);
                IStatusRepository statusRepository = new StatusRepository();
                var response = statusRepository.CreateStatus(Status);
                logger.Info("Response received from StatusRepository.statusWhenNewFormInstance() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : DeleteStatus
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status></returns>
        public IEnumerable<Status> DeleteStatus(IEnumerable<Status> Status)
        {
            try
            {
                logger.Info("Executing DataAccess : statusWhenNewFormInstance() with input:" + Status);
                IStatusRepository statusRepository = new StatusRepository();
                var response = statusRepository.DeleteStatus(Status);
                logger.Info("Response received from StatusRepository.DeleteStatus() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : EditStatus
        ///</summary>
        ///<param name = "Status"></param>
        ///<returns>IEnumerable<Status></returns>
        public IEnumerable<Status> EditStatus(IEnumerable<Status> Status)
        {
            try
            {
                logger.Info("Executing DataAccess : statusWhenNewFormInstance()with input:" + Status);
                IStatusRepository statusRepository = new StatusRepository();
                var response = statusRepository.EditStatus(Status);
                logger.Info("Response received from StatusRepository.EditStatus() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }
        }
    }
}