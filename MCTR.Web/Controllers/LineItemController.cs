
///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  


using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System;
using System.Linq;
using System.Web.Mvc;
using log4net;
using MCTR.Web.Security;
using System.Collections.Generic;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///LineItemController is a web controller implementation for the 
    ///LineItem screen.
    ///</summary>
    ///
    [CustomAuthorize]
    public class LineItemController : Controller
    {
         private readonly ILog logger;


        public LineItemController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }


        ///*************************************************************
        ///<summary>
        ///Method Name : lineItemOnLoad
        ///</summary>
        public ActionResult lineItemOnLoad()
        {
            return View("LineItem");
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : OpenMctr
        ///</summary>
        public ActionResult OpenMctr(int lineItemMctrNo)
        {
            TempData["lineItemNav"] = true;

            return RedirectToAction("MctrLoad", "MctrCreateForm", new{ mctrNo= lineItemMctrNo });
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItemMctrLineItemOnLoad
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpPost]
        public JsonResult mctrLineItemMctrLineItemOnLoad(LineItem lineItem)
        {
            
                try
                {
                    logger.Info("Executing MCTR.Web.Controllers.LineItemController.mctrLineItemMctrLineItemOnLoad() : " + lineItem);
                    if (lineItem != null)
                    {
                        LineItemHandler lineItemHandler = new LineItemHandler();
                        lineItem.session_bems = SessionPerister.BEMSID;
                        var lineItemResp = lineItemHandler.mctrLineItemMctrLineItemOnLoad(lineItem);
                        logger.Info("Response Received : " + lineItemResp);

                    List<LineItem> emptyRows = new List<LineItem>();
                    for (int i = 0; i < 10; i++)
                    {
                        LineItem a = new LineItem();
                        a.ACTIVITY_ID_FROM = "";
                        a.ACTIVITY_ID_TO = "";
                        emptyRows.Add(a);

                    }
                    var jsonData = new
                        {
                            total = 1,
                            page = 1,
                            records = lineItemResp.Count(),
                            rows = emptyRows,
                            userdata = lineItemResp
                        };
                        return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                    else
                    {
                        logger.Info("Request object is null or doesn't contain any value.");
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
                }
                catch (Exception e)
                {
                    logger.Error(" Error from MCTR.Web.Controllers.LineItemController.mctrLineItemMctrLineItemOnLoad() : " + e.Message);
                    throw;
                }
            
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItembutOpenMctrWhenButtonPressed
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpPost]
        public ActionResult mctrLineItembutOpenMctrWhenButtonPressed(LineItem lineItem)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.LineItemController.mctrLineItembutOpenMctrWhenButtonPressed() : " + lineItem);
                if (lineItem != null)
                {
                    LineItemHandler lineItemHandler = new LineItemHandler();
                    var lineItemResp = lineItemHandler.mctrLineItembutOpenMctrWhenButtonPressed(lineItem);
                    logger.Info("Response Received : " + lineItemResp);
                    return View("LineItem", lineItemResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error(" Error from MCTR.Web.Controllers.LineItemController.mctrLineItembutOpenMctrWhenButtonPressed() :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItemPostQuery
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpPost]
        public ActionResult mctrLineItemPostQuery(LineItem lineItem)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.LineItemController.mctrLineItemPostQuery() : " + lineItem);
                if (lineItem != null)
                {
                    LineItemHandler lineItemHandler = new LineItemHandler();
                    var lineItemResp = lineItemHandler.mctrLineItemPostQuery(lineItem);
                    logger.Info("Response Received : " + lineItemResp);
                    return View("LineItem", lineItemResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.LineItemController.mctrLineItemPostQuery() :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBems1LOV()
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpGet]
        public ActionResult getRgBems1LOV()
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.LineItemController.getRgBems1LOV()() : ");

                LineItemHandler lineItemHandler = new LineItemHandler();
                logger.Debug("Executing MCTR.Web.Controllers.LineItemController.getRgBems1LOV().");
                var lineItemResp = lineItemHandler.getRgBems1LOV();
                logger.Info("Response Received : " + lineItemResp);
                return View("LineItem", lineItemResp);
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.LineItemController.getRgBems1LOV() :" + e.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBems2LOV()
        ///</summary>
        [HttpGet]
        public ActionResult getRgBems2LOV()
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.LineItemController.getRgBems2LOV() : ");

                LineItemHandler lineItemHandler = new LineItemHandler();
                logger.Debug("Executing MCTR.Web.Controllers.LineItemController.getRgBems2LOV().");
                var lineItemResp = lineItemHandler.getRgBems2LOV();
                logger.Info("Response Received : " + lineItemResp);
                return View("LineItem", lineItemResp);
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.LineItemController.getRgBems2LOV() :" + e.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBems3LOV()
        ///</summary>
        [HttpGet]
        public ActionResult getRgBems3LOV()
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.LineItemController.getRgBems3LOV() : ");

                LineItemHandler lineItemHandler = new LineItemHandler();
                logger.Debug("Executing MCTR.Web.Controllers.LineItemController.getRgBems3LOV()().");
                var lineItemResp = lineItemHandler.getRgBems3LOV();
                logger.Info("Response Received : " + lineItemResp);
                return View("LineItem", lineItemResp);
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.LineItemController.getRgBems3LOV() :" + e.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : lineItemOnError
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpPost]
        public ActionResult lineItemOnError(LineItem lineItem)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.LineItemController.lineItemOnError() : " + lineItem);
                if (lineItem != null)
                {
                    LineItemHandler lineItemHandler = new LineItemHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.LineItemController.lineItemOnError().");
                    var lineItemResp = lineItemHandler.lineItemOnError(lineItem);
                    logger.Info("Response Received : " + lineItemResp);
                    return View("LineItem", lineItemResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {

                logger.Error("Error from MCTR.Web.Controllers.LineItemController.lineItemOnError() :" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : lineItemWhenWindowClosed
        ///</summary>
        ///<param name = "LineItem"></param>
        ///<returns>IEnumerable<LineItem> </returns>
        [HttpPost]
        public ActionResult lineItemWhenWindowClosed(LineItem lineItem)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.LineItemController.lineItemWhenWindowClosed() : " + lineItem);
                if (lineItem != null)
                {
                    LineItemHandler lineItemHandler = new LineItemHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.LineItemController.lineItemWhenWindowClosed():");
                    var lineItemResp = lineItemHandler.lineItemWhenWindowClosed(lineItem);
                    logger.Info("Response Received : " + lineItemResp);
                    return View("LineItem", lineItemResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.LineItemController.lineItemWhenWindowClosed() :" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : get
        ///</summary>
        ///<returns>IEnumerable<LineItem> </returns>

        [HttpGet]
        [ActionName("Get")]
        public ActionResult Get()
        {
            try
            {
                LineItemHandler lineItemHandler = new LineItemHandler();
                logger.Debug("Executing MCTR.Web.Controllers.LineItemController.Get().");
                var lineItemResp = lineItemHandler.Get();
                logger.Info("Response Received :");
                return View("MctrLog", lineItemResp);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.LineItemController.get() :" + e.Message);
                throw;

            }
        }
    }
}

