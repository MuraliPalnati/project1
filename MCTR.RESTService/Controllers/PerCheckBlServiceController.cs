///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  


using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using log4net;

using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.Business;

namespace MCTR.RESTService.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///PerCheckBlServiceController is a Rest controller implementation  
    ///which acts as a wrapper to the PerCheckBlBusiness implementation and
    ///provides api path for each methods exposed.
    ///</summary>

    public class PerCheckBlServiceController : ApiController
    {

         private readonly ILog logger;

        public PerCheckBlServiceController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : perCheckPerCheckOnLoad
        ///</summary>
        ///<param name = "PerCheckBl"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>

        [HttpPost]
        [ActionName("perCheckPerCheckOnLoad")]
        public HttpResponseMessage perCheckPerCheckOnLoad([FromBody]IEnumerable<PerCheckBl> perCheckBl)
        {
            try
            {
                logger.Info("Executing Rest API : perCheckPerCheckOnLoad() with request : " + perCheckBl);
                IPerCheckBlBusiness perCheckBlBusiness = new PerCheckBlBusiness();
                var response = perCheckBlBusiness.perCheckPerCheckOnLoad(perCheckBl);
                logger.Info("Response received from perCheckBlBusiness.perCheckPerCheckOnLoad() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }



        ///*************************************************************
        ///<summary>
        ///Method Name : perCheckBlWhenNewFormInstance
        ///</summary>
        ///<param name = "PerCheckBl"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>

        [HttpPost]
        [ActionName("perCheckBlWhenNewFormInstance")]
        public HttpResponseMessage perCheckBlWhenNewFormInstance([FromBody]IEnumerable<PerCheckBl> perCheckBl)
        {
            try
            {


                logger.Info("Executing Rest API : perCheckBlWhenNewFormInstance() with request : " + perCheckBl);
                if (perCheckBl != null)
                {
                    IPerCheckBlBusiness perCheckBlBusiness = new PerCheckBlBusiness();
                    var response = perCheckBlBusiness.perCheckBlWhenNewFormInstance(perCheckBl);
                    logger.Info("Response received from perCheckBlBusiness.perCheckBlWhenNewFormInstance() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : perCheckBlWhenWindowClosed
        ///</summary>
        ///<param name = "PerCheckBl"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>

        [HttpPost]
        [ActionName("perCheckBlWhenWindowClosed")]
        public HttpResponseMessage perCheckBlWhenWindowClosed([FromBody]IEnumerable<PerCheckBl> perCheckBl)
        {
            try
            {


                logger.Info("Executing Rest API : perCheckBlWhenWindowClosed() with request : " + perCheckBl);
                if (perCheckBl != null)
                {
                    IPerCheckBlBusiness perCheckBlBusiness = new PerCheckBlBusiness();
                    var response = perCheckBlBusiness.perCheckBlWhenWindowClosed(perCheckBl);
                    logger.Info("Response received from perCheckBlBusiness.perCheckBlWhenWindowClosed() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.RESTService: " + e.Message);
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }
    }
}






