///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.Sql;
using System.Data.SqlTypes;

using System.Data.SqlClient;
using Oracle.ManagedDataAccess.Client;



using MCTR.DomainEntity;
using log4net;
using MCTR.DataEntity;

namespace MCTR.DataAccess
{
    ///*********************************************************************
    ///<summary>
    ///MCTRlogOrigChgRepository is a data access implementation which holds all 
    ///the data access logic in it.
    ///</summary>
    public class MCTRlogOrigChgRepository : BaseRepository, IMCTRlogOrigChgRepository
    {
        MctrLog mctrlog = new MctrLog();
        List<MctrLog> list = new List<MctrLog>();
        private readonly ILog logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLogOnInsert
        ///</summary>
        ///<param name = "mctrLogReq"></param>
        ///<returns>IEnumerable<MctrLog> </returns>
        public IEnumerable<MctrLog> mctrLogOnInsert(IEnumerable<MctrLog> mctrLogReq)
        {
            logger.Debug("Executing MCTR.DataAccess.MCTRlogOrigChgRepository.mctrLogOnInsert with input : " + mctrLogReq);

            try
            {
                mctrlog = mctrLogReq.First<MctrLog>();

                List<OracleParameter> paramters = new List<OracleParameter>();

                string sqlstmt = "insert  into  mctr_log_orig_chg  (  mctr_no  ,  date_changed  ,  status_id  ,  bems_orig  ,  bems_orig_new  ,  reason  ,  bems_admin  )  values (:mctrno,CURRENT_TIMESTAMP,:statusId,:bemsOrig,:bemsOrigNew,:reason,:bemsAdmin);";
                OracleParameter[] parameter1 = new OracleParameter[6];
                parameter1[0] = new OracleParameter(":mctrno", OracleDbType.Int32, mctrlog.Mctr_No, ParameterDirection.Input);
                parameter1[1] = new OracleParameter(":statusId", OracleDbType.Varchar2, mctrlog.Status_Id, ParameterDirection.Input);
                parameter1[2] = new OracleParameter(":bemsOrig", OracleDbType.Varchar2, mctrlog.Bems_Orig, ParameterDirection.Input);
                parameter1[3] = new OracleParameter(":bemsOrigNew", OracleDbType.Varchar2, mctrlog.Bems_Orig_New, ParameterDirection.Input);
                parameter1[4] = new OracleParameter(":reason", OracleDbType.Varchar2, mctrlog.reason, ParameterDirection.Input);
                parameter1[5] = new OracleParameter(":bemsAdmin", OracleDbType.Varchar2, mctrlog.Bems_Admin, ParameterDirection.Input);

                OracleParameter[] param = paramters.ToArray<OracleParameter>();
                sqlstmt = "insert  into  mctr_log_orig_chg  (  mctr_no  ,  date_changed  ,  status_id  ,  bems_orig  ,  bems_orig_new  ,  reason  ,  bems_admin  ) values(:0,CURRENT_TIMESTAMP,:1,:2, :3, :4, :5 );";
                int result = entities.Database.ExecuteSqlCommand("BEGIN " + sqlstmt + " END;", parameter1);
                sqlstmt = "update mctr_header set bems_orig = :0 where mctr_no = :1;";
                OracleParameter[] parameters2 = new OracleParameter[2];
                parameters2[0] = new OracleParameter(":bems_orig", OracleDbType.Varchar2, mctrlog.Bems_Orig_New, ParameterDirection.Input);
                parameters2[1] = new OracleParameter(":mctr_no", OracleDbType.Int32, mctrlog.Mctr_No, ParameterDirection.Input);


                param = paramters.ToArray<OracleParameter>();
                result = entities.Database.ExecuteSqlCommand("BEGIN " + sqlstmt + " END;", parameters2);

                if (result != 0)
                {
                    mctrLogReq.First().RespMsg = "";
                }
                else
                {
                    mctrlog.RespMsg = "Couldn't Save it into DB";
                }


            }
            catch (OracleException exp)
            {
                logger.Error("Oracle Excception occured at MCTRlogOrigChgRepository.mctrLogOnInsert() : " + exp.Message);
                mctrlog.RespMsg = exp.Message.Split(':')[1];
            }
            catch (Exception ex)
            {
                
                logger.Error("Excception occured at MCTRlogOrigChgRepository.mctrLogOnInsert() : " + ex.Message);
            }

            list.Add(mctrlog);
            logger.Debug(" Recieved Response from MCTR.DataAccess.MCTRlogOrigChgRepository.mctrLogOnInsert() :" + list);
            return list;
        }

        ///*************************************************************
        /// <summary>
        /// Method Name : validateBemsJson
        /// </summary>
        /// <param name="mctrLogAcct"></param>
        /// <returns>IEnumerable<MctrLog></returns>
        public IEnumerable<MctrLog> validateBemsJson(IEnumerable<MctrLog> mctrLog)
        {
            logger.Debug("Executing Mctr.DataAccess.MctrLogAcctRepository.validateBems() with input : " + mctrLog);
            try
            {
                var mctrOrigLog = mctrLog.First();
                StringBuilder query = new StringBuilder("select * from MCTR_EMPLOYEE_V where BEMS_ID=" + mctrOrigLog.Bems_Orig_New);
                var response = entities.MCTR_EMPLOYEE_V.SqlQuery(query.ToString()).ToList<MCTR_EMPLOYEE_V>();

                if (response.Count > 0)
                {
                    mctrLog.First().RespMsg = "";
                    
                }
                else
                {
                    mctrLog.First().RespMsg = "Invalid BEMS ID. Please Enter Valid BEMS ID";
                }
            }
            catch (OracleException e)
            {
                logger.Error("Error from  Mctr.DataAccess.MctrLogAcctRepository.mctrHeaderMctrHeaderOnLoad():" + e.Message);
                mctrLog.First().RespMsg = "Invalid BEMS ID. Please Enter Valid BEMS ID";
            }
            return mctrLog;
        }
        ///*************************************************************
        /// <summary>
        /// Method Name : mctrLogWhenNewRecordInstance
        /// </summary>
        /// <param name="mctrLogReq"></param>
        /// <returns>IEnumerable<MctrLog></returns>
        public IEnumerable<MctrLog> mctrLogWhenNewRecordInstance(IEnumerable<MctrLog> mctrLogReq)
        {
            mctrlog = mctrLogReq.First<MctrLog>();
            MCTR_HEADER headerObj = new MCTR_HEADER();
            logger.Debug("Executing MCTR.DataAccess.MCTRlogOrigChgRepository.mctrLogWhenNewRecordInstance with input : " + mctrLogReq);
            try
            {
                var resultlist = entities.Database.SqlQuery<MctrLog>("select * from MCTR_HEADER where MCTR_NO=" + mctrlog.Mctr_No).Single<MctrLog>();
                // Get Bems Admin from the Session
                if (resultlist!=null)
                {
                    resultlist.RespMsg = "";
                    resultlist.Date_Changed = DateTime.Now.Date;
                    mctrlog = resultlist;
                }
                else
                {
                    mctrlog.RespMsg = "Invalid MCTR No.Please Enter Valid MCTR No";
                }
               

            }
            catch (Exception ex)
            {
                logger.Error("Error from  Mctr.DataAccess.mctrLogWhenNewRecordInstance():" + ex.Message);
                //comiting
                mctrlog.RespMsg = "Invalid MCTR No. Please Enter Valid MCTR No";
                logger.Error("Error thrown from MCTRlogOrigChgRepository.mctrLogWhenNewRecordInstance() : with req " + mctrLogReq + "error message: ");

            }

            list.Add(mctrlog);
            logger.Debug(" Recieved Response from MCTR.DataAccess.MCTRlogOrigChgRepository.mctrLogWhenNewRecordInstance:" + list);
            return list;
        }
        ///*************************************************************
        /// <summary>
        /// Method Name : Get
        /// </summary>
        /// <param ></param>
        /// <returns>IEnumerable<MctrLog></returns>
        public IEnumerable<MctrLog> Get()
        {
            logger.Debug("Executing MCTR.DataAccess.MCTRlogOrigChgRepository.Get");
            try
            {
              
                var list = entities.MCTR_LOG_ORIG_CHG.SqlQuery("select * from MCTR_LOG_ORIG_CHG").ToList<MCTR_LOG_ORIG_CHG>();
                var relist = AutoMapper.Mapper.DynamicMap<IEnumerable<MCTR_LOG_ORIG_CHG>, List<MctrLog>>(list);
                logger.Debug(" Recieved Response from :" + relist);
                return relist;
            }
            catch (Exception ex)
            {
                logger.Error("Error thrown from MCTRlogOrigChgRepository.Get(): "+ex.Message);
                throw;
            }

        }
    }


}
