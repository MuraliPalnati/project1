using log4net;
using MCTR.DomainEntity;
///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®

using System.Collections.Generic;
using System.Linq;

namespace MCTR.Web.Handlers
{
    public class RoleListHandler
  {
     private readonly ILog logger;
    
    public RoleListHandler()
    {
      logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
    }
        
     
    public IEnumerable<RoleList> roleListOnLoad(RoleList roleList)
    {

      logger.Debug("Executing roleListRoleListOnLoad rest service handler.");
      string restApiPath = "RoleListService/roleListOnLoad";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleList);
            var response = HandlerUtil<RoleList>.RestGetProcessor(restApiPath, roleList).ToList<RoleList>();
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<RoleList> roleListbutRoleWhenButtonPressed(RoleList roleList){

      logger.Debug("Executing roleListbutRoleWhenButtonPressed rest service handler.");
      string restApiPath = "RoleListService/roleListbutRoleWhenButtonPressed";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleList);
            var response = HandlerUtil<RoleList>.RestPostProcessor(restApiPath, roleList);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<RoleList> roleListbutFindWhenButtonPressed(RoleList roleList){

      logger.Debug("Executing roleListbutFindWhenButtonPressed rest service handler.");
      string restApiPath = "RoleListService/roleListbutFindWhenButtonPressed";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleList);
            var response = HandlerUtil<RoleList>.RestPostProcessor(restApiPath, roleList);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<RoleList> roleListPostQuery(RoleList roleList){

      logger.Debug("Executing roleListPostQuery rest service handler.");
      string restApiPath = "RoleListService/roleListPostQuery";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleList);
            var response = HandlerUtil<RoleList>.RestPostProcessor(restApiPath, roleList);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<RoleList> roleListWhenNewFormInstance(RoleList roleList){

      logger.Debug("Executing roleListWhenNewFormInstance rest service handler.");
      string restApiPath = "RoleListService/roleListWhenNewFormInstance";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleList);
            var response = HandlerUtil<RoleList>.RestPostProcessor(restApiPath, roleList);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<RoleList> roleListWhenWindowClosed(RoleList roleList){

      logger.Debug("Executing roleListWhenWindowClosed rest service handler.");
      string restApiPath = "RoleListService/roleListWhenWindowClosed";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleList);
            var response = HandlerUtil<RoleList>.RestPostProcessor(restApiPath, roleList);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    
  }

}

