///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;

using log4net;

using MCTR.DomainEntity;

namespace MCTR.Web.Handlers
///*********************************************************************
///<summary>
///TtdCheckBlHandler provides a level of abstraction for consuming the REST api.
///</summary>
{
    public class TtdCheckBlHandler
    {
         private readonly ILog logger;

        public TtdCheckBlHandler()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : ttdCheckTtdCheckOnLoad
        ///</summary>
        ///<param name = "TtdCheckBl"></param>
        ///<returns>IEnumerable<TtdCheckBl> </returns>


        public IEnumerable<TtdCheckBl> ttdCheckTtdCheckOnLoad(TtdCheckBl ttdCheckBl)
        {
            try
            {

                logger.Debug("Executing ttdCheckTtdCheckOnLoad rest service handler.");
                string APIAction = "TtdCheckBlService/ttdCheckTtdCheckOnLoad";
                logger.Info("Invoking Rest API : " + APIAction + " with Request : " + ttdCheckBl);
                var response = HandlerUtil<TtdCheckBl>.RestPostProcessor(APIAction, ttdCheckBl);
                logger.Info("Response received form Rest API : " + APIAction + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.TtdCheckBlHandler.ttdCheckTtdCheckOnLoad():" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : ttdCheckPostQuery
        ///</summary>
        ///<param name = "TtdCheckBl"></param>
        ///<returns>IEnumerable<TtdCheckBl> </returns>
        public IEnumerable<TtdCheckBl> ttdCheckPostQuery(TtdCheckBl ttdCheckBl)
        {
            try
            {

                logger.Debug("Executing ttdCheckPostQuery rest service handler.");
                string restApiPath = "TtdCheckBlService/ttdCheckPostQuery";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + ttdCheckBl);
                var response = HandlerUtil<TtdCheckBl>.RestPostProcessor(restApiPath, ttdCheckBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.TtdCheckBlHandler.ttdCheckPostQuery():" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : ttdCheckBlWhenNewFormInstance
        ///</summary>
        ///<param name = "TtdCheckBl"></param>
        ///<returns>IEnumerable<TtdCheckBl> </returns>
        public IEnumerable<TtdCheckBl> ttdCheckBlWhenNewFormInstance(TtdCheckBl ttdCheckBl)
        {
            try
            {

                logger.Debug("Executing ttdCheckBlWhenNewFormInstance rest service handler.");
                string restApiPath = "TtdCheckBlService/ttdCheckBlWhenNewFormInstance";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + ttdCheckBl);
                var response = HandlerUtil<TtdCheckBl>.RestPostProcessor(restApiPath, ttdCheckBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.TtdCheckBlHandler.ttdCheckBlWhenNewFormInstance():" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : ttdCheckBlWhenWindowClosed
        ///</summary>
        ///<param name = "TtdCheckBl"></param>
        ///<returns>IEnumerable<TtdCheckBl> </returns>
        public IEnumerable<TtdCheckBl> ttdCheckBlWhenWindowClosed(TtdCheckBl ttdCheckBl)
        {
            try
            {

                logger.Debug("Executing ttdCheckBlWhenWindowClosed rest service handler.");
                string restApiPath = "TtdCheckBlService/ttdCheckBlWhenWindowClosed";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + ttdCheckBl);
                var response = HandlerUtil<TtdCheckBl>.RestPostProcessor(restApiPath, ttdCheckBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.TtdCheckBlHandler.ttdCheckBlWhenWindowClosed():" + e.Message);
                throw;
            }
        }


    }

}

