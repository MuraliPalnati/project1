///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections;
using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccessInterface;
using MCTR.DataAccess;

namespace MCTR.Business
{

    ///*********************************************************************
    ///<summary>
    ///mctrrptsadmnbl_business is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>
    public class MctrRptsAdmnBlBusiness : BaseBusiness, IMctrRptsAdmnBlBusiness
    {
         private readonly ILog logger;
        public MctrRptsAdmnBlBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }

        IMctrRptsAdmnBlRepository repository = new MctrRptsAdmnBlRepository();
        public IEnumerable<BusUnit> getRgBuLOV(IEnumerable<MctrRptsAdmnBl> mctrBusUnitsBl)
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrOpenReportsBlBusiness.getRgBuLOV with request : " + mctrBusUnitsBl);
                var resultlist = repository.selectionbutBuWhenButtonPressedOpenLOV(mctrBusUnitsBl);
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.getRgBuLOV with request : " + mctrBusUnitsBl);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrOpenReportsBlBusiness.getRgBuLOV with request : " + e.Message);
                throw;
            }
        }

        public IEnumerable<WeeklyJournalDates> selectionbutToDateWhenButtonPressedOpenLOV()
        {
            try
            {
                logger.Info("Executing MCTR.Business.MctrRptsAdmnBlBusiness.getRgBuLOV with request : ");
                var resultlist = repository.selectionbutToDateWhenButtonPressedOpenLOV();
                logger.Info("Response received from  MCTR.Business.MctrIncrRatesBusiness.getRgBuLOV with request : " );
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.MctrOpenReportsBlBusiness.getRgBuLOV with request : " + e.Message);
                throw;
            }
        }
    }
}