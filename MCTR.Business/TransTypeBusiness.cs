///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :
using System.Collections.Generic;
using MCTR.DataAccess;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccessInterface;
using System;

namespace MCTR.Business
{
    public class TransTypeBusiness : BaseBusiness, ITransTypeBusiness
    {
        ///*************************************************************
        ///<summary>
        ///Method Name : transtypecmponcdPostTextItem
        ///</summary>
        ///<param name = "TransTypes"></param>
        ///<returns>IEnumerable<TransTypes></returns>
        public IEnumerable<TransType> transtypecmponcdPostTextItem(IEnumerable<TransType> TransTypes)
        {
          
            try
            {
                ITransTypeRepository transTypeRepository = new TransTypeRepository();
                return transTypeRepository.transtypeCmponcdPostTextItem(TransTypes);
               
            }
            catch (Exception e)
            {
                throw e;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : transtypewhennewforminstance
        ///</summary>
        ///<param name = "TransTypes"></param>
        ///<returns>IEnumerable<TransTypes></returns>
        public IEnumerable<TransType> transtypewhennewforminstance(IEnumerable<TransType> TransTypes)
        {
            try
            {

                ITransTypeRepository transTypeRepository = new TransTypeRepository();
                var response = transTypeRepository.transtypewhennewforminstance(TransTypes);
                return response;


            }
            catch (Exception e)
            {
                throw e;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : transtypeonload
        ///</summary>
        ///<param name = "TransTypes"></param>
        ///<returns>IEnumerable<TransTypes></returns>
        public IEnumerable<TransType> transtypeonload(IEnumerable<TransType> transtypes)
        {
            try
            {
                ITransTypeRepository transTypeRepository = new TransTypeRepository();
                return transTypeRepository.transtypeonload(transtypes);
            }
            catch (Exception e)
            {
                throw e;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : EditTransType
        ///</summary>
        ///<param name = "TransTypes"></param>
        ///<returns>IEnumerable<TransTypes></returns>
        public IEnumerable<TransTypeEdit> EditTransType(IEnumerable<TransTypeEdit> TransTypes)

        {
            try
            {
                ITransTypeRepository transTypeRepository = new TransTypeRepository();
                return transTypeRepository.EditTransType(TransTypes);
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : DeleteTransType
        ///</summary>
        ///<param name = "TransTypes"></param>
        ///<returns>IEnumerable<TransTypes></returns>
        public IEnumerable<TransType> DeleteTransType(IEnumerable<TransType> TransTypes)

        {
            try
            {
                ITransTypeRepository transTypeRepository = new TransTypeRepository();
                return transTypeRepository.DeleteTransType(TransTypes);
            }
            catch (Exception e)
            {
                throw e;
            }
        }

    }
}
