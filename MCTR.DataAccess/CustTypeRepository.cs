///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  
using System;
using System.Collections.Generic;
using System.Linq;
using AutoMapper;
using System.Data;
using MCTR.DomainEntity;
using MCTR.DataAccessInterface;
using MCTR.DataEntity;
using log4net;
using System.Data.Entity;

namespace MCTR.DataAccess
{
    public class CustTypeRepository : BaseRepository, ICustTypeRepository
    {
        private readonly ILog logger = null;
        ///*********************************************************************
        ///<summary>
        ///CustTypeRepository is a data access implementation which holds all 
        ///the data access logic in it.
        ///</summary>
        ///*************************************************************
        ///<summary>
        ///Method Name : custTypeWhenNewFormInstance
        ///</summary>
        ///<param name = "CustTypes"></param>
        ///<returns>IEnumerable<CustTypes> </returns>
        public IEnumerable<CustType> custTypeWhenNewFormInstance(IEnumerable<CustType> CustTypes)
        {
            logger.Debug("Executing MCTR.DataAccess.CustTypeRepository.custTypeWhenNewFormInstance" + CustTypes);
            try
            {
                var TargetCustTypesToInsert = Mapper.DynamicMap<IEnumerable<CustType>, IEnumerable<MCTR_CUST_TYPE>>(CustTypes);
                foreach (var Cust in TargetCustTypesToInsert)
                {
                    entities.MCTR_CUST_TYPE.Add(Cust);
                    entities.SaveChanges();
                }
                return CustTypes;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.DataAccess.CustTypeRepository.custTypeWhenNewFormInstance:" + e.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : custTypeWhenWindowClosed
        ///</summary>
        ///<param name = "CustTypes"></param>
        ///<returns>IEnumerable<CustTypes> </returns>
        public IEnumerable<CustType> custTypeWhenWindowClosed(IEnumerable<CustType> CustTypes)
        {
            return CustTypes;
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : custtypeGetAll
        ///</summary>
    
        public IEnumerable<CustType> custtypeGetAll()
        {
           
            try
            {
                string sqlstmt = "select * from mctr_owner . mctr_cust_type order by fiscal_year , customer_grp , customer_type_cd7";//

                var targetCustType = entities.MCTR_CUST_TYPE.SqlQuery(sqlstmt).ToList<MCTR_CUST_TYPE>();
                var targetCust = Mapper.DynamicMap<IEnumerable<MCTR_CUST_TYPE>, IEnumerable<CustType>>(targetCustType);
                return targetCust;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MCTR.DataAccess.CustTypeRepository.custtypeGetAll:" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : EditCustType
        ///</summary>
        ///<param name = "CustTypes"></param>
        ///<returns>IEnumerable<CustTypes> </returns>
        public IEnumerable<CustType> EditCustType(IEnumerable<CustType> CustTypes)
        {
            logger.Debug("Executing MCTR.DataAccess.CustTypeRepository.EditCustType" + CustTypes);
            try
            {
                var TargetCustTypesToInsert = Mapper.DynamicMap<IEnumerable<CustType>, IEnumerable<MCTR_CUST_TYPE>>(CustTypes);
                foreach (var Cust in TargetCustTypesToInsert)
                {
                    entities.MCTR_CUST_TYPE.Attach(Cust);
                    var entry = entities.Entry(Cust);
                    entry.State = EntityState.Modified;
                    entities.SaveChanges();
                }
            }
            catch (Exception exp)
            {
                logger.Info("Exception received from EditCustType : " + exp.Message);
                throw ;
            }
            return CustTypes;

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : DeleteCustType
        ///</summary>
        ///<param name = "CustTypes"></param>
        ///<returns>IEnumerable<CustTypes> </returns>
        public IEnumerable<CustType> DeleteCustType(IEnumerable<CustType> CustTypes)
        {
            logger.Debug("Executing MCTR.DataAccess.CustTypeRepository.DeleteCustType" + CustTypes);
          
            try
            {
                var TargetCustTypesToInsert = Mapper.DynamicMap<IEnumerable<CustType>, IEnumerable<MCTR_CUST_TYPE>>(CustTypes);

                foreach (var Cust in TargetCustTypesToInsert)
                {
                    entities.MCTR_CUST_TYPE.Attach(Cust);
                    entities.MCTR_CUST_TYPE.Remove(Cust);
                    entities.SaveChanges();

                }

            }
            catch (Exception exp)
            {
                logger.Info("Exception received from DeleteCustType : " + exp.Message);
                throw;
            }

            return CustTypes;
        }


    }
}
