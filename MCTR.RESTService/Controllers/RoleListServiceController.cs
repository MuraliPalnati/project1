///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///
///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.Business;
using System;

namespace MCTR.RESTService.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///RoleListServiceController is a Rest controller implementation  
    ///which acts as a wrapper to the RoleListBusiness implementation and
    /// provides api path for each methods exposed.
    ///</summary>

    public class RoleListServiceController : ApiController
    {

        private readonly ILog logger = null;
        private readonly RoleListBusiness roleListBusiness = new RoleListBusiness();
        public RoleListServiceController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListOnLoad
        ///</summary>
        ///<param name = "RoleList"></param>
        ///<returns>IEnumerable<RoleList> </returns>
        [HttpGet]
        [ActionName("roleListOnLoad")]
        public HttpResponseMessage roleListOnLoad(IEnumerable<RoleList> roleList)
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.RoleListServiceController.roleListOnLoad() with request : " + roleList);
                var response = roleListBusiness.roleListOnload(roleList);
                logger.Info("Response received from MCTR.RESTService.RoleListServiceController.roleListOnLoad() : " + response);
                return Request.CreateResponse(HttpStatusCode.OK, response);
            }
            catch (Exception e)
            {
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListbutRoleWhenButtonPressed
        ///</summary>
        ///<param name = "RoleList"></param>
        ///<returns>IEnumerable<RoleList> </returns>

        [HttpPost]
        [ActionName("roleListbutRoleWhenButtonPressed")]
        public HttpResponseMessage roleListbutRoleWhenButtonPressed([FromBody]IEnumerable<RoleList> roleList)
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.RoleListServiceController.roleListbutRoleWhenButtonPressed() with request : " + roleList);
                if (roleList != null)
                {

                    var response = roleListBusiness.roleListbutRoleWhenButtonPressed(roleList);
                    logger.Info("Response received from MCTR.RESTService.RoleListServiceController.roleListbutRoleWhenButtonPressed() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch (Exception e)
            {
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListbutFindWhenButtonPressed
        ///</summary>
        ///<param name = "RoleList"></param>
        ///<returns>IEnumerable<RoleList> </returns>

        [HttpPost]
        [ActionName("roleListbutFindWhenButtonPressed")]
        public HttpResponseMessage roleListbutFindWhenButtonPressed([FromBody]IEnumerable<RoleList> roleList)
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.RoleListServiceController.roleListbutFindWhenButtonPressed() with request : " + roleList);
                if (roleList != null)
                {

                    var response = roleListBusiness.roleListbutFindWhenButtonPressed(roleList);
                    logger.Info("Response received from MCTR.RESTService.RoleListServiceController.roleListbutFindWhenButtonPressed() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch (Exception e)
            {
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListPostQuery
        ///</summary>
        ///<param name = "RoleList"></param>
        ///<returns>IEnumerable<RoleList> </returns>

        [HttpPost]
        [ActionName("roleListPostQuery")]
        public HttpResponseMessage roleListPostQuery([FromBody]IEnumerable<RoleList> roleList)
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.RoleListServiceController.roleListPostQuery() with request : " + roleList);
                if (roleList != null)
                {

                    var response = roleListBusiness.roleListPostQuery(roleList);
                    logger.Info("Response received from MCTR.RESTService.RoleListServiceController.roleListPostQuery() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch (Exception e)
            {
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListWhenNewFormInstance
        ///</summary>
        ///<param name = "RoleList"></param>
        ///<returns>IEnumerable<RoleList> </returns>

        [HttpPost]
        [ActionName("roleListWhenNewFormInstance")]
        public HttpResponseMessage roleListWhenNewFormInstance([FromBody]IEnumerable<RoleList> roleList)
        {
            try
            {
                logger.Info("Executing MCTR.RESTService.RoleListServiceController.roleListWhenNewFormInstance() with request : " + roleList);
                if (roleList != null)
                {

                    var response = roleListBusiness.roleListWhenNewFormInstance(roleList);
                    logger.Info("Response received from MCTR.RESTService.RoleListServiceController.roleListWhenNewFormInstance() : " + response);
                    return Request.CreateResponse(HttpStatusCode.OK, response);
                }
                return null;
            }
            catch (Exception e)
            {
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }

    }
}

