///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History : 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using log4net;

using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.Business;


namespace MCTR.RESTService.Controllers
{
    public class TransTypeServiceController : ApiController
    {
        ///*************************************************************
        ///<summary>
        ///Method Name : transTypecmponCdPostTextItem
        ///</summary>
        ///<param name = "TransTypes"></param>
        ///<returns>IEnumerable<TransTypes> </returns>

        [HttpPost]
        [ActionName("transTypecmponCdPostTextItem")]
        public HttpResponseMessage transTypecmponCdPostTextItem([FromBody]IEnumerable<TransType> TransTypes)
        {
            try
            {
                ITransTypeBusiness TransTypeBusiness = new TransTypeBusiness();
                var response = TransTypeBusiness.transtypecmponcdPostTextItem(TransTypes);
                return Request.CreateResponse(HttpStatusCode.OK, response);
             }
            catch (Exception e)
            {

                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, e.Message);
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : transTypeWhenNewFormInstance
        ///</summary>
        ///<param name = "TransTypes"></param>
        ///<returns>IEnumerable<TransTypes> </returns>

        [HttpPost]
        [ActionName("transTypeWhenNewFormInstance")]
        public IEnumerable<TransType> transTypeWhenNewFormInstance(IEnumerable<TransType> TransTypes)
        {

          
            ITransTypeBusiness TransTypeBusiness = new TransTypeBusiness();
            var response = TransTypeBusiness.transtypewhennewforminstance(TransTypes);
            return response;
         
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : transtypeonload
        ///</summary>
        ///<param name = "TransTypes"></param>
        ///<returns>IEnumerable<TransTypes> </returns>

        [HttpPost]
        [ActionName("transtypeonload")]
        public IEnumerable<TransType> transtypeonload([FromBody]IEnumerable<TransType> TransTypes)
        {
            try
            {
                ITransTypeBusiness TransTypeBusiness = new TransTypeBusiness();
                return TransTypeBusiness.transtypeonload(TransTypes);
            }
            catch(Exception e)
            {
                throw e;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : PostTransEdit
        ///</summary>
        ///<param name = "TransTypes"></param>
        ///<returns>IEnumerable<TransTypes> </returns>


        [HttpPost]
        [ActionName("EditTransTypes")]
        public IEnumerable<TransTypeEdit> PostTransEdit([FromBody]IEnumerable<TransTypeEdit> TransTypes)
        {
            try
            {
                ITransTypeBusiness TransTypeBusiness = new TransTypeBusiness();
                return TransTypeBusiness.EditTransType(TransTypes);
            }
            catch (Exception e)
            {
                throw e;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : PostTransDelete
        ///</summary>
        ///<param name = "TransTypes"></param>
        ///<returns>IEnumerable<TransTypes> </returns>

        [HttpPost]
        [ActionName("DeleteTransTypes")]
        public IEnumerable<TransType> PostTransDelete([FromBody]IEnumerable<TransType> TransTypes)
        {
            try {
                ITransTypeBusiness TransTypeBusiness = new TransTypeBusiness();
                return TransTypeBusiness.DeleteTransType(TransTypes);
            }
            catch (Exception e)
            {
                throw e;
            }
        }

    }

}

