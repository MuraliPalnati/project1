///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoMapper;
using System.Data;
using log4net;
using Oracle.ManagedDataAccess.Client;

using MCTR.DomainEntity;

using MCTR.DataAccessInterface;
using MCTR.DataEntity;

namespace MCTR.DataAccess
{
    ///*********************************************************************
    ///<summary>
    ///MctrOffsetFormBlRepository is a data access implementation which holds all 
    ///the data access logic in it.
    ///</summary>
    public class MctrOffsetFormBlRepository : BaseRepository, IMctrOffsetFormBlRepository
    {

         private readonly ILog logger;

        public MctrOffsetFormBlRepository()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrOffsetMctrOffsetOnLoad
        ///</summary>
        ///<param name = "MctrOffsetFormBl"></param>
        ///<returns>IEnumerable<MctrOffsetFormBl> </returns>

        public IEnumerable<MctrOffsetFormBl> mctrOffsetMctrOffsetOnLoad(IEnumerable<MctrOffsetFormBl> mctrOffsetFormBl)
        {
            logger.Debug("Executing mctrOffsetMctrOffsetOnLoad with input : " + mctrOffsetFormBl);
            try
            {
                IEnumerable<MCTR_OFFSET> retrievedOff = new List<MCTR_OFFSET>();
                MctrOffsetFormBl obj = mctrOffsetFormBl.First();
                List<OracleParameter> paramters = new List<OracleParameter>();

                OracleParameter[] parameter1 = new OracleParameter[1];
                parameter1[0] = new OracleParameter(":mctrno", OracleDbType.Int32, obj.MCTR_NO, ParameterDirection.Input);
                var resultlist = entities.MCTR_OFFSET.SqlQuery("select * from mctr_offset where MCTR_NO= :0", parameter1).ToList<MCTR_OFFSET>();
                var targetOff = Mapper.DynamicMap<IEnumerable<MCTR_OFFSET>, IEnumerable<MctrOffsetFormBl>>(resultlist);
                return targetOff;                
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.MctrOffsetFormBlRepository.mctrOffsetMctrOffsetOnLoad():" + e.Message);
                throw;
            }


        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrOffsetFormBlWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrOffsetFormBl"></param>
        ///<returns>IEnumerable<MctrOffsetFormBl> </returns>


        public IEnumerable<MctrOffsetFormBl> mctrOffsetFormBlWhenNewFormInstance(IEnumerable<MctrOffsetFormBl> mctrOffsetFormBl)
        {
            logger.Debug("Executing mctrOffsetFormBlWhenNewFormInstance with input : " + mctrOffsetFormBl);
            try
            {
                OracleParameter[] parameters = new OracleParameter[10];
             
                //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.MctrOffsetFormBlRepository.mctrOffsetFormBlWhenNewFormInstance():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrOffsetFormBlWhenWindowClosed
        ///</summary>
        ///<param name = "MctrOffsetFormBl"></param>
        ///<returns>IEnumerable<MctrOffsetFormBl> </returns>
        public IEnumerable<MctrOffsetFormBl> mctrOffsetFormBlWhenWindowClosed(IEnumerable<MctrOffsetFormBl> mctrOffsetFormBl)
        {
            logger.Debug("Executing mctrOffsetFormBlWhenWindowClosed with input : " + mctrOffsetFormBl);
            try
            {
                OracleParameter[] parameters = new OracleParameter[10];
                logger.Debug("Executing mctrOffsetFormBlWhenWindowClosed with input : " + mctrOffsetFormBl);
                //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.MctrOffsetFormBlRepository.mctrOffsetFormBlWhenWindowClosed():" + e.Message);
                throw;
            }
        }


    }

}

