///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccessInterface;
using MCTR.DataAccess;

namespace MCTR.Business
{

    ///*********************************************************************
    ///<summary>
    ///LineItemBusiness is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>
    public class LineItemBusiness : BaseBusiness, ILineItemBusiness
    {
         private readonly ILog logger;
        ILineItemRepository repository = new LineItemRepository();

        public LineItemBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItemMctrLineItemOnLoad
        ///</summary>
        ///<param name = "lineItem"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<LineItem> mctrLineItemMctrLineItemOnLoad(IEnumerable<LineItem> lineItem)
        {
            try
            {
                logger.Info("MCTR.Business.LineItemBusiness.mctrLineItemMctrLineItemOnLoad() with request : " + lineItem);
                var resultlist = repository.mctrLineItemMctrLineItemOnLoad(lineItem);
                logger.Info("Response received from MCTR.Business.LineItemBusiness.mctrLineItemMctrLineItemOnLoad() : " + lineItem);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.LineItemBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItembutOpenMctrWhenButtonPressed
        ///</summary>
        ///<param name = "lineItem"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>
        public IEnumerable<LineItem> mctrLineItembutOpenMctrWhenButtonPressed(IEnumerable<LineItem> lineItem)
        {
            try
            {
                logger.Info("MCTR.Business.LineItemBusiness.mctrLineItembutOpenMctrWhenButtonPressed() with request : " + lineItem);
                var resultlist = repository.mctrLineItembutOpenMctrWhenButtonPressed(lineItem);
                logger.Info("Response received from MCTR.Business.LineItem.mctrLineItembutOpenMctrWhenButtonPressed() : " + lineItem);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.LineItemBusiness.LineItemBusiness.mctrLineItemMctrLineItemOnLoad" + e.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrLineItemPostQuery
        ///</summary>
        ///<param name = "lineItem"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>
        public IEnumerable<LineItemDomainAdded> mctrLineItemPostQuery(IEnumerable<LineItem> lineItem)
        {
            try
            {
                logger.Info("MCTR.Business.LineItemBusiness.mctrLineItemPostQuery() with request : " + lineItem);
                var resultlist = repository.mctrLineItemPostQuery(lineItem);
                logger.Info("Response received from MCTR.Business.LineItemBusiness.mctrLineItemPostQuery() : " + lineItem);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.LineItemBusiness.LineItemBusiness.mctrLineItemPostQuery" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBems1LOV
        ///</summary>

        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<MCTREmployeev> getRgBems1LOV()
        {
            try
            {
                logger.Info("MCTR.Business.LineItemBusiness.getRgBems1LOV() with request : ");
                var resultlist = repository.getRgBems1LOV();
                logger.Info("Response received from MCTR.Business.LineItemBusiness.getRgBems1LOV() : ");
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.LineItemBusiness.LineItem.getRgBems1LOV" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBems2LOV
        ///</summary>
       ///<returns>IEnumerable<MctrIncrRates> </returns>
        public IEnumerable<MCTREmployeev> getRgBems2LOV()
        {
            try
            {
                logger.Info("MCTR.Business.LineItemBusiness.getRgBems1LOV() with request : ");
                var resultlist = repository.getRgBems2LOV();
                logger.Info("Response received from MCTR.Business.LineItemBusiness.getRgBems1LOV() : ");
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.LineItemBusiness.LineItem.getRgBems2LOV" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : getRgBems3LOV
        ///</summary>
        ///<returns>IEnumerable<MCTREmployeev> </returns>
        public IEnumerable<MCTREmployeev> getRgBems3LOV()
        {
            try
            {
                logger.Info("MCTR.Business.LineItemBusiness.getRgBems1LOV() with request : ");
                var resultlist = repository.getRgBems3LOV();
                logger.Info("Response received from MCTR.Business.LineItemBusiness.getRgBems1LOV() : ");
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.LineItemBusiness.LineItem.getRgBems3LOV" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : lineItemOnError
        ///</summary>
        ///<returns>IEnumerable<LineItem> </returns>
        public IEnumerable<LineItem> lineItemOnError(IEnumerable<LineItem> lineItem)
        {
            try
            {
                logger.Info("MCTR.Business.LineItemBusiness.lineItemOnError() with request : " + lineItem);
                var resultlist = repository.lineItemOnError(lineItem);
                logger.Info("Response received from MCTR.Business.LineItemBusiness.lineItemOnError() : " + lineItem);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.LineItemBusiness.LineItem.lineItemOnError" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : lineItemWhenWindowClosed
        ///</summary>
        ///<returns>IEnumerable<LineItem> </returns>
        public IEnumerable<LineItem> lineItemWhenWindowClosed(IEnumerable<LineItem> lineItem)
        {
            try
            {
                logger.Info("MCTR.Business.LineItemBusiness.lineItemWhenWindowClosed() with request : " + lineItem);
                var resultlist = repository.lineItemWhenWindowClosed(lineItem);
                logger.Info("Response received from MCTR.Business.LineItemBusiness.lineItemWhenWindowClosed() : " + lineItem);
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.LineItemBusiness.lineItemWhenWindowClosed" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : get
        ///</summary>
        ///<returns>IEnumerable<MctrIncrRates> </returns>
        public IEnumerable<LineItem> Get()
        {
            try
            {
                logger.Info("MCTR.Business.LineItemBusiness.LineItem.Get()");
                var resultlist = repository.Get();
                logger.Info("Response received from MCTR.Business.LineItemBusiness.LineItem.Get()");
                return resultlist;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.LineItemBusiness.LineItem.Get" + e.Message);
                throw;
            }

        }

       
    }
}