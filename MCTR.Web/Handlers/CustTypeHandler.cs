///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®

using System.Collections.Generic;
using System.Linq;
using System.Web;

using System.Threading.Tasks;
using System.Web.Mvc;
using System.Net.Http;
using System.Net.Http.Headers;

using log4net;

using MCTR.DomainEntity;

namespace MCTR.Web.Handlers
{
  public class CustTypeHandler
  {
     private readonly ILog logger;
    
        public CustTypeHandler()
        {
          logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : custTypeWhenNewFormInstance
        ///</summary>
        ///<param name = "custType"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<CustType> custTypeWhenNewFormInstance(CustType custType)
        {
          logger.Debug("Executing custTypeWhenNewFormInstance rest service handler.");
          string restApiPath = "CustTypeService/custTypeWhenNewFormInstance";
          logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + custType);
                var response = HandlerUtil<CustType>.RestPostProcessor(restApiPath, custType);
          logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
          return response; 
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : custTypeWhenWindowClosed
        ///</summary>
        ///<param name = "custType"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<CustType> custTypeWhenWindowClosed(CustType custType)
        {

          logger.Debug("Executing custTypeWhenWindowClosed rest service handler.");
          string restApiPath = "CustType/custTypeWhenWindowClosed";
          logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + custType);
                var response = HandlerUtil<CustType>.RestPostProcessor(restApiPath, custType);
          logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
          return response; 
         }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrIncrRatesMctrIncrRatesOnLoad
        ///</summary>
        public IEnumerable<CustType> custtypeGetAll()
         {
            string restApiPath = "CustTypeService/custtypeGetAll";
            logger.Info("Invoking Rest API : " + restApiPath);
            var response = HandlerUtil<CustType>.RestGetProcessor(restApiPath, null);
            logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
            return response;
         }

        ///*************************************************************
        ///<summary>
        ///Method Name : EditCustType
        ///</summary>
        ///<param name = "custType"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<CustType> EditCustType(CustType custType)
        {
            logger.Debug("Executing EditCustType rest service handler.");
            string restApiPath = "CustTypeService/EditCustType";
            logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + custType);
            var response = HandlerUtil<CustType>.RestPostProcessor(restApiPath, custType);
            logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
            return response;
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : DeleteCustType
        ///</summary>
        ///<param name = "custType"></param>
        ///<returns>IEnumerable<MctrIncrRates> </returns>

        public IEnumerable<CustType> DeleteCustType(CustType custType)
        {
            logger.Debug("Executing DeleteCustType rest service handler.");
            string restApiPath = "CustTypeService/DeleteCustType";
            logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + custType);
            var response = HandlerUtil<CustType>.RestPostProcessor(restApiPath, custType);
            logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
            return response;
        }
    }

}

