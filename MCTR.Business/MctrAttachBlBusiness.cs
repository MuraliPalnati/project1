///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccessInterface;
using MCTR.DataAccess;

namespace MCTR.Business
{

    ///*********************************************************************
    ///<summary>
    ///mctrattachbl_business is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>
    public class MctrAttachBlBusiness : BaseBusiness, IMctrAttachBlBusiness
    {
         private readonly ILog logger;
        IMctrAttachBlRepository mctrAttachRepository;

        public MctrAttachBlBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }



        public void summaryattachclosebuttonwhenbuttonpressed()
        {
            
        }
        public void mctrattachonload()
        {
            
        }
        public void mctrattachattachdescronerror()
        {
           
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : summaryattachCloseButtonWhenButtonPressed
        ///</summary>
        ///<param name = "MctrAttachBl"></param>
        ///<returns>IEnumerable<MctrAttachBl> </returns>

        public IEnumerable<MctrAttachBl> summaryattachCloseButtonWhenButtonPressed(IEnumerable<MctrAttachBl> mctrAttachBl)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.MctrAttachBlBusiness.summaryattachCloseButtonWhenButtonPressed with request :" + mctrAttachBl);
                mctrAttachRepository = new MctrAttachBlRepository();
                var response = mctrAttachRepository.mctrAttachMctrAttachOnLoad(mctrAttachBl);
                logger.Debug("Recieved Response from MCTR.Business.MctrAttachBlBusiness.summaryattachCloseButtonWhenButtonPressed :" + response);
                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception Occured at MCTR.Business.MctrAttachBlBusiness.summaryattachCloseButtonWhenButtonPressed :" + ex.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrAttachMctrAttachOnLoad
        ///</summary>
        ///<param name = "MctrAttachBl"></param>
        ///<returns>IEnumerable<MctrAttachBl> </returns>

        public IEnumerable<MctrAttachBl> mctrAttachMctrAttachOnLoad(IEnumerable<MctrAttachBl> mctrAttachBl)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.MctrAttachBlBusiness.mctrAttachMctrAttachOnLoad with request :"+mctrAttachBl);
                mctrAttachRepository = new MctrAttachBlRepository();
                var response = mctrAttachRepository.mctrAttachMctrAttachOnLoad(mctrAttachBl);
                logger.Debug("Recieved Response from MCTR.Business.MctrAttachBlBusiness.mctrAttachMctrAttachOnLoad :" + response);
                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception Occured at MCTR.Business.MctrAttachBlBusiness.mctrAttachMctrAttachOnLoad :" +ex.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrAttachBlInsert
        ///</summary>
        ///<param name = "MctrAttachBl"></param>
        ///<returns>IEnumerable<MctrAttachBl> </returns>

        public IEnumerable<MctrAttachBl> mctrAttachBlInsert(IEnumerable<MctrAttachBl> mctrAttachBl)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.MctrAttachBlBusiness.mctrAttachBlInsert with request :" + mctrAttachBl);
                mctrAttachRepository = new MctrAttachBlRepository();
                var response = mctrAttachRepository.mctrAttachBlInsert(mctrAttachBl);
                logger.Debug("Recieved Response from MCTR.Business.MctrAttachBlBusiness.mctrAttachBlInsert :" + response);
                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception Occured at MCTR.Business.MctrAttachBlBusiness.mctrAttachBlInsert :" + ex.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrAttachattachDescrOnError
        ///</summary>
        ///<param name = "MctrAttachBl"></param>
        ///<returns>IEnumerable<MctrAttachBl> </returns>

        public IEnumerable<MctrAttachBl> mctrAttachattachDescrOnError(IEnumerable<MctrAttachBl> mctrAttachBl)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.MctrAttachBlBusiness.mctrAttachattachDescrOnError with request :" + mctrAttachBl);
                mctrAttachRepository = new MctrAttachBlRepository();
                var response = mctrAttachRepository.mctrAttachMctrAttachOnLoad(mctrAttachBl);
                logger.Debug("Recieved Response from MCTR.Business.MctrAttachBlBusiness.mctrAttachattachDescrOnError :" + response);
                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception Occured at MCTR.Business.MctrAttachBlBusiness.mctrAttachattachDescrOnError :" + ex.Message);
                throw;
            }
        }

        public IEnumerable<MctrAttachBl> mctrAttachattachInsertFileWhenButtonPressed(IEnumerable<MctrAttachBl> mctrAttachBl)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<MctrAttachBl> mctrAttachattachViewFileWhenButtonPressed(IEnumerable<MctrAttachBl> mctrAttachBl)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.MctrAttachBlBusiness.mctrAttachattachDescrOnError with request :" + mctrAttachBl);
                mctrAttachRepository = new MctrAttachBlRepository();
                var response = mctrAttachRepository.mctrAttachattachViewFileWhenButtonPressed(mctrAttachBl);
                logger.Debug("Recieved Response from MCTR.Business.MctrAttachBlBusiness.mctrAttachattachDescrOnError :" + response);
                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception Occured at MCTR.Business.MctrAttachBlBusiness.mctrAttachattachDescrOnError :" + ex.Message);
                throw;
            }
        }

        public IEnumerable<MctrAttachBl> mctrAttachPreInsert(IEnumerable<MctrAttachBl> mctrAttachBl)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<MctrAttachBl> webutildummyWhenButtonPressed(IEnumerable<MctrAttachBl> mctrAttachBl)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<MctrAttachBl> mctrAttachBlWhenNewFormInstance(IEnumerable<MctrAttachBl> mctrAttachBl)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.MctrAttachBlBusiness.mctrAttachBlWhenNewFormInstance with request :" + mctrAttachBl);
                mctrAttachRepository = new MctrAttachBlRepository();
                var response = mctrAttachRepository.mctrAttachBlWhenNewFormInstance(mctrAttachBl);
                logger.Debug("Recieved Response from MCTR.Business.MctrAttachBlBusiness.mctrAttachBlWhenNewFormInstance :" + response);
                return response;
            }
            catch (Exception ex)
            {
                logger.Error("Exception Occured at MCTR.Business.MctrAttachBlBusiness.mctrAttachBlWhenNewFormInstance :" + ex.Message);
                throw;
            }
        }
    }
}