///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®

using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;

namespace MCTR.Web.Handlers
{
    public class RoleBuHandler
  {
     private readonly ILog logger;
    public RoleBuHandler()
    {
      logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
    }
       
    public IEnumerable<RoleBu> rolebuonload(RoleBu roleBu){

      logger.Debug("Executing roleBuRoleBuOnLoad rest service handler.");
      string restApiPath = "RoleBuService/rolebuonload";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleBu);
      var response = HandlerUtil<RoleBu>.RestPostProcessor(restApiPath,roleBu);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<MctrBusUnit> roleBuopenLOV()
    {
      logger.Debug("Executing roleBuopenLOV() rest service handler.");
      string restApiPath = "RoleBuService/roleBuopenLOV";
      logger.Info("Invoking Rest API : " + restApiPath + "" );
      var response = HandlerUtil<MctrBusUnit>.RestGetProcessor(restApiPath);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<RoleBu> roleBuPostQuery(RoleBu roleBu){

      logger.Debug("Executing roleBuPostQuery rest service handler.");
      string restApiPath = "RoleBuService/roleBuPostQuery";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleBu);
            var response = HandlerUtil<RoleBu>.RestPostProcessor(restApiPath, roleBu);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<RoleBu> roleBuPreRecord(RoleBu roleBu){

      logger.Debug("Executing roleBuPreRecord rest service handler.");
      string restApiPath = "RoleBuService/roleBuPreRecord";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleBu);
            var response = HandlerUtil<RoleBu>.RestPostProcessor(restApiPath, roleBu);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<RoleBu> roleBuPostDelete(RoleBu roleBu){

      logger.Debug("Executing roleBuPostDelete rest service handler.");
      string restApiPath = "RoleBuService/roleBuPostDelete";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleBu);
            var response = HandlerUtil<RoleBu>.RestPostProcessor(restApiPath, roleBu);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<RoleBu> roleBuPostInsert(RoleBu roleBu){

      logger.Debug("Executing roleBuPostInsert rest service handler.");
      string restApiPath = "RoleBuService/roleBuPostInsert";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleBu);
            var response = HandlerUtil<RoleBu>.RestPostProcessor(restApiPath, roleBu);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<RoleBu> roleBuPostUpdate(IEnumerable<RoleBu> roleBu){

      logger.Debug("Executing roleBuPostUpdate rest service handler.");
      string restApiPath = "RoleBuService/roleBuPostUpdate";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleBu);
            var response = HandlerUtil<RoleBu>.PostProcessor(restApiPath, roleBu);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<RoleBu> roleBuWhenNewFormInstance(RoleBu roleBu){

      logger.Debug("Executing roleBuWhenNewFormInstance rest service handler.");
      string restApiPath = "RoleBuService/roleBuWhenNewFormInstance";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleBu);
            var response = HandlerUtil<RoleBu>.RestPostProcessor(restApiPath, roleBu);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    public IEnumerable<RoleBu> roleBuWhenWindowClosed(RoleBu roleBu){

      logger.Debug("Executing roleBuWhenWindowClosed rest service handler.");
      string restApiPath = "RoleBuService/roleBuWhenWindowClosed";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + roleBu);
            var response = HandlerUtil<RoleBu>.RestPostProcessor(restApiPath, roleBu);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
  }

}

