///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using MCTR.DomainEntities;
using MCTR.BusinessInterface;
using MCTR.DataAccess;
using System.Collections.Generic;
using MCTR.DataAccessInterface;
using log4net;
namespace MCTR.Business
{
    public class MctrMessageStatusBusiness : BaseBusiness, IMctrMessageStatusBusiness
    {
        MctrMessageStatus respObject = new MctrMessageStatus();
        IMCTRMessageRepositry mObj = new MCTRMessageRepositry();
         private readonly ILog logger= LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        public MctrMessageStatusBusiness()
        {
        }

        public void initialize()
        {
            //TODO: initialize input from controller
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrMessageStatusOnInsert
        ///</summary>
        ///<param name = "mctrMessageStatus"></param>
        ///<returns>IEnumerable<mctrMessageStatus> </returns>
        public IEnumerable<MctrMessageStatus> mctrMessageStatusOnInsert(IEnumerable<MctrMessageStatus> mctrMessageStatus)
        {
            try
            {
                logger.Info("Executing MCTR.Bussiness.LbrRateBusiness.selectionfYearOnError() with request" + mctrMessageStatus);
                IMCTRMessageRepositry lbrRateRepository = new MCTRMessageRepositry();
                var response = lbrRateRepository.mctrMessageStatusOnInsert(mctrMessageStatus);
                logger.Info("Response received from  MCTR.Bussiness.LbrRateBusiness.selectionfYearOnError()" + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Bussiness.LbrRateBusiness.selectionfYearOnError():" + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : GetMessage
        ///</summary>
        public IEnumerable<MctrMessageStatus> GetMessage()
        {
            //respObject.IsEnabled = true;
            List<MctrMessageStatus> msgGetData = new List<MctrMessageStatus>();
            return mObj.getMessageStatus();
        }
    }
}