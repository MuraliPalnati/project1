
///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  


using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System;
using System.Linq;
using System.Web.Mvc;
using log4net;
using MCTR.Web.Util;
using System.Data;
using MCTR.Web.Security;
using System.Collections.Generic;
using AutoMapper;
using System.Text;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///MctrCompRatesController is a web controller implementation for the 
    ///MctrCompRates screen.
    ///</summary>
    ///
    [CustomAuthorize]
    public class MctrCompRatesController : Controller
    {
        private readonly ILog logger = null;
        private readonly Download obj = new Download();
        public MctrCompRatesController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesOnLoadJSon
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpGet]
        public ActionResult mctrCompRatesOnLoadJSon(MctrCompRates mctrCompRates)
        {
            try
            {
                mctrCompRates.session_bems = SessionPerister.BEMSID;
                logger.Info("Executing mctrCompRatesMctrCompRatesOnLoad() : " + mctrCompRates);
                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                logger.Debug("Executing mctrCompRatesHandler.mctrcompratesonload.");

                mctrCompRates.session_bems = SessionPerister.BEMSID;
                var mctrCompRatesResp = mctrCompRatesHandler.mctrcompratesonload(mctrCompRates);
                logger.Info("Response Received : " + mctrCompRatesResp);
                if (mctrCompRatesResp.Any())
                {
                    var jsonData = new
                    {
                        total = 1,
                        page = 1,
                        records = mctrCompRatesResp.Count(),
                        rows = mctrCompRatesResp,
                        userdata = mctrCompRatesResp
                    };
                    return Json(jsonData, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return Json(null, JsonRequestBehavior.AllowGet);
                }
            }
            catch(Exception e)
            {
                logger.Error(" Error from MCTRCompRates.mctrCompRatesOnLoadJSon(): " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesMctrCompRatesOnLoad
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        public ActionResult MctrCompRatesView()
        {
            return View("MctrCompRatesView");
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatescmponCdPostTextItem
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public JsonResult mctrCompRatescmponCdPostTextItem(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing mctrCompRatescmponCdPostTextItem() : " + mctrCompRates);
                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();

                mctrCompRates.session_bems = SessionPerister.BEMSID;
                logger.Debug("Executing mctrCompRatesHandler.mctrCompRatescmponCdPostTextItem().");
                var mctrCompRatesResp = mctrCompRatesHandler.mctrCompRatescmponCdPostTextItem(mctrCompRates);
                logger.Info("Response Received : " + mctrCompRatesResp);
                return Json(mctrCompRatesResp, JsonRequestBehavior.AllowGet);
            }
            catch(Exception e)
            {
                logger.Error(" Error from MCTRCompRates.mctrCompRatescmponCdPostTextItem(): " + e.Message);
                throw;
            }
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesrscOutputPostChange
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public JsonResult mctrCompRatesrscOutputPostChange(MctrCompRates mctrCompRates)
        {
            try {
                logger.Info("Executing mctrCompRatesrscOutputPostChange() : " + mctrCompRates);

                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                logger.Debug("Executing mctrCompRatesHandler.mctrCompRatesrscOutputPostChange().");
                var mctrCompRatesResp = mctrCompRatesHandler.mctrCompRatesrscOutputPostChange(mctrCompRates);
                logger.Info("Response Received : " + mctrCompRatesResp);
                return Json(mctrCompRatesResp, JsonRequestBehavior.AllowGet);
            }
            catch(Exception e)
            {
                logger.Error(" Error from MCTRCompRates.mctrCompRatesrscOutputPostChange(): " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatespoolOutputPostChange
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public ActionResult mctrCompRatespoolOutputPostChange(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing mctrCompRatespoolOutputPostChange() : " + mctrCompRates);
                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                logger.Debug("Executing mctrCompRatesHandler.mctrCompRatespoolOutputPostChange().");
                var mctrCompRatesResp = mctrCompRatesHandler.mctrCompRatespoolOutputPostChange(mctrCompRates);
                logger.Info("Response Received : " + mctrCompRatesResp);
                return Json(mctrCompRatesResp, JsonRequestBehavior.AllowGet);
            }
            catch(Exception e)
            {
                logger.Error(" Error from MCTRCompRates.mctrCompRatespoolOutputPostChange(): " + e.Message);
                throw;
            }
        }

        public ActionResult getRgRateILOV(string rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView();
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : getRgRateIJSON()
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public JsonResult getRgRateIJSON(MctrCompRates mctrCompRates)
        {

            try
            {
                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                var mctrCompRatesResp = mctrCompRatesHandler.getRgRateILOV(mctrCompRates);
                logger.Info("Response Received : " + mctrCompRates);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCompRatesResp.Count(),
                    rows = mctrCompRatesResp,
                    userdata = mctrCompRatesResp
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error(" Error from MCTR.Web.Controllers.MCtrCompRatesController.getRgRateILOV(): " + e.Message);
                throw;
            }
        }


        [HttpGet]
        public ActionResult getRgRateCLOV()
        {

            return PartialView("viewname");
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : getRgRateCLOV()
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public JsonResult getRgRateCLOV(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing getRgRateCLOV() : " + mctrCompRates);

                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                logger.Debug("Executing mctrCompRatesHandler.getRgRateCLOV().");
                var mctrCompRatesResp = mctrCompRatesHandler.getRgRateCLOV(mctrCompRates);
                logger.Info("Response Received : " + mctrCompRatesResp);

                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrCompRatesResp.Count(),
                    rows = mctrCompRatesResp
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.getRgRateCLOV() " + e.Message);
                throw;
            }
          }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesbutRate1WhenButtonPressedOpenLOV()
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public ActionResult mctrCompRatesbutRate1WhenButtonPressedOpenLOV(MctrCompRates mctrCompRates)
        {
            try {
                logger.Info("Executing mctrCompRatesbutRate1WhenButtonPressedOpenLOV():" + mctrCompRates);
                if (mctrCompRates != null)
                {
                    MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                    logger.Debug("Executing mctrCompRatesHandler.mctrCompRatesbutRate1WhenButtonPressedOpenLOV().");
                    var mctrCompRatesResp = mctrCompRatesHandler.genericLovCall(mctrCompRates);
                    var result = mctrCompRatesResp.First<MctrCompRates>();

                    if (result.v_count_circular > 0)
                    {
                        mctrCompRates.RATE_1_RSC_POOL = null;
                        mctrCompRates.RATE_1 = 0;
                    }

                    mctrCompRates.RATE_OUTPUT = mctrCompRates.RATE_I * (mctrCompRates.BASE_AMT + mctrCompRates.RATE_1 + mctrCompRates.RATE_2 + mctrCompRates.RATE_3 + mctrCompRates.RATE_4 + mctrCompRates.RATE_5 + mctrCompRates.RATE_6 + mctrCompRates.RATE_7 + mctrCompRates.RATE_8 + mctrCompRates.RATE_9);

                    logger.Info("Response Received : " + mctrCompRatesResp);
                    return View("MctrCompRates", mctrCompRates);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.mctrCompRatesbutRate1WhenButtonPressedOpenLOV() " + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesbutRate2WhenButtonPressedOpenLOV()
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public ActionResult mctrCompRatesbutRate2WhenButtonPressedOpenLOV(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing mctrCompRatesbutRate2WhenButtonPressedOpenLOV : " + mctrCompRates);
                if (mctrCompRates != null)
                {
                    MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                    logger.Debug("Executing mctrCompRatesHandler.mctrCompRatesbutRate2WhenButtonPressedOpenLOV.");
                    var mctrCompRatesResp = mctrCompRatesHandler.genericLovCall(mctrCompRates);
                    var result = mctrCompRatesResp.First<MctrCompRates>();

                    if (result.v_count_circular > 0)
                    {
                        mctrCompRates.RATE_2_RSC_POOL = null;
                        mctrCompRates.RATE_2 = 0;
                        //message("circular references are not allowed")
                    }

                    mctrCompRates.RATE_OUTPUT = mctrCompRates.RATE_I * (mctrCompRates.BASE_AMT + mctrCompRates.RATE_1 + mctrCompRates.RATE_2 + mctrCompRates.RATE_3 + mctrCompRates.RATE_4 + mctrCompRates.RATE_5 + mctrCompRates.RATE_6 + mctrCompRates.RATE_7 + mctrCompRates.RATE_8 + mctrCompRates.RATE_9);

                    logger.Info("Response Received : " + mctrCompRatesResp);
                    return View("MctrCompRates", mctrCompRates);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.mctrCompRatesbutRate2WhenButtonPressedOpenLOV() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesbutRate3WhenButtonPressedOpenLOV()
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public ActionResult mctrCompRatesbutRate3WhenButtonPressedOpenLOV(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing mctrCompRatesbutRate3WhenButtonPressedOpenLOV : " + mctrCompRates);
                if (mctrCompRates != null)
                {
                    MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                    logger.Debug("Executing mctrCompRatesHandler.mctrCompRatesbutRate3WhenButtonPressedOpenLOV.");
                    var mctrCompRatesResp = mctrCompRatesHandler.genericLovCall(mctrCompRates);
                    var result = mctrCompRatesResp.First<MctrCompRates>();

                    if (result.v_count_circular > 0)
                    {
                        mctrCompRates.RATE_3_RSC_POOL = null;
                        mctrCompRates.RATE_3 = 0;
                        //message("circular references are not allowed")
                    }

                    mctrCompRates.RATE_OUTPUT = mctrCompRates.RATE_I * (mctrCompRates.BASE_AMT + mctrCompRates.RATE_1 + mctrCompRates.RATE_2 + mctrCompRates.RATE_3 + mctrCompRates.RATE_4 + mctrCompRates.RATE_5 + mctrCompRates.RATE_6 + mctrCompRates.RATE_7 + mctrCompRates.RATE_8 + mctrCompRates.RATE_9);

                    logger.Info("Response Received : " + mctrCompRatesResp);
                    return View("MctrCompRates", mctrCompRates);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.mctrCompRatesbutRate3WhenButtonPressedOpenLOV() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesbutRate4WhenButtonPressedOpenLOV()
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public ActionResult mctrCompRatesbutRate4WhenButtonPressedOpenLOV(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing mctrCompRatesbutRate4WhenButtonPressedOpenLOV : " + mctrCompRates);
                if (mctrCompRates != null)
                {
                    MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                    logger.Debug("Executing mctrCompRatesHandler.mctrCompRatesbutRate4WhenButtonPressedOpenLOV.");
                    var mctrCompRatesResp = mctrCompRatesHandler.genericLovCall(mctrCompRates);
                    var result = mctrCompRatesResp.First<MctrCompRates>();

                    if (result.v_count_circular > 0)
                    {
                        mctrCompRates.RATE_4_RSC_POOL = null;
                        mctrCompRates.RATE_4 = 0;
                        //message("circular references are not allowed")
                    }

                    mctrCompRates.RATE_OUTPUT = mctrCompRates.RATE_I * (mctrCompRates.BASE_AMT + mctrCompRates.RATE_1 + mctrCompRates.RATE_2 + mctrCompRates.RATE_3 + mctrCompRates.RATE_4 + mctrCompRates.RATE_5 + mctrCompRates.RATE_6 + mctrCompRates.RATE_7 + mctrCompRates.RATE_8 + mctrCompRates.RATE_9);

                    logger.Info("Response Received : " + mctrCompRatesResp);
                    return View("MctrCompRates", mctrCompRates);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.mctrCompRatesbutRate4WhenButtonPressedOpenLOV() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesbutRate5WhenButtonPressedOpenLOV()
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public ActionResult mctrCompRatesbutRate5WhenButtonPressedOpenLOV(MctrCompRates mctrCompRates)
        {
            try {
                logger.Info("Executing mctrCompRatesbutRate5WhenButtonPressedOpenLOV : " + mctrCompRates);
                if (mctrCompRates != null)
                {
                    MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                    logger.Debug("Executing mctrCompRatesHandler.mctrCompRatesbutRate5WhenButtonPressedOpenLOV.");
                    var mctrCompRatesResp = mctrCompRatesHandler.genericLovCall(mctrCompRates);
                    var result = mctrCompRatesResp.First<MctrCompRates>();

                    if (result.v_count_circular > 0)
                    {
                        mctrCompRates.RATE_5_RSC_POOL = null;
                        mctrCompRates.RATE_5 = 0;
                        //message("circular references are not allowed")
                    }

                    mctrCompRates.RATE_OUTPUT = mctrCompRates.RATE_I * (mctrCompRates.BASE_AMT + mctrCompRates.RATE_1 + mctrCompRates.RATE_2 + mctrCompRates.RATE_3 + mctrCompRates.RATE_4 + mctrCompRates.RATE_5 + mctrCompRates.RATE_6 + mctrCompRates.RATE_7 + mctrCompRates.RATE_8 + mctrCompRates.RATE_9);

                    logger.Info("Response Received : " + mctrCompRatesResp);
                    return View("MctrCompRates", mctrCompRates);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.mctrCompRatesbutRate5WhenButtonPressedOpenLOV() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesbutRate6WhenButtonPressedOpenLOV()
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public ActionResult mctrCompRatesbutRate6WhenButtonPressedOpenLOV(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing mctrCompRatesbutRate6WhenButtonPressedOpenLOV : " + mctrCompRates);
                if (mctrCompRates != null)
                {
                    MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                    logger.Debug("Executing mctrCompRatesHandler.mctrCompRatesbutRate6WhenButtonPressedOpenLOV.");
                    var mctrCompRatesResp = mctrCompRatesHandler.genericLovCall(mctrCompRates);
                    var result = mctrCompRatesResp.First<MctrCompRates>();

                    if (result.v_count_circular > 0)
                    {
                        mctrCompRates.RATE_6_RSC_POOL = null;
                        mctrCompRates.RATE_6 = 0;
                        //message("circular references are not allowed")
                    }

                    mctrCompRates.RATE_OUTPUT = mctrCompRates.RATE_I * (mctrCompRates.BASE_AMT + mctrCompRates.RATE_1 + mctrCompRates.RATE_2 + mctrCompRates.RATE_3 + mctrCompRates.RATE_4 + mctrCompRates.RATE_5 + mctrCompRates.RATE_6 + mctrCompRates.RATE_7 + mctrCompRates.RATE_8 + mctrCompRates.RATE_9);

                    logger.Info("Response Received : " + mctrCompRatesResp);
                    return View("MctrCompRates", mctrCompRates);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.mctrCompRatesbutRate6WhenButtonPressedOpenLOV() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesbutRate7WhenButtonPressedOpenLOV()
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public ActionResult mctrCompRatesbutRate7WhenButtonPressedOpenLOV(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing mctrCompRatesbutRate7WhenButtonPressedOpenLOV : " + mctrCompRates);
                if (mctrCompRates != null)
                {
                    MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                    logger.Debug("Executing mctrCompRatesHandler.mctrCompRatesbutRate7WhenButtonPressedOpenLOV.");
                    var mctrCompRatesResp = mctrCompRatesHandler.genericLovCall(mctrCompRates);
                    var result = mctrCompRatesResp.First<MctrCompRates>();

                    if (result.v_count_circular > 0)
                    {
                        mctrCompRates.RATE_7_RSC_POOL = null;
                        mctrCompRates.RATE_7 = 0;
                        //message("circular references are not allowed")
                    }

                    mctrCompRates.RATE_OUTPUT = mctrCompRates.RATE_I * (mctrCompRates.BASE_AMT + mctrCompRates.RATE_1 + mctrCompRates.RATE_2 + mctrCompRates.RATE_3 + mctrCompRates.RATE_4 + mctrCompRates.RATE_5 + mctrCompRates.RATE_6 + mctrCompRates.RATE_7 + mctrCompRates.RATE_8 + mctrCompRates.RATE_9);

                    logger.Info("Response Received : " + mctrCompRatesResp);
                    return View("MctrCompRates", mctrCompRates);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.mctrCompRatesbutRate7WhenButtonPressedOpenLOV() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesbutRate8WhenButtonPressedOpenLOV()
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public ActionResult mctrCompRatesbutRate8WhenButtonPressedOpenLOV(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing mctrCompRatesbutRate8WhenButtonPressedOpenLOV : " + mctrCompRates);
                if (mctrCompRates != null)
                {
                    MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                    logger.Debug("Executing mctrCompRatesHandler.mctrCompRatesbutRate8WhenButtonPressedOpenLOV.");
                    var mctrCompRatesResp = mctrCompRatesHandler.genericLovCall(mctrCompRates);
                    var result = mctrCompRatesResp.First<MctrCompRates>();

                    if (result.v_count_circular > 0)
                    {
                        mctrCompRates.RATE_8_RSC_POOL = null;
                        mctrCompRates.RATE_8 = 0;
                        //message("circular references are not allowed")
                    }

                    mctrCompRates.RATE_OUTPUT = mctrCompRates.RATE_I * (mctrCompRates.BASE_AMT + mctrCompRates.RATE_1 + mctrCompRates.RATE_2 + mctrCompRates.RATE_3 + mctrCompRates.RATE_4 + mctrCompRates.RATE_5 + mctrCompRates.RATE_6 + mctrCompRates.RATE_7 + mctrCompRates.RATE_8 + mctrCompRates.RATE_9);

                    logger.Info("Response Received : " + mctrCompRatesResp);
                    return View("MctrCompRates", mctrCompRates);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.mctrCompRatesbutRate8WhenButtonPressedOpenLOV() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesbutRate9WhenButtonPressedOpenLOV()
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public ActionResult mctrCompRatesbutRate9WhenButtonPressedOpenLOV(MctrCompRates mctrCompRates)
        {
            try {
                logger.Info("Executing mctrCompRatesbutRate9WhenButtonPressedOpenLOV : " + mctrCompRates);
                if (mctrCompRates != null)
                {
                    MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                    logger.Debug("Executing mctrCompRatesHandler.mctrCompRatesbutRate9WhenButtonPressedOpenLOV.");
                    var mctrCompRatesResp = mctrCompRatesHandler.genericLovCall(mctrCompRates);
                    var result = mctrCompRatesResp.First<MctrCompRates>();

                    if (result.v_count_circular > 0)
                    {
                        mctrCompRates.RATE_9_RSC_POOL = null;
                        mctrCompRates.RATE_9 = 0;
                        //message("circular references are not allowed")
                    }

                    mctrCompRates.RATE_OUTPUT = mctrCompRates.RATE_I * (mctrCompRates.BASE_AMT + mctrCompRates.RATE_1 + mctrCompRates.RATE_2 + mctrCompRates.RATE_3 + mctrCompRates.RATE_4 + mctrCompRates.RATE_5 + mctrCompRates.RATE_6 + mctrCompRates.RATE_7 + mctrCompRates.RATE_8 + mctrCompRates.RATE_9);

                    logger.Info("Response Received : " + mctrCompRatesResp);
                    return View("MctrCompRates", mctrCompRates);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.mctrCompRatesbutRate9WhenButtonPressedOpenLOV() " + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatescascadeFlgWhenMouseClick
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public ActionResult mctrCompRatescascadeFlgWhenMouseClick(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing mctrCompRatescascadeFlgWhenMouseClick() : " + mctrCompRates);
                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                logger.Debug("Executing mctrCompRatesHandler.mctrCompRatescascadeFlgWhenMouseClick().");

                if (mctrCompRates.CASCADE_FLG == "cascade")
                {
                    mctrCompRatesHandler.mctrCompRatescascadeFlgWhenMouseClick(mctrCompRates);
                    mctrCompRates.CASCADE_FLG = "finished";
                    return null;
                }
                else
                {
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.mctrCompRatescascadeFlgWhenMouseClick() " + e.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesKeyDelrec
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>

        [HttpPost]
        public ActionResult mctrCompRatesKeyDelrec(MctrCompRates mctrCompRates)
        {
            logger.Info("Executing mctrCompRatesKeyDelrec() : " + mctrCompRates);
            if (mctrCompRates != null)
            {
                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                logger.Debug("Executing mctrCompRatesHandler.mctrCompRatesKeyDelrec().");
                var mctrCompRatesResp = mctrCompRatesHandler.mctrCompRatesKeyDelrec(mctrCompRates);
                logger.Info("Response Received : " + mctrCompRatesResp);
                return View("MctrCompRates", mctrCompRatesResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : selectBlockbutRatesListWhenButtonPressed
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>
        public FileResult selectBlockbutRatesListWhenButtonPressed(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing selectBlockbutRatesListWhenButtonPressed() : " + mctrCompRates);
                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                logger.Debug("Executing mctrCompRatesHandler.selectBlockbutRatesListWhenButtonPressed().");
                var mctrCompRatesResp = mctrCompRatesHandler.crtetbl(mctrCompRates).ToList<MctrCompRates>();
                var c = (mctrCompRates.fyear == null) ? "ALL" : mctrCompRates.fyear.ToString();
                var responseexcel = Mapper.DynamicMap<IEnumerable<MctrCompRates>, IEnumerable<MctrCompRatesExcel>>(mctrCompRatesResp).ToList<MctrCompRatesExcel>();


                DataTable[] dt = new DataTable[5];

                DataTable d1 = new DataTable();
                string msg = @"MCTR PRIOR YEAR COMPOSITE RATES LISTING(AS OF " + DateTime.Now.ToString("MM/dd/yy/ hh:mm:ss tt") + ")";
                d1.Columns.Add(msg);
                dt[0] = d1;

                DataTable d2 = new DataTable();
                string msg1 = @"YEAR:" + c;
                d2.Columns.Add(msg1);
                d2.Rows.Add();
                dt[1] = d2;
                dt[2] = obj.ToDataTable<MctrCompRatesExcel>(responseexcel);
                DataTable d3 = new DataTable();
                string msg5 = "\"" + @"MCTR RATE TABLE selection was based on the criteria listed below." + "\"";
                d3.Columns.Add(msg5);
                dt[3] = d3;
                DataTable d4 = new DataTable();
                string msg4 = "\""+@"select cmpon_cd, fiscal_year, rsc_input, bum_input, rsc_output, pool_output, comp_seq, rate_i_rsc_pool, sum(rate_i) from mctr_comp_rates where fiscal_year = '" + c + "'group by cmpon_cd, fiscal_year, rsc_input, bum_input, rsc_output, pool_output, comp_seq, rate_i_rsc_pool order by cmpon_cd asc, fiscal_year asc;"+ "\"" ;
                d4.Columns.Add(msg4);
                dt[4] = d4;
                string filename = "xtrt-MCTR-PYR-COMP-RATES_" + DateTime.Now.ToString("yyyyMMddTHHmmss");
                var result = obj.ToCsv(dt, true);
                d1.Dispose();
                d2.Dispose();
                d3.Dispose();
                d4.Dispose();
                byte[] fileBytes = Encoding.ASCII.GetBytes(result);
                var cd = new System.Net.Mime.ContentDisposition
                {
                    FileName = filename + ".csv",
                    Inline = false,
                };
                Response.ContentType = "application/vnd.ms-excel";
                Response.AppendHeader("Content-Disposition", cd.ToString());
                return File(fileBytes, filename);
            }
            catch(Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.selectBlockbutRatesListWhenButtonPressed() " + e.Message);
                throw;
            }   
         }

        ///*************************************************************
        ///<summary>
        ///Method Name : selectBlockbutCopyWhenButtonPressed
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>
        [HttpPost]
        public JsonResult selectBlockbutCopyWhenButtonPressed(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing selectBlockbutCopyWhenButtonPressed() : " + mctrCompRates);
                if (mctrCompRates.copy_from_bu == mctrCompRates.copy_to_bu && mctrCompRates.copy_from_yr == mctrCompRates.copy_to_yr && mctrCompRates.copy_from_pl_rsc == mctrCompRates.copy_to_pl_rsc)
                {
                    mctrCompRates.v_same = "y";
                }

                else
                {
                    mctrCompRates.v_same = "n";
                }

                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                logger.Debug("Executing mctrCompRatesHandler.selectBlockbutCopyWhenButtonPressed().");
                var mctrCompRatesResp = mctrCompRatesHandler.selectBlockbutCopyWhenButtonPressed(mctrCompRates);
                logger.Info("Response Received : " + mctrCompRatesResp);
                var resp = mctrCompRatesResp.First<MctrCompRates>();
                return Json(resp, JsonRequestBehavior.AllowGet);


            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.selectBlockbutCopyWhenButtonPressed() " + e.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrCompRatesWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>
        [HttpGet]
        public JsonResult mctrCompRatesWhenNewFormInstance(MctrCompRates mctrCompRates)
        {
            try
            {
                logger.Info("Executing mctrCompRatesWhenNewFormInstance() : " + mctrCompRates);
                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                logger.Debug("Executing mctrCompRatesHandler.mctrCompRatesWhenNewFormInstance().");
                var mctrCompRatesResp = mctrCompRatesHandler.mctrCompRatesWhenNewFormInstance(mctrCompRates);
                logger.Info("Response Received : " + mctrCompRatesResp);
                return Json(mctrCompRatesResp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.mctrCompRatesWhenNewFormInstance() " + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : compositeInsert
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>
        [HttpPost]
        public JsonResult compositeInsert(MctrCompRates mctrCompRates)
        {
            try
            {
                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                var mctrCreateFormResp = mctrCompRatesHandler.compositeInsert(mctrCompRates);
                return Json(mctrCreateFormResp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.compositeInsert() " + e.Message);
                throw;
            }
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : compositeDelete
        ///</summary>
        ///<param name = "mctrCompRates"></param>
        ///<returns>IEnumerable<MctrCompRates> </returns>
        public JsonResult compositeDelete(MctrCompRates mctrCompRates)
        {
            try
            {
                MctrCompRatesHandler mctrCompRatesHandler = new MctrCompRatesHandler();
                var mctrCreateFormResp = mctrCompRatesHandler.compositeDelete(mctrCompRates);
                return Json(mctrCreateFormResp, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Web.Controllers.MctrCompRates.compositeDelete() " + e.Message);
                throw;
            }
        }
    }
}

