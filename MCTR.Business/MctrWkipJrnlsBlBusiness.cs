///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccessInterface;
using MCTR.DataAccess;

namespace MCTR.Business
{

    ///*********************************************************************
    ///<summary>
    ///mctrwkipjrnlsbl_business is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>
    public class MctrWkipJrnlsBlBusiness : BaseBusiness, IMctrWkipJrnlsBlBusiness
    {
         private readonly ILog logger;

        public MctrWkipJrnlsBlBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : jrnlWeekJrnlWeekOnLoad
        ///</summary>
        ///<param name = "mctrWkipJrnlsBl"></param>
        ///<returns>IEnumerable<Status></returns>

        public IEnumerable<MctrWkipJrnlsBl> jrnlWeekJrnlWeekOnLoad(IEnumerable<MctrWkipJrnlsBl> mctrWkipJrnlsBl)
        {
            try
            {
                logger.Info("Executing Business : jrnlWeekJrnlWeekOnLoad()");
                IMctrWkipJrnlsBlRepository MctrWkipJrnlsBlRepository = new MctrWkipJrnlsBlRepository();
                var response = MctrWkipJrnlsBlRepository.jrnlWeekJrnlWeekOnLoad(mctrWkipJrnlsBl);
                logger.Info("Response received from MctrWkipJrnlsBlRepository.jrnlWeekJrnlWeekOnLoad() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrWkipJrnlsBlWhenNewFormInstance
        ///</summary>
        ///<param name = "mctrWkipJrnlsBl"></param>
        ///<returns>IEnumerable<Status></returns>
        public IEnumerable<MctrWkipJrnlsBl> mctrWkipJrnlsBlWhenNewFormInstance(IEnumerable<MctrWkipJrnlsBl> mctrWkipJrnlsBl)
        {
            try
            {
                logger.Info("Executing Business : mctrWkipJrnlsBlWhenNewFormInstance()");
                IMctrWkipJrnlsBlRepository MctrWkipJrnlsBlRepository = new MctrWkipJrnlsBlRepository();
                var response = MctrWkipJrnlsBlRepository.mctrWkipJrnlsBlWhenNewFormInstance(mctrWkipJrnlsBl);
                logger.Info("Response received from MctrWkipJrnlsBlRepository.mctrWkipJrnlsBlWhenNewFormInstance() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrWkipJrnlsBlWhenWindowClosed
        ///</summary>
        ///<param name = "mctrWkipJrnlsBl"></param>
        ///<returns>IEnumerable<Status></returns>
        public IEnumerable<MctrWkipJrnlsBl> mctrWkipJrnlsBlWhenWindowClosed(IEnumerable<MctrWkipJrnlsBl> mctrWkipJrnlsBl)
        {
            try
            {
                logger.Info("Executing Business : mctrWkipJrnlsBlWhenWindowClosed()");

                IMctrWkipJrnlsBlRepository MctrWkipJrnlsBlRepository = new MctrWkipJrnlsBlRepository();
                var response = MctrWkipJrnlsBlRepository.mctrWkipJrnlsBlWhenWindowClosed(mctrWkipJrnlsBl);
                logger.Info("Response received from MctrWkipJrnlsBlRepository.mctrWkipJrnlsBlWhenWindowClosed() : " + response);

                return response;
            }
            catch (Exception e)
            {
                logger.Info("Response received from JrnlWeekRepository.jrnlWeekJrnlWeekOnLoad() : " + e.Message);

                throw;
            }

        }
    }
}