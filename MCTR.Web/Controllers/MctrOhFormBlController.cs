
///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  


using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System;
using System.Linq;
using System.Web.Mvc;
using log4net;
using MCTR.Web.Security;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///MctrOhFormBlController is a web controller implementation for the 
    ///MctrOhFormBl screen.
    ///</summary>
    ///
    [CustomAuthorize]
    public class MctrOhFormBlController : Controller
    {
         private readonly ILog logger;


        public MctrOhFormBlController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }
        public ActionResult MctrOHForm(int rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("MctrOHForm");
        }
        public ActionResult MctrOHFormTo(int rowId)
        {
            ViewData["rowID"] = rowId;
            return PartialView("MctrOHFormTo");
        }
        public ActionResult MctrOverheadForm()
        {
            
            return PartialView("MctrOverheadForm");
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrOhMctrOhOnLoad
        ///</summary>
        ///<param name = "MctrOhFormBl"></param>
        ///<returns>IEnumerable<MctrOhFormBl> </returns>

        public ActionResult MctrOHForm1(int mctrno)
        {
            ViewData["mctrno"] = mctrno;
            return PartialView("MctrOHForm");
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrOhMctrOhOnLoad
        ///</summary>
        ///<param name = "mctrOhFormBl"></param>
        ///<returns>IEnumerable<MctrOffsetFormBl> </returns>
        public JsonResult mctrOhMctrOhOnLoad(MctrOhFormBl mctrOhFormBl)
        {

            try
            {
                mctrOhFormBl.MCTR_NO = Convert.ToInt32(ViewData["mctrno"].ToString());
                mctrOhFormBl.LINE_NO = 1;
                mctrOhFormBl.FROM_TO = "F";

                MctrOhFormBlHandler mctrOhFormBlHandler = new MctrOhFormBlHandler();
                logger.Debug("Executing mctrOffsetFormBlHandler.mctrOffsetMctrOffsetOnLoad().");
                var mctrOhFormBlResp = mctrOhFormBlHandler.mctrOhMctrOhOnLoad(mctrOhFormBl);
                logger.Info("Response Received : " + mctrOhFormBlResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrOhFormBlResp.Count(),
                    rows = mctrOhFormBlResp,
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.Controller.mctrOhMctrOhOnLoad():" + e.Message);
                throw;
            }
            
        }
        public JsonResult mctrOhMctrOhOnLoadFrom(int mctrno,short lineNo)
        {
            MctrOhFormBl mctrOhFormBl = new MctrOhFormBl();
            try
            {
                mctrOhFormBl.MCTR_NO = mctrno;
                mctrOhFormBl.LINE_NO = lineNo;
                mctrOhFormBl.FROM_TO ="F" ;

                MctrOhFormBlHandler mctrOhFormBlHandler = new MctrOhFormBlHandler();
                logger.Debug("Executing mctrOffsetFormBlHandler.mctrOffsetMctrOffsetOnLoad().");
                var mctrOhFormBlResp = mctrOhFormBlHandler.mctrOhMctrOhOnLoad(mctrOhFormBl);
                logger.Info("Response Received : " + mctrOhFormBlResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrOhFormBlResp.Count(),
                    rows = mctrOhFormBlResp,
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.Controller.mctrOhMctrOhOnLoadFrom():" + e.Message);
                throw;
            }

        }
        public JsonResult mctrOhMctrOhOnLoadTo(int mctrno, short lineNo)
        {
            MctrOhFormBl mctrOhFormBl = new MctrOhFormBl();
            try
            {
                mctrOhFormBl.MCTR_NO = mctrno;
                mctrOhFormBl.LINE_NO = lineNo;
                mctrOhFormBl.FROM_TO = "T";

                MctrOhFormBlHandler mctrOhFormBlHandler = new MctrOhFormBlHandler();
                logger.Debug("Executing mctrOffsetFormBlHandler.mctrOffsetMctrOffsetOnLoad().");
                var mctrOhFormBlResp = mctrOhFormBlHandler.mctrOhMctrOhOnLoad(mctrOhFormBl);
                logger.Info("Response Received : " + mctrOhFormBlResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrOhFormBlResp.Count(),
                    rows = mctrOhFormBlResp,
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.Controller.mctrOhMctrOhOnLoadTo():" + e.Message);
                throw;
            }

        }
        public JsonResult mctrOverheadOnload(int mctrno)
        {
            MctrOhFormBl mctrOhFormBl = new MctrOhFormBl();
            try
            {
                mctrOhFormBl.MCTR_NO = mctrno;
                mctrOhFormBl.LINE_NO = 0;
                MctrOhFormBlHandler mctrOhFormBlHandler = new MctrOhFormBlHandler();
                logger.Debug("Executing mctrOffsetFormBlHandler.mctrOffsetMctrOffsetOnLoad().");
                var mctrOhFormBlResp = mctrOhFormBlHandler.mctrOhMctrOhOnLoad(mctrOhFormBl);
                logger.Info("Response Received : " + mctrOhFormBlResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrOhFormBlResp.Count(),
                    rows = mctrOhFormBlResp,
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.DataAccess.mctrOverheadOnload():" + e.Message);
                throw;
            }

        }

        [HttpGet]
        public JsonResult mctrOhMctrOhOnLoad(int mctrno, short lineNo)
        {
            MctrOhFormBl mctrOhFormBl = new MctrOhFormBl();
            try
            {
                mctrOhFormBl.MCTR_NO = mctrno;
                mctrOhFormBl.LINE_NO = lineNo;
             

                MctrOhFormBlHandler mctrOhFormBlHandler = new MctrOhFormBlHandler();
                logger.Debug("Executing mctrOffsetFormBlHandler.mctrOffsetMctrOffsetOnLoad().");
                var mctrOhFormBlResp = mctrOhFormBlHandler.mctrOhMctrOhOnLoad(mctrOhFormBl);
                logger.Info("Response Received : " + mctrOhFormBlResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrOhFormBlResp.Count(),
                    rows = mctrOhFormBlResp,
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.DataAccess.mctrOhMctrOhOnLoad():" + e.Message);
                throw;
            }

        }


        ///*************************************************************
        ///<summary>
        ///Method Name : mctrOhFormBlWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrOhFormBl"></param>
        ///<returns>IEnumerable<MctrOhFormBl> </returns>

        [HttpPost]
        public ActionResult mctrOhFormBlWhenNewFormInstance(MctrOhFormBl mctrOhFormBl)
        {
            logger.Info("Executing mctrOhFormBlWhenNewFormInstance() : " + mctrOhFormBl);
            if (mctrOhFormBl != null)
            {
                MctrOhFormBlHandler mctrOhFormBlHandler = new MctrOhFormBlHandler();
                logger.Debug("Executing mctrOhFormBlHandler.mctrOhFormBlWhenNewFormInstance().");
                var mctrOhFormBlResp = mctrOhFormBlHandler.mctrOhFormBlWhenNewFormInstance(mctrOhFormBl);
                logger.Info("Response Received : " + mctrOhFormBlResp);
                return View("MctrOhFormBl", mctrOhFormBlResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrOhFormBlWhenWindowClosed
        ///</summary>
        ///<param name = "MctrOhFormBl"></param>
        ///<returns>IEnumerable<MctrOhFormBl> </returns>

        [HttpPost]
        public ActionResult mctrOhFormBlWhenWindowClosed(MctrOhFormBl mctrOhFormBl)
        {
            logger.Info("Executing mctrOhFormBlWhenWindowClosed() : " + mctrOhFormBl);
            if (mctrOhFormBl != null)
            {
                MctrOhFormBlHandler mctrOhFormBlHandler = new MctrOhFormBlHandler();
                logger.Debug("Executing mctrOhFormBlHandler.mctrOhFormBlWhenWindowClosed().");
                var mctrOhFormBlResp = mctrOhFormBlHandler.mctrOhFormBlWhenWindowClosed(mctrOhFormBl);
                logger.Info("Response Received : " + mctrOhFormBlResp);
                return View("MctrOhFormBl", mctrOhFormBlResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }
    }
}
