///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///
 
///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using System.Threading.Tasks;
using System.Web.Mvc;
using System.Net.Http;
using System.Net.Http.Headers;

using log4net;

using MCTR.DomainEntity;

namespace MCTR.Web.Handlers
{
///*********************************************************************
///<summary>
///MctrOpenReportsBlHandler provides a level of abstraction for consuming the REST api.
///</summary>
  public class MctrOpenReportsBlHandler
  {
     private readonly ILog logger;
    
    public MctrOpenReportsBlHandler()
    {
      logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
    }
        
     
    ///*************************************************************
    ///<summary>
    ///Method Name : selectionoriginatorWhenButtonPressed
    ///</summary>
    ///<param name = "MctrOpenReportsBl"></param>
    ///<returns>IEnumerable<MctrOpenReportsBl> </returns>

    public IEnumerable<MctrOpenReportsBl> selectionoriginatorWhenButtonPressed(MctrOpenReportsBl mctrOpenReportsBl){

      logger.Debug("Executing selectionoriginatorWhenButtonPressed rest service handler.");
      string restApiPath = "MctrOpenReportsBlService/selectionoriginatorWhenButtonPressed";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrOpenReportsBl);
      var response = HandlerUtil<MctrOpenReportsBl>.RestPostProcessor(restApiPath, mctrOpenReportsBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : selectionstatusWhenButtonPressed
    ///</summary>
    ///<param name = "MctrOpenReportsBl"></param>
    ///<returns>IEnumerable<MctrOpenReportsBl> </returns>

    public IEnumerable<MctrOpenReportsBl> selectionstatusWhenButtonPressed(MctrOpenReportsBl mctrOpenReportsBl){

      logger.Debug("Executing selectionstatusWhenButtonPressed rest service handler.");
      string restApiPath = "MctrOpenReportsBlService/selectionstatusWhenButtonPressed";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrOpenReportsBl);
      var response = HandlerUtil<MctrOpenReportsBl>.RestPostProcessor(restApiPath, mctrOpenReportsBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : selectionfinancialControlWhenButtonPressed
    ///</summary>
    ///<param name = "MctrOpenReportsBl"></param>
    ///<returns>IEnumerable<MctrOpenReportsBl> </returns>

    public IEnumerable<MctrOpenReportsBl> selectionfinancialControlWhenButtonPressed(MctrOpenReportsBl mctrOpenReportsBl){

      logger.Debug("Executing selectionfinancialControlWhenButtonPressed rest service handler.");
      string restApiPath = "MctrOpenReportsBlService/selectionfinancialControlWhenButtonPressed";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrOpenReportsBl);
      var response = HandlerUtil<MctrOpenReportsBl>.RestPostProcessor(restApiPath, mctrOpenReportsBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : selectionbutExcelWhenButtonPressed
    ///</summary>
    ///<param name = "MctrOpenReportsBl"></param>
    ///<returns>IEnumerable<MctrOpenReportsBl> </returns>

    public IEnumerable<MctrOpenReportsBl> selectionbutExcelWhenButtonPressed(MctrOpenReportsBl mctrOpenReportsBl){

      logger.Debug("Executing selectionbutExcelWhenButtonPressed rest service handler.");
      string restApiPath = "MctrOpenReportsBlService/selectionbutExcelWhenButtonPressed";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrOpenReportsBl);
      var response = HandlerUtil<MctrOpenReportsBl>.RestPostProcessor(restApiPath, mctrOpenReportsBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
   
        
    ///*************************************************************
    ///<summary>
    ///Method Name : getRgBuLOV()
    ///</summary>
    ///<param name = "MctrOpenReportsBl"></param>
    ///<returns>IEnumerable<MctrOpenReportsBl> </returns>

    public IEnumerable<MctrBusUnit> getRgBuLOV(MctrBusUnit mctrOpenReportsBl){

      logger.Debug("Executing getRgBuLOV rest service handler.");
      string restApiPath = "MctrOpenReportsBlService/getRgBuLOV";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + mctrOpenReportsBl);
      var response = HandlerUtil<MctrBusUnit>.RestPostProcessor(restApiPath, mctrOpenReportsBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    
        
    
  }

}

