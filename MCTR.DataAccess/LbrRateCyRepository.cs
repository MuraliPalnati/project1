///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Linq;
using MCTR.DataEntity;
using MCTR.DataAccessInterface;
using MCTR.DomainEntity;
using AutoMapper;
using MCTR.DataAccess;
using log4net;
using Oracle.DataAccess.Client;
using System.Data;

namespace MCTR.DataAccess
{
    ///*********************************************************************
    ///<summary>
    ///LbrRateCyRepository is a data access implementation which holds all 
    ///the data access logic in it.
    ///</summary>
    public class LbrRateCyRepository : BaseRepository, ILbrRateCyRepository
    {

        private readonly ILog logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
     


        ///*************************************************************
        ///<summary>
        ///Method Name : lbrRateCyWhenNewFormInstance
        ///</summary>
        ///<param name = "lbrRateCy"></param>
        ///<returns>IEnumerable<LbrRateCy> </returns>
        public IEnumerable<LbrRateCy> lbrRateCyWhenNewFormInstance(IEnumerable<LbrRateCy> lbrRateCy)
        {
            logger.Debug("Executing MCTR.DataAccess.LbrRateCyRepository.lbrRateCyWhenNewFormInstance() with input : " + lbrRateCy);
            try
            {
                //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LbrRateCyRepository.lbrRateCyWhenNewFormInstance():" + e.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : LbrRateOnLoad
        ///</summary>
        ///<param name = "lbrRateCy"></param>
        ///<returns>IEnumerable<LbrRateCy> </returns>
        public IEnumerable<LbrRateCy> LbrRateOnLoad(IEnumerable<LbrRateCy> lbrRateCy)
        {
            logger.Debug("Executing MCTR.DataAccess.MctrIncrRatesRepository.mctrLineItemMctrLineItemOnLoad with input : " + lbrRateCy);
            try
            {
                string sqlstmt = "select * from mctr_owner . mctr_lbr_rate_v order by setid , fiscal_year , labor_rate_cd7";//     
                var resultlist = entities.Database.SqlQuery<LbrRateCy>(sqlstmt).ToList<LbrRateCy>();
                logger.Debug("Response received from MCTR.DataAccess.MctrIncrRatesRepository.mctrLineItemMctrLineItemOnLoad with response : " + resultlist);

                return resultlist;
            }
            catch (OracleException e)
            {
                logger.Error("Error from MCTR.DataAccess.MctrIncrRatesRepository.mctrIncrRatesMctrIncrRatesOnLoad" + e.Message);
                throw;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.MctrIncrRatesRepository.mctrIncrRatesMctrIncrRatesOnLoad" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : lbrRateCyWhenWindowClosed
        ///</summary>
        ///<param name = "LbrRateCy"></param>
        ///<returns>IEnumerable<LbrRateCy> </returns>
        public IEnumerable<LbrRateCy> lbrRateCyWhenWindowClosed(IEnumerable<LbrRateCy> lbrRateCy)
        {
            logger.Debug("Executing MCTR.DataAccess.LbrRateCyRepository.lbrRateCyWhenWindowClosed() with input : " + lbrRateCy);
            try
            {
                 //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.LbrRateCyRepository.lbrRateCyWhenWindowClosed():" + e.Message);
                throw;
            }
        }
    }
}

       