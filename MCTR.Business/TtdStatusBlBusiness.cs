///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using System;
using System.Collections.Generic;
using log4net;
using MCTR.DomainEntity;
using MCTR.BusinessInterface;
using MCTR.DataAccessInterface;
using MCTR.DataAccess;

namespace MCTR.Business
{

    ///*********************************************************************
    ///<summary>
    ///ttdstatusbl_business is the business logic implementation class which holds all
    ///business logic in it.
    ///</summary>
    public class TtdStatusBIBusiness : BaseBusiness, ITtdStatusBIBusiness
    {
         private readonly ILog logger;

        ITtdStatusBIRepository ttdStatus = new TtdStatusBIRepository();

        public TtdStatusBIBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : LineItemOnLoad
        ///</summary>
        ///<param name = "lineitem"></param>
        ///<returns>IEnumerable<LbrRate></returns>
        public IEnumerable<LineItem> LineItemOnLoad(IEnumerable<LineItem> lineitem)
        {
            try
            {
                logger.Info(" Executing  MCTR.Bussiness.TtdStatusBlBusiness.LineItemOnLoad() with request " + lineitem);
                var response = ttdStatus.LineItemOnLoad(lineitem);
                logger.Info("Response received from  MCTR.Bussiness.TtdStatusBlBusiness.LineItemOnLoad() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Bussiness.TtdStatusBlBusiness.LineItemOnLoad():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : ttdStatusBlWhenWindowClosed
        ///</summary>
        ///<param name = "lineitem"></param>
        ///<returns>IEnumerable<LbrRate></returns>
        public IEnumerable<LineItem> ttdStatusBlWhenWindowClosed(IEnumerable<LineItem> lineitem)
        {
            try
            {
                logger.Info("Executing  MCTR.Bussiness.TtdStatusBlBusiness.ttdStatusBlWhenWindowClosed() with request" + lineitem);
                var response = ttdStatus.ttdStatusBlWhenWindowClosed(lineitem);
                logger.Info("Response received from MCTR.Bussiness.TtdStatusBlBusiness.ttdStatusBlWhenWindowClosed() :" + response);
                return response;
            }
         catch(Exception e)
            {
                logger.Error("Error from MCTR.Bussiness.TtdStatusBlBusiness.ttdStatusBlWhenWindowClosed():" + e.Message);
                throw;

            }


        }
    }
}
