///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  
using MCTR.DataEntity;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using AutoMapper;

namespace MCTR.DataAccess
{
    public class Repository<TEntity> where TEntity : class
    {
        internal MCTRDbEntities context;
        internal DbSet<TEntity> dbSet;

        public Repository()
        {
            this.context = new MCTRDbEntities(BaseRepository.MCTRConnectionString);
            this.dbSet = context.Set<TEntity>();
        }

        public Repository(MCTRDbEntities context)
        {
            this.context = context;
            this.dbSet = context.Set<TEntity>();
        }

        public IEnumerable<TEntity> Get()
        {
            IQueryable<TEntity> query = dbSet;
            return query.ToList();
        }

        public TEntity GetByID(object id)
        {
            return dbSet.Find(id);
        }

        public bool Insert(IEnumerable<TEntity> entity)
        {
            var TargetToInsert = Mapper.DynamicMap<IEnumerable<TEntity>, IEnumerable<TEntity>>(entity);
            foreach(var target in TargetToInsert)
            { 
            dbSet.Add(target);
            context.SaveChanges();
            }
            return true; 
        }

        public bool Delete(IEnumerable<TEntity> entityToDelete)
        {
            var TargetToDelete = Mapper.DynamicMap<IEnumerable<TEntity>, IEnumerable<TEntity>>(entityToDelete);
            foreach (var target in TargetToDelete)
            {
                dbSet.Attach(target);
                dbSet.Remove(target);
                context.SaveChanges();
             
            }
            return true;
        } 
        

        public bool Update(IEnumerable<TEntity> entityToUpdate)
        {
            var TargetToUpdate = Mapper.DynamicMap<IEnumerable<TEntity>, IEnumerable<TEntity>>(entityToUpdate);
            foreach (var target in TargetToUpdate)
            {
                dbSet.Attach(target);
                context.Entry(target).State = EntityState.Modified;
                context.SaveChanges();
            }
            context.Dispose();
         return true;
        }
    }
}


