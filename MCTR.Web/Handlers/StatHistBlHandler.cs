
///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using log4net;
using MCTR.DomainEntity;
using System;
using System.Collections.Generic;

namespace MCTR.Web.Handlers
{
    ///*********************************************************************
    ///<summary>
    ///StatHistBlHandler provides a level of abstraction for consuming the REST api.
    ///</summary>
    public class StatHistBlHandler
  {
     private readonly ILog logger;
    
    public StatHistBlHandler()
    {
      logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
    }
        
     
    ///*************************************************************
    ///<summary>
    ///Method Name : mctrStatusHistMctrStatusHistOnLoad
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatusHistory> mctrStatusHistMctrStatusHistOnLoad(StatusHistory statHistBl)
        {
            try {

                logger.Debug("Executing MCTR.Web.Handlers.StatHistBlHandler.mctrStatusHistMctrStatusHistOnLoad rest service handler.");
                string restApiPath = "StatHistBlService/mctrStatusHistMctrStatusHistOnLoad";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
                var response = HandlerUtil<StatusHistory>.RestPostProcessor(restApiPath, statHistBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from  MCTR.Web.Handlers.StatHistBlHandler.mctrStatusHistMctrStatusHistOnLoad :" + e.Message);
                throw;
            }
        }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : mctrStatusHisthistButtonCloseWhenButtonPressed
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatusHistory> mctrStatusHisthistButtonCloseWhenButtonPressed(StatHistBl statHistBl){
            try {
                logger.Debug("Executing MCTR.Web.Handlers.StatHistBlHandler.mctrStatusHisthistButtonCloseWhenButtonPressed rest service handler.");
                string restApiPath = "StatHistBl/mctrStatusHisthistButtonCloseWhenButtonPressed";
                logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
                var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
                logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Exception thrown from MMCTR.Web.Handlers.StatHistBlHandler.mctrStatusHisthistButtonCloseWhenButtonPressed :" + e.Message);
                throw;
            }
        }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : mctrStatusHistPostQuery
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> mctrStatusHistPostQuery(StatHistBl statHistBl){

      logger.Debug("Executing mctrStatusHistPostQuery rest service handler.");
      string restApiPath = "StatHistBl/mctrStatusHistPostQuery";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : selectionrgrpSortWhenRadioChanged
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> selectionrgrpSortWhenRadioChanged(StatHistBl statHistBl){

      logger.Debug("Executing selectionrgrpSortWhenRadioChanged rest service handler.");
      string restApiPath = "StatHistBl/selectionrgrpSortWhenRadioChanged";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : selectionbutToXlsWhenButtonPressed
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> selectionbutToXlsWhenButtonPressed(StatHistBl statHistBl){

      logger.Debug("Executing selectionbutToXlsWhenButtonPressed rest service handler.");
      string restApiPath = "StatHistBl/selectionbutToXlsWhenButtonPressed";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : webutildummyWhenButtonPressed
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> webutildummyWhenButtonPressed(StatHistBl statHistBl){

      logger.Debug("Executing webutildummyWhenButtonPressed rest service handler.");
      string restApiPath = "StatHistBl/webutildummyWhenButtonPressed";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : webutilwebutilClientinfoFunctionsWhenCustomItemEvent
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> webutilwebutilClientinfoFunctionsWhenCustomItemEvent(StatHistBl statHistBl){

      logger.Debug("Executing webutilwebutilClientinfoFunctionsWhenCustomItemEvent rest service handler.");
      string restApiPath = "StatHistBl/webutilwebutilClientinfoFunctionsWhenCustomItemEvent";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : webutilwebutilFileFunctionsWhenCustomItemEvent
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> webutilwebutilFileFunctionsWhenCustomItemEvent(StatHistBl statHistBl){

      logger.Debug("Executing webutilwebutilFileFunctionsWhenCustomItemEvent rest service handler.");
      string restApiPath = "StatHistBl/webutilwebutilFileFunctionsWhenCustomItemEvent";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : webutilwebutilHostFunctionsWhenCustomItemEvent
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> webutilwebutilHostFunctionsWhenCustomItemEvent(StatHistBl statHistBl){

      logger.Debug("Executing webutilwebutilHostFunctionsWhenCustomItemEvent rest service handler.");
      string restApiPath = "StatHistBl/webutilwebutilHostFunctionsWhenCustomItemEvent";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : webutilwebutilSessionFunctionsWhenCustomItemEvent
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> webutilwebutilSessionFunctionsWhenCustomItemEvent(StatHistBl statHistBl){

      logger.Debug("Executing webutilwebutilSessionFunctionsWhenCustomItemEvent rest service handler.");
      string restApiPath = "StatHistBl/webutilwebutilSessionFunctionsWhenCustomItemEvent";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : webutilwebutilFiletransferFunctionsWhenCustomItemEvent
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> webutilwebutilFiletransferFunctionsWhenCustomItemEvent(StatHistBl statHistBl){

      logger.Debug("Executing webutilwebutilFiletransferFunctionsWhenCustomItemEvent rest service handler.");
      string restApiPath = "StatHistBl/webutilwebutilFiletransferFunctionsWhenCustomItemEvent";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : webutilwebutilOleFunctionsWhenCustomItemEvent
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> webutilwebutilOleFunctionsWhenCustomItemEvent(StatHistBl statHistBl){

      logger.Debug("Executing webutilwebutilOleFunctionsWhenCustomItemEvent rest service handler.");
      string restApiPath = "StatHistBl/webutilwebutilOleFunctionsWhenCustomItemEvent";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : webutilwebutilCApiFunctionsWhenCustomItemEvent
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> webutilwebutilCApiFunctionsWhenCustomItemEvent(StatHistBl statHistBl){

      logger.Debug("Executing webutilwebutilCApiFunctionsWhenCustomItemEvent rest service handler.");
      string restApiPath = "StatHistBl/webutilwebutilCApiFunctionsWhenCustomItemEvent";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : webutilwebutilBrowserFunctionsWhenCustomItemEvent
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> webutilwebutilBrowserFunctionsWhenCustomItemEvent(StatHistBl statHistBl){

      logger.Debug("Executing webutilwebutilBrowserFunctionsWhenCustomItemEvent rest service handler.");
      string restApiPath = "StatHistBl/webutilwebutilBrowserFunctionsWhenCustomItemEvent";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : statHistBlWhenNewFormInstance
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> statHistBlWhenNewFormInstance(StatHistBl statHistBl){

      logger.Debug("Executing statHistBlWhenNewFormInstance rest service handler.");
      string restApiPath = "StatHistBl/statHistBlWhenNewFormInstance";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    ///*************************************************************
    ///<summary>
    ///Method Name : statHistBlWhenWindowClosed
    ///</summary>
    ///<param name = "StatHistBl"></param>
    ///<returns>IEnumerable<StatHistBl> </returns>

    public IEnumerable<StatHistBl> statHistBlWhenWindowClosed(StatHistBl statHistBl){

      logger.Debug("Executing statHistBlWhenWindowClosed rest service handler.");
      string restApiPath = "StatHistBl/statHistBlWhenWindowClosed";
      logger.Info("Invoking Rest API : " + restApiPath + " with Request : " + statHistBl);
      var response = HandlerUtil<StatHistBl>.RestPostProcessor(restApiPath, statHistBl);
      logger.Info("Response received form Rest API : " + restApiPath + " : " + response);
      return response; 
    }
        
    
  }

}

