///*************************************************************************
///
/// BOEING CONFIDENTIAL
/// ___________________
///
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
///
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be
/// covered by U.S. and Foreign Patents, patents in process,
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing.
///
///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :

using log4net;
using MCTR.BusinessInterface;
using MCTR.DataAccess;
using MCTR.DataAccessInterface;
using MCTR.DomainEntity;
using System;
using System.Collections.Generic;

namespace MCTR.Business
{
    public class RoleListBusiness : BaseBusiness, IRoleListBusiness
    {
        ///*********************************************************************
        ///<summary>
        ///RoleListBusiness is the business logic implementation class which holds all
        ///business logic in it.
        ///</summary>

        private readonly ILog logger = null;
        public RoleListBusiness()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }

        public void initialize()
        {
            //TODO: initialize input from controller
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListOnload
        ///</summary>
        ///<param name = "roleList"></param>
        ///<returns>IEnumerable<RoleList></returns>
        public IEnumerable<RoleList> roleListOnload(IEnumerable<RoleList> roleList)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleListBusiness.roleListOnload() with input" + roleList);
                IRoleListRepository roleListRepository = new RoleListRepository();
                var response = roleListRepository.roleListOnLoad(roleList);
                logger.Info("Response received from MCTR.Business.RoleListBusiness.roleListOnload() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleListBusiness.roleListOnload():" + e.Message);
                throw;
            }
            
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : roleListbutRoleWhenButtonPressed
        ///</summary>
        ///<param name = "roleList"></param>
        ///<returns>IEnumerable<RoleList></returns>
        public IEnumerable<RoleList> roleListbutRoleWhenButtonPressed(IEnumerable<RoleList> roleList)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleListBusiness.roleListbutRoleWhenButtonPressed() with input" + roleList);
                IRoleListRepository roleListRepository = new RoleListRepository();
                var response = roleListRepository.roleListbutRoleWhenButtonPressed(roleList);
                logger.Info("Response received from MCTR.Business.RoleListBusiness.roleListbutRoleWhenButtonPressed() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleListBusiness.roleListbutRoleWhenButtonPressed():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListbutFindWhenButtonPressed
        ///</summary>
        ///<param name = "roleList"></param>
        ///<returns>IEnumerable<RoleList></returns>
        public IEnumerable<RoleList> roleListbutFindWhenButtonPressed(IEnumerable<RoleList> roleList)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleListBusiness.roleListbutFindWhenButtonPressed() with input" + roleList);
                IRoleListRepository roleListRepository = new RoleListRepository();
                var response = roleListRepository.roleListbutFindWhenButtonPressed(roleList);
                logger.Info("Response received from MCTR.Business.RoleListBusiness.roleListbutFindWhenButtonPressed() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleListBusiness.roleListbutFindWhenButtonPressed():" + e.Message);
                throw;
            }
            
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListPostQuery
        ///</summary>
        ///<param name = "roleList"></param>
        ///<returns>IEnumerable<RoleList></returns>
        public IEnumerable<RoleList> roleListPostQuery(IEnumerable<RoleList> roleList)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleListBusiness.roleListPostQuery() with input" + roleList);
                IRoleListRepository roleListRepository = new RoleListRepository();
                var response = roleListRepository.roleListPostQuery(roleList);
                logger.Info("Response received from MCTR.Business.RoleListBusiness.roleListPostQuery() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleListBusiness.roleListPostQuery():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : roleListWhenNewFormInstance
        ///</summary>
        ///<param name = "roleList"></param>
        ///<returns>IEnumerable<RoleList></returns>
        public IEnumerable<RoleList> roleListWhenNewFormInstance(IEnumerable<RoleList> roleList)
        {
            try
            {
                logger.Debug("Executing MCTR.Business.RoleListBusiness.roleListWhenNewFormInstance() with input" + roleList);
                IRoleListRepository roleListRepository = new RoleListRepository();
                var response = roleListRepository.roleListWhenNewFormInstance(roleList);
                logger.Info("Response received from MCTR.Business.RoleListBusiness.roleListWhenNewFormInstance() : " + response);
                return response;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.Business.RoleListBusiness.roleListWhenNewFormInstance():" + e.Message);
                throw;
            }
        }
    }
}