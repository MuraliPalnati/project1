///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  


using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using log4net;
using MCTR.Web.Security;
using System;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///MctrMainMenuController is a web controller implementation for the 
    ///MctrMainMenu screen.
    ///</summary>
    ///
    [CustomAuthorize]
    public class MctrMainMenuController : Controller
    {
         private readonly ILog logger;

        private readonly MctrMainMenu mainmenu = new MctrMainMenu();

        public MctrMainMenuController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }


        ///*************************************************************
        ///<summary>
        ///Method Name : actionTreeBlockactionTreeWhenTreeNodeExpanded
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult actionTreeBlockactionTreeWhenTreeNodeExpanded(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing actionTreeBlockactionTreeWhenTreeNodeExpanded() : " + mctrMainMenu);
            return View();
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : actionTreeBlockactionTreeWhenTreeNodeActivated
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public string actionTreeBlockactionTreeWhenTreeNodeActivated()
        {
            try
            {
                string v_status_descr = "";
                logger.Info("Executing actionTreeBlockactionTreeWhenTreeNodeActivated() : ");

                MctrMainMenuHandler mctrMainMenuHandler = new MctrMainMenuHandler();
                var mctrMainMenuResp = mctrMainMenuHandler.getDescription();
                int count = mctrMainMenuResp.Count();
                var b = mctrMainMenuResp.First<Status>();

                if (count == 1)
                {
                    v_status_descr = "" + b.STATUS_DESCR + "";
                }
                else
                {

                    foreach (var a in mctrMainMenuResp)
                    {
                        v_status_descr = v_status_descr + "," + b.STATUS_DESCR;
                    }
                }

                return v_status_descr;
            }
            catch(Exception e)
            {
                logger.Error("Error from  MctrMainMenuController.actionTreeBlockactionTreeWhenTreeNodeActivated()" + e.Message);
                throw;
            }

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : actionTreeBlockOnError
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult actionTreeBlockOnError(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing actionTreeBlockOnError() : " + mctrMainMenu);

            return View();

        }


        ///*************************************************************
        ///<summary>
        ///Method Name : buttonPalettebutMctrWhenButtonPressed
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult buttonPalettebutMctrWhenButtonPressed(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing buttonPalettebutMctrWhenButtonPressed() : " + mctrMainMenu);

            return View();

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : buttonPalettebutLineItemWhenButtonPressed
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult buttonPalettebutLineItemWhenButtonPressed(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing buttonPalettebutLineItemWhenButtonPressed() : " + mctrMainMenu);

            return View();

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : buttonPalettebutRefreshWhenButtonPressed
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult buttonPalettebutRefreshWhenButtonPressed(bool? cbox)
        {
            try
            {
                var mctrMainMenu = new MctrMainMenu();
                if (cbox == null)
                {
                    mctrMainMenu.cbox_accountant = true;
                }
                else {
                    mctrMainMenu.cbox_accountant = false;
                }
                mctrMainMenu.session_bems = SessionPerister.BEMSID;
                IEnumerable<MctrMainMenu> mctrMainMenuResp = new List<MctrMainMenu>();
                MainMenuLists mainMenuLists = new MainMenuLists();
                mainMenuLists.UserName = SessionPerister.UserName;
                logger.Info("Executing buttonPalettebutRefreshWhenButtonPressed() : " + mctrMainMenu);
                var msgStatusHandler = new MctrMessageStatusHandler();
                var msgStatus = msgStatusHandler.GetMessageStatus();
                if (msgStatus.Any()) {
                    switch (msgStatus.First().MESSAGE_STATUS) {
                        case "0": break;
                        case "1":
                            mainMenuLists.MessageStatus = msgStatus.First().MESSAGE_STATUS;
                            mainMenuLists.MessageText = msgStatus.First().MESSAGE_TEXT;
                            break;
                        case "2": if(!(SessionPerister.MESSAGEADMINBEMS == SessionPerister.BEMSID)) {
                                return View("MessageWindow", msgStatus.First());
                            }
                            break;

                    }
                   

                }
                if (mctrMainMenu.cbox_accountant)
                {
                    MctrMainMenuHandler mctrMainMenuHandler = new MctrMainMenuHandler();
                    mctrMainMenuResp = mctrMainMenuHandler.populateActionTree(mctrMainMenu);
                    logger.Info("Response Received : " + mctrMainMenuResp);
                }
                else
                {
                    MctrMainMenuHandler mctrMainMenuHandler = new MctrMainMenuHandler();
                    mctrMainMenuResp = mctrMainMenuHandler.populateAssignedAtree(mctrMainMenu);
                    logger.Info("Response Received : " + mctrMainMenuResp);
                }
                mainMenuLists.PA = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals);

                mainMenuLists.AA = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "AA");
                mainMenuLists.CA = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "CA");
                mainMenuLists.FA = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "FA");
                mainMenuLists.IP = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "IP");
                mainMenuLists.JA = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "JA");
                mainMenuLists.LA = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "LA");
                mainMenuLists.MA = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "MA");
                mainMenuLists.OA = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "OA");
                mainMenuLists.OR = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "OR");
                mainMenuLists.SA = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "SA");
                mainMenuLists.SR = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "SR");
                mainMenuLists.SU = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "SU");
                mainMenuLists.XS = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "XS");
                mainMenuLists.XX = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "XX");
                mainMenuLists.LB = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "LB");
                mainMenuLists.LM = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "LM");
                mainMenuLists.NinetyNine = mctrMainMenuResp.ToList().FindAll(x => x.pendingApprovals == false && x.STATUS_ID == "99");
                return View(mainMenuLists);

            }
            catch(Exception e)
            {
                logger.Error("Error from  MctrMainMenuController.buttonPalettebutRefreshWhenButtonPressed()" + e.Message);
                throw;
            }
         }

        ///*************************************************************
        ///<summary>
        ///Method Name : buttonPalettebutCollapseWhenButtonPressed
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult buttonPalettebutCollapseWhenButtonPressed(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing buttonPalettebutCollapseWhenButtonPressed() : " + mctrMainMenu);

            return View();

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : buttonPalettebutReportsWhenButtonPressed
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult buttonPalettebutReportsWhenButtonPressed(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing buttonPalettebutReportsWhenButtonPressed() : " + mctrMainMenu);

            return View();
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : buttonPalettebutUserListWhenButtonPressed
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult buttonPalettebutUserListWhenButtonPressed(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing buttonPalettebutUserListWhenButtonPressed() : " + mctrMainMenu);

            return View();

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : buttonPaletteexitBtnWhenMouseClick
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult buttonPaletteexitBtnWhenMouseClick(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing buttonPaletteexitBtnWhenMouseClick() : " + mctrMainMenu);

            return View();

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : buttonPalettecboxOpenonlyWhenCheckboxChanged
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult buttonPalettecboxOpenonlyWhenCheckboxChanged(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing buttonPalettecboxOpenonlyWhenCheckboxChanged() : " + mctrMainMenu);

            return View();

        }

        //************************************************************
        ///<summary>
        ///Method Name : buttonPalettebutAdminTblsWhenButtonPressed
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public JsonResult buttonPalettebutAdminTblsWhenButtonPressed()
        {
            try
            {
                MctrMainMenu mctrMainMenu = new MctrMainMenu();
                mctrMainMenu.session_bems = SessionPerister.BEMSID;
                if (SessionPerister.MESSAGEADMINBEMS != null || SessionPerister.ACCOUNTANTROLE == "Y" || SessionPerister.MATLACCTROLE == "Y" || SessionPerister.COSTACCTROLE == "Y" || SessionPerister.SRACCTROLE == "Y" || SessionPerister.ADMINROLE == "Y")
                {
                    return Json(true, JsonRequestBehavior.AllowGet);
                }

                else
                {              
                    return Json(false, JsonRequestBehavior.AllowGet);
                }
            }
            catch(Exception e)
            {
                logger.Error("Error from  MctrMainMenuController.buttonPalettebutAdminTblsWhenButtonPressed()" + e.Message);
                throw;
            }
         }



        ///*************************************************************
        ///<summary>
        ///Method Name : buttonPalettecboxAccountantWhenCheckboxChanged
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult buttonPalettecboxAccountantWhenCheckboxChanged(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing buttonPalettecboxAccountantWhenCheckboxChanged() : " + mctrMainMenu);

            return View();

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : webutildummyWhenButtonPressed
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult webutildummyWhenButtonPressed(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing webutildummyWhenButtonPressed() : " + mctrMainMenu);

            return View();

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrMainMenuPreForm
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult mctrMainMenuPreForm(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing mctrMainMenuPreForm() : " + mctrMainMenu);

            return View();

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrMainMenuOnError
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult mctrMainMenuOnError(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing mctrMainMenuOnError() : " + mctrMainMenu);

            return View();

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrMainMenuKeyExit
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult mctrMainMenuKeyExit(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing mctrMainMenuKeyExit() : " + mctrMainMenu);

            return View();
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrMainMenuWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult mctrMainMenuWhenNewFormInstance(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing mctrMainMenuWhenNewFormInstance() : " + mctrMainMenu);

            return View();

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrMainMenuRunReports
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult mctrMainMenuRunReports(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing mctrMainMenuRunReports() : " + mctrMainMenu);

            return View();

        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrMainMenuWhenTimerExpired
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        [Authorize(Roles = "admin")]
        public ActionResult mctrMainMenuWhenTimerExpired(MctrMainMenu mctrMainMenu)
        {
            try
            {
                logger.Info("Executing mctrMainMenuWhenTimerExpired() : " + mctrMainMenu);
                if (mctrMainMenu != null)
                {
                    MctrMainMenuHandler mctrMainMenuHandler = new MctrMainMenuHandler();
                    logger.Debug("Executing mctrMainMenuHandler.mctrMainMenuWhenTimerExpired().");
                    var mctrMainMenuResp = mctrMainMenuHandler.mctrMainMenuWhenTimerExpired(mctrMainMenu);
                    logger.Info("Response Received : " + mctrMainMenuResp);
                    return View("MctrMainMenu", mctrMainMenuResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from  MctrMainMenuController.mctrMainMenuWhenTimerExpired()" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrMainMenuWhenWindowActivated
        ///</summary>
        ///<param name = "MctrMainMenu"></param>
        ///<returns>IEnumerable<MctrMainMenu> </returns>

        [HttpGet]
        public ActionResult mctrMainMenuWhenWindowActivated(MctrMainMenu mctrMainMenu)
        {
            logger.Info("Executing mctrMainMenuWhenWindowActivated() : " + mctrMainMenu);
            return View();
        }

    }
}


