
///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  


using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System;
using System.Linq;
using System.Web.Mvc;
using log4net;
using MCTR.Web.Security;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///MctrOffsetFormBlController is a web controller implementation for the 
    ///MctrOffsetFormBl screen.
    ///</summary>
    ///
    [CustomAuthorize]
    public class MctrOffsetFormBlController : Controller
    {
         private readonly ILog logger;


        public MctrOffsetFormBlController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }
        public ActionResult MctrOffsetForm()
        {
            return PartialView("MctrOffsetForm");
        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrOffsetMctrOffsetOnLoad
        ///</summary>
        ///<param name = "MctrOffsetFormBl"></param>
        ///<returns>IEnumerable<MctrOffsetFormBl> </returns>


        public JsonResult mctrOffsetMctrOffsetOnLoad(int mctrno)
        {
            MctrOffsetFormBl mctrOffsetFormBl = new MctrOffsetFormBl();
            try
            {
                mctrOffsetFormBl.MCTR_NO = mctrno;

                MctrOffsetFormBlHandler mctrOffsetFormBlHandler = new MctrOffsetFormBlHandler();
                logger.Debug("Executing mctrOffsetFormBlHandler.mctrOffsetMctrOffsetOnLoad().");
                var mctrOffsetFormBlResp = mctrOffsetFormBlHandler.mctrOffsetMctrOffsetOnLoad(mctrOffsetFormBl);
                logger.Info("Response Received : " + mctrOffsetFormBlResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = mctrOffsetFormBlResp.Count(),
                    rows = mctrOffsetFormBlResp,
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.Controller.mctrOffsetMctrOffsetOnLoad():" + e.Message);
                throw;
            }

        }
        ///*************************************************************
        ///<summary>
        ///Method Name : mctrOffsetFormBlWhenNewFormInstance
        ///</summary>
        ///<param name = "MctrOffsetFormBl"></param>
        ///<returns>IEnumerable<MctrOffsetFormBl> </returns>

        [HttpPost]
        public ActionResult mctrOffsetFormBlWhenNewFormInstance(MctrOffsetFormBl mctrOffsetFormBl)
        {
            try
            {
                logger.Info("Executing mctrOffsetFormBlWhenNewFormInstance() : " + mctrOffsetFormBl);
                if (mctrOffsetFormBl != null)
                {
                    MctrOffsetFormBlHandler mctrOffsetFormBlHandler = new MctrOffsetFormBlHandler();
                    logger.Debug("Executing mctrOffsetFormBlHandler.mctrOffsetFormBlWhenNewFormInstance().");
                    var mctrOffsetFormBlResp = mctrOffsetFormBlHandler.mctrOffsetFormBlWhenNewFormInstance(mctrOffsetFormBl);
                    logger.Info("Response Received : " + mctrOffsetFormBlResp);
                    return View("MctrOffsetFormBl", mctrOffsetFormBlResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.Controller.mctrOffsetFormBlWhenNewFormInstance():" + e.Message);
                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : mctrOffsetFormBlWhenWindowClosed
        ///</summary>
        ///<param name = "MctrOffsetFormBl"></param>
        ///<returns>IEnumerable<MctrOffsetFormBl> </returns>

        [HttpPost]
        public ActionResult mctrOffsetFormBlWhenWindowClosed(MctrOffsetFormBl mctrOffsetFormBl)
        {
            try
            {
                logger.Info("Executing mctrOffsetFormBlWhenWindowClosed() : " + mctrOffsetFormBl);
                if (mctrOffsetFormBl != null)
                {
                    MctrOffsetFormBlHandler mctrOffsetFormBlHandler = new MctrOffsetFormBlHandler();
                    logger.Debug("Executing mctrOffsetFormBlHandler.mctrOffsetFormBlWhenWindowClosed().");
                    var mctrOffsetFormBlResp = mctrOffsetFormBlHandler.mctrOffsetFormBlWhenWindowClosed(mctrOffsetFormBl);
                    logger.Info("Response Received : " + mctrOffsetFormBlResp);
                    return View("MctrOffsetFormBl", mctrOffsetFormBlResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch (Exception e)
            {
                logger.Error("Error from  Mctr.controller.mctrOffsetFormBlWhenWindowClosed():" + e.Message);
                throw;
            }
        }
    }
}
