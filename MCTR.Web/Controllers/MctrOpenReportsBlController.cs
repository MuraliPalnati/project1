
///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  


using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System;
using System.Linq;
using System.Web.Mvc;
using log4net;
using MCTR.Web.Util;
using System.Data;
using MCTR.Web.Security;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///MctrOpenReportsBlController is a web controller implementation for the 
    ///MctrOpenReportsBl screen.
    ///</summary>
    ///
    [CustomAuthorize]
    public class MctrOpenReportsBlController : Controller
    {
        private readonly ILog logger = null;



        public MctrOpenReportsBlController()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        }

        public ActionResult OpenMctrView() {
            return View();
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : selectionbutBuWhenButtonPressedOpenLOV()
        ///</summary>
        ///<param name = "MctrOpenReportsBl"></param>
        ///<returns>IEnumerable<MctrOpenReportsBl> </returns>


        public JsonResult selectionbutBuWhenButtonPressedOpenJSON()
        {
            var mctrOpenReportsBl = new MctrBusUnit();
            logger.Info("Executing selectionbutBuWhenButtonPressedOpenLOV() : " + mctrOpenReportsBl);
            MctrOpenReportsBlHandler mctrOpenReportsBlHandler = new MctrOpenReportsBlHandler();
            mctrOpenReportsBl.session_bems = SessionPerister.BEMSID; ;
            logger.Debug("Executing mctrOpenReportsBlHandler.selectionbutBuWhenButtonPressedOpenLOV().");
            var mctrOpenReportsBlResp = mctrOpenReportsBlHandler.getRgBuLOV(mctrOpenReportsBl);
            logger.Info("Response Received : " + mctrOpenReportsBlResp);
            var jsonData = new
            {
                total = 1,
                page = 1,
                records = mctrOpenReportsBlResp.Count(),
                rows = mctrOpenReportsBlResp,
                userdata = mctrOpenReportsBlResp
            };
            return Json(jsonData, JsonRequestBehavior.AllowGet);

        }
        public ActionResult selectionbutBuWhenButtonPressedOpenLOV() {
            return PartialView();
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : selectionoriginatorWhenButtonPressed
        ///</summary>
        ///<param name = "MctrOpenReportsBl"></param>
        ///<returns>IEnumerable<MctrOpenReportsBl> </returns>

        [HttpGet]
        public ActionResult selectionoriginatorWhenButtonPressed(MctrOpenReportsBl mctrOpenReportsBl)
        {
            logger.Info("Executing selectionoriginatorWhenButtonPressed() : " + mctrOpenReportsBl);
            if (mctrOpenReportsBl != null)
            {
                MctrOpenReportsBlHandler mctrOpenReportsBlHandler = new MctrOpenReportsBlHandler();
            logger.Debug("Executing mctrOpenReportsBlHandler.selectionoriginatorWhenButtonPressed().");
            var mctrOpenReportsBlResp = mctrOpenReportsBlHandler.selectionoriginatorWhenButtonPressed(mctrOpenReportsBl);
            logger.Info("Response Received : " + mctrOpenReportsBlResp);
            return View("MctrOpenReportsBl", mctrOpenReportsBlResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : selectionstatusWhenButtonPressed
        ///</summary>
        ///<param name = "MctrOpenReportsBl"></param>
        ///<returns>IEnumerable<MctrOpenReportsBl> </returns>

        [HttpPost]
        public ActionResult selectionstatusWhenButtonPressed(MctrOpenReportsBl mctrOpenReportsBl)
        {
            logger.Info("Executing selectionstatusWhenButtonPressed() : " + mctrOpenReportsBl);
            if (mctrOpenReportsBl != null)
            {
                MctrOpenReportsBlHandler mctrOpenReportsBlHandler = new MctrOpenReportsBlHandler();
                logger.Debug("Executing mctrOpenReportsBlHandler.selectionstatusWhenButtonPressed().");
                var mctrOpenReportsBlResp = mctrOpenReportsBlHandler.selectionstatusWhenButtonPressed(mctrOpenReportsBl);
                logger.Info("Response Received : " + mctrOpenReportsBlResp);
                return View("MctrOpenReportsBl", mctrOpenReportsBlResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : selectionfinancialControlWhenButtonPressed
        ///</summary>
        ///<param name = "MctrOpenReportsBl"></param>
        ///<returns>IEnumerable<MctrOpenReportsBl> </returns>

        [HttpPost]
        public ActionResult selectionfinancialControlWhenButtonPressed(MctrOpenReportsBl mctrOpenReportsBl)
        {
            logger.Info("Executing selectionfinancialControlWhenButtonPressed() : " + mctrOpenReportsBl);
            if (mctrOpenReportsBl != null)
            {
                MctrOpenReportsBlHandler mctrOpenReportsBlHandler = new MctrOpenReportsBlHandler();
                logger.Debug("Executing mctrOpenReportsBlHandler.selectionfinancialControlWhenButtonPressed().");
                var mctrOpenReportsBlResp = mctrOpenReportsBlHandler.selectionfinancialControlWhenButtonPressed(mctrOpenReportsBl);
                logger.Info("Response Received : " + mctrOpenReportsBlResp);
                return View("MctrOpenReportsBl", mctrOpenReportsBlResp);
            }
            else
            {
                logger.Info("Request object is null or doesn't contain any value.");
                return View();
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : selectionbutExcelWhenButtonPressed
        ///</summary>
        ///<param name = "MctrOpenReportsBl"></param>
        ///<returns>IEnumerable<MctrOpenReportsBl> </returns>

        [HttpGet]
        public ActionResult selectionbutExcelWhenButtonPressed(MctrOpenReportsBl mctrOpenReportsBl)
        {
            logger.Info("Executing selectionbutExcelWhenButtonPressed() : " + mctrOpenReportsBl);

            MctrOpenReportsBlHandler mctrOpenReportsBlHandler = new MctrOpenReportsBlHandler();
            logger.Debug("Executing mctrOpenReportsBlHandler.selectionbutExcelWhenButtonPressed().");

            mctrOpenReportsBl.f_bu = "AC";
            var mctrOpenReportsBlResp = mctrOpenReportsBlHandler.selectionbutExcelWhenButtonPressed(mctrOpenReportsBl).ToList<MctrOpenReportsBl>();

            Download obj = new Download();
            DataTable[] dt = new DataTable[2];

            DataTable d1 = new DataTable();
            string msg = @"open mctr listing for selected business unit:" + mctrOpenReportsBl.f_bu;
            d1.Columns.Add(msg);
            dt[0] = d1;
            d1.Dispose();
            dt[1] = obj.ToDataTable<MctrOpenReportsBl>(mctrOpenReportsBlResp);

            string filename = "xtrt-open-mctr-list-bu_" + mctrOpenReportsBl.f_bu + "-" + DateTime.Now.ToString("yyyyMMddTHHmmss");
            obj.ExportExcelData(dt, filename);

            logger.Info("Response Received : " + mctrOpenReportsBlResp);
            return View("MctrOpenReportsBl", mctrOpenReportsBlResp);
        }


    }
}
