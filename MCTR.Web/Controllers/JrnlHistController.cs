
///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  


using MCTR.DomainEntity;
using MCTR.Web.Handlers;
using System;
using System.Linq;
using System.Web.Mvc;
using log4net;
using MCTR.Web.Security;

namespace MCTR.Web.Controllers
{
    ///*********************************************************************
    ///<summary>
    ///JrnlHistController is a web controller implementation for the 
    ///JrnlHist screen.
    ///</summary>
    ///
    [CustomAuthorize]
    public class jrnlHistController : Controller, IDisposable
    {
     private readonly ILog logger;



    public jrnlHistController(){
      logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
          
    }


        public ActionResult JournalHistory() {
            return View();
        }

    ///*************************************************************
    ///<summary>
    ///Method Name : selectionbutJhistDateWhenButtonPressedOpenLOV()
    ///</summary>
    ///<param name = "JrnlHist"></param>
    ///<returns>IEnumerable<JrnlHist> </returns>

    [HttpPost]
    public ActionResult selectionbutJhistDateWhenButtonPressedOpenLOV(JrnlHist jrnlHist)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.JrnlHistController.selectionbutJhistDateWhenButtonPressedOpenLOV() : " + jrnlHist);
                if (jrnlHist != null)
                {
                    JrnlHistHandler jrnlHistHandler = new JrnlHistHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.JrnlHistController.selectionbutJhistDateWhenButtonPressedOpenLOV()");
                    var jrnlHistResp = jrnlHistHandler.selectionbutJhistDateWhenButtonPressedOpenLOV(jrnlHist);
                    logger.Info("Response Received : " + jrnlHistResp);
                    return View("JrnlHist", jrnlHistResp);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error(" Error from MCTR.Web.Controllers.JrnlHistController.selectionbutJhistDateWhenButtonPressedOpenLOV(): " + e.Message);
                throw;
            }
     }
            

    ///*************************************************************
    ///<summary>
    ///Method Name : jrnlHistOnLoad
    ///</summary>
    ///<param name = "JrnlHist"></param>
    ///<returns>IEnumerable<JrnlHist> </returns>

    public ActionResult jrnlHistOnLoad(string jrnlHistDate)
        {
            try
            {
                
                if (jrnlHistDate != null)
                {
                    var jrnlHist = new JrnlHist();
                    jrnlHist.DATE_JOURNAL = DateTime.Parse(jrnlHistDate);
                    jrnlHist.session_bems = SessionPerister.BEMSID;
                    JrnlHistHandler jrnlHistHandler = new JrnlHistHandler();
                    logger.Debug("Executing  MCTR.Web.Controllers.JrnlHistController.jrnlHistOnLoad():");
                    var jrnlHistResp = jrnlHistHandler.jrnlHistOnLoad(jrnlHist);
                    logger.Info("Response Received : " + jrnlHistResp);
                    return Json(jrnlHistResp, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error(" Error from MCTR.Web.Controllers.JrnlHistController.jrnlHistOnLoad(): " + e.Message);
                throw;
            }
     }   

    ///*************************************************************
    ///<summary>
    ///Method Name : getRgJhistDateLOV()
    ///</summary>
    ///<param name = "JrnlHist"></param>
    ///<returns>IEnumerable<JrnlHist> </returns>

    //[HttpPost]
    public ActionResult getRgJhistDateLOV()
        {
            try
            {
                    JrnlHistHandler jrnlHistHandler = new JrnlHistHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.JrnlHistController.getRgJhistDateLOV():.");
                    var jrnlHistResp = jrnlHistHandler.getRgJhistDateLOV();
                    logger.Info("Response Received : " + jrnlHistResp);
                    return PartialView("JHistDateLOV");
            }
            catch(Exception e)
            {
                logger.Error(" Error from MCTR.Web.Controllers.JrnlHistController.getRgJhistDateLOV(): " + e.Message);
                throw;
            }
     }


        ///*************************************************************
        ///<summary>
        ///Method Name : getRgJhistDates()
        ///</summary>
        ///<param name = "JrnlHist"></param>
        ///<returns>IEnumerable<JrnlHist> </returns>
        public JsonResult getRgJhistDates() {

            try
            {
                JrnlHistHandler jrnlHistHandler = new JrnlHistHandler();
                logger.Debug("Executing MCTR.Web.Controllers.JrnlHistController.getRgJhistDateLOV():.");
                var jrnlHistResp = jrnlHistHandler.getRgJhistDateLOV();
                logger.Info("Response Received : " + jrnlHistResp);
                var jsonData = new
                {
                    total = 1,
                    page = 1,
                    records = jrnlHistResp.Count(),
                    rows = jrnlHistResp,
                    userdata = jrnlHistResp
                };
                return Json(jsonData, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                logger.Error(" Error from MCTR.Web.Controllers.JrnlHistController.getRgJhistDateLOV(): " + e.Message);
                throw;
            }
        }

    ///*************************************************************
    ///<summary>
    ///Method Name : jrnlHistWhenNewFormInstance
    ///</summary>
    ///<param name = "JrnlHist"></param>
    ///<returns>IEnumerable<JrnlHist> </returns>

    [HttpPost]
    public ActionResult jrnlHistWhenNewFormInstance(JrnlHist jrnlHist)
        {
            try
            {
                logger.Info("Executing MCTR.Web.Controllers.JrnlHistController.jrnlHistWhenNewFormInstance(): " + jrnlHist);
                if (jrnlHist != null) {
                    JrnlHistHandler jrnlHistHandler = new JrnlHistHandler();
                    logger.Debug("Executing MCTR.Web.Controllers.JrnlHistController.jrnlHistWhenNewFormInstance():");
                    var jrnlHistResp = jrnlHistHandler.jrnlHistWhenNewFormInstance(jrnlHist);
                    logger.Info("Response Received : " + jrnlHistResp);
                    return View("JrnlHist", jrnlHistResp);
                }
                else {
                    logger.Info("Request object is null or doesn't contain any value.");
                    return View();
                }
            }
            catch(Exception e)
            {
                logger.Error(" Error from MCTR.Web.Controllers.JrnlHistController.jrnlHistWhenNewFormInstance(): " + e.Message);
                throw;
            }
     }     
  } 
}
