///*************************************************************************
/// 
/// BOEING CONFIDENTIAL
/// ___________________
/// 
///  BOEING is a trademark of Boeing Management Company.
///
///  Copyright © 2016 Boeing. All rights reserved.
/// 
/// NOTICE:  All information contained herein is, and remains
/// the property of Boeing and its suppliers, if any.  
/// The intellectual and technical concepts contained
/// herein are proprietary to Boeing and its suppliers and may be 
/// covered by U.S. and Foreign Patents, patents in process, 
/// and are protected by trade secret or copyright law.
/// Dissemination of this information or reproduction of this material
/// is strictly forbidden unless prior written permission is obtained
/// from Boeing. 
///

///************************************************************************
/// Author           : Generated by ATMA ®
/// Revision History :  

using System;
using System.Collections.Generic;
using System.Linq;
using MCTR.DataEntity;
using AutoMapper;
using System.Data;
using log4net;
using Oracle.ManagedDataAccess.Client;

using MCTR.DomainEntity;

using MCTR.DataAccessInterface;


namespace MCTR.DataAccess
{
    ///*********************************************************************
    ///<summary>
    ///PerCheckBlRepository is a data access implementation which holds all 
    ///the data access logic in it.
    ///</summary>
    public class PerCheckBlRepository : BaseRepository, IPerCheckBlRepository
    {

        private readonly ILog logger = null;

        public PerCheckBlRepository()
        {
            logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        }


        ///*************************************************************
        ///<summary>
        ///Method Name : perCheckPerCheckOnLoad
        ///</summary>
        ///<param name = "PerCheckBl"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>

        public IEnumerable<PerCheckBl> perCheckPerCheckOnLoad(IEnumerable<PerCheckBl> perCheckBl)
        {
            try
            {
                logger.Debug("Executing perCheckPerCheckOnLoad with input : " + perCheckBl);
                IEnumerable<MCTR_PER_BACKUP> retrievedPer = new List<MCTR_PER_BACKUP>();
                PerCheckBl Obj = perCheckBl.First();


                List<OracleParameter> paramters = new List<OracleParameter>();

                OracleParameter[] parameter1 = new OracleParameter[2];
                parameter1[0] = new OracleParameter(":mctrno", OracleDbType.Int32, Obj.MCTR_NO, ParameterDirection.Input);
                parameter1[1] = new OracleParameter(":lineno", OracleDbType.Int32, Obj.LINE_NO, ParameterDirection.Input);
                var resultlist = entities.MCTR_PER_BACKUP.SqlQuery("select * from mctr_per_backup where MCTR_NO= :0 and LINE_NO= :1", parameter1).ToList<MCTR_PER_BACKUP>();
                var targetPer = Mapper.DynamicMap<IEnumerable<MCTR_PER_BACKUP>, IEnumerable<PerCheckBl>>(resultlist);
                return targetPer;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.PerCheckBlRepository.perCheckPerCheckOnLoad():" + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : perCheckBlWhenNewFormInstance
        ///</summary>
        ///<param name = "PerCheckBl"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>

        public IEnumerable<PerCheckBl> perCheckBlWhenNewFormInstance(IEnumerable<PerCheckBl> perCheckBl)
        {
            try
            {
                OracleParameter[] parameters = new OracleParameter[10];
                logger.Debug("Executing perCheckBlWhenNewFormInstance with input : " + perCheckBl);
                //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.PerCheckBlRepository.perCheckBlWhenNewFormInstance():" + e.Message);

                throw;
            }
        }

        ///*************************************************************
        ///<summary>
        ///Method Name : perCheckBlWhenWindowClosed
        ///</summary>
        ///<param name = "PerCheckBl"></param>
        ///<returns>IEnumerable<PerCheckBl> </returns>

        public IEnumerable<PerCheckBl> perCheckBlWhenWindowClosed(IEnumerable<PerCheckBl> perCheckBl)
        {
            try
            {
                OracleParameter[] parameters = new OracleParameter[10];
                logger.Debug("Executing perCheckBlWhenWindowClosed with input : " + perCheckBl);
                //TODO: Move the Data Access logic from the Business implementation class to here.
                return null;
            }
            catch (Exception e)
            {
                logger.Error("Error from MCTR.DataAccess.PerCheckBlRepository.perCheckBlWhenWindowClosed():" + e.Message);

                throw;

            }
        }


    }

}

